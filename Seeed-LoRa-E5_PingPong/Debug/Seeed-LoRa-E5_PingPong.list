
Seeed-LoRa-E5_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  08011d78  08011d78  00021d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801290c  0801290c  00031194  2**0
                  CONTENTS
  4 .ARM          00000008  0801290c  0801290c  0002290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012914  08012914  00031194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012914  08012914  00022914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012918  08012918  00022918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001194  20000000  0801291c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20001194  08013ab0  00031194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08013ab0  00031aac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00031194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e6b  00000000  00000000  000311be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f3d  00000000  00000000  00054029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002010  00000000  00000000  00059f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  0005bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a10f  00000000  00000000  0005dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002516e  00000000  00000000  00067e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb97f  00000000  00000000  0008cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096d4  00000000  00000000  00148964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20001194 	.word	0x20001194
 800015c:	00000000 	.word	0x00000000
 8000160:	08011d60 	.word	0x08011d60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20001198 	.word	0x20001198
 800017c:	08011d60 	.word	0x08011d60

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9ac 	b.w	8000fa8 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83e 	bl	8000cd8 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4628      	mov	r0, r5
 8000c70:	4621      	mov	r1, r4
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	f7ff ff09 	bl	8000a8c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc7f 	bl	80005a8 <__aeabi_dmul>
 8000caa:	f7ff ff55 	bl	8000b58 <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc00 	bl	80004b4 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fc76 	bl	80005a8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fab8 	bl	8000238 <__aeabi_dsub>
 8000cc8:	f7ff ff46 	bl	8000b58 <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14d      	bne.n	8000d84 <__udivmoddi4+0xac>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d968      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b152      	cbz	r2, 8000d0a <__udivmoddi4+0x32>
 8000cf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf8:	f1c2 0120 	rsb	r1, r2, #32
 8000cfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	ea41 0803 	orr.w	r8, r1, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fbb8 fef5 	udiv	lr, r8, r5
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fb05 831e 	mls	r3, r5, lr, r8
 8000d1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d20:	fb0e f107 	mul.w	r1, lr, r7
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x68>
 8000d28:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000d30:	f080 811e 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f240 811b 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000d48:	fb05 3310 	mls	r3, r5, r0, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb00 f707 	mul.w	r7, r0, r7
 8000d54:	42a7      	cmp	r7, r4
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x96>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d60:	f080 8108 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d64:	42a7      	cmp	r7, r4
 8000d66:	f240 8105 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d6a:	4464      	add	r4, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d74:	2100      	movs	r1, #0
 8000d76:	b11e      	cbz	r6, 8000d80 <__udivmoddi4+0xa8>
 8000d78:	40d4      	lsrs	r4, r2
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	f000 80ee 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e9c6 0500 	strd	r0, r5, [r6]
 8000d94:	4608      	mov	r0, r1
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0303 	sbc.w	r3, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e2      	beq.n	8000d80 <__udivmoddi4+0xa8>
 8000dba:	e9c6 4800 	strd	r4, r8, [r6]
 8000dbe:	e7df      	b.n	8000d80 <__udivmoddi4+0xa8>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8091 	bne.w	8000ef0 <__udivmoddi4+0x218>
 8000dce:	eba1 050c 	sub.w	r5, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000de0:	fb07 5013 	mls	r0, r7, r3, r5
 8000de4:	0c25      	lsrs	r5, r4, #16
 8000de6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	42a8      	cmp	r0, r5
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0505 	adds.w	r5, ip, r5
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	42a8      	cmp	r0, r5
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79e      	b.n	8000d76 <__udivmoddi4+0x9e>
 8000e38:	f1c1 0720 	rsb	r7, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40fd      	lsrs	r5, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f301 	lsl.w	r3, r0, r1
 8000e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 5518 	mls	r5, r9, r8, r5
 8000e68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	42a8      	cmp	r0, r5
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0505 	adds.w	r5, ip, r5
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	42a8      	cmp	r0, r5
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4465      	add	r5, ip
 8000e90:	1a2d      	subs	r5, r5, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000e98:	fb09 5510 	mls	r5, r9, r0, r5
 8000e9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	45ae      	cmp	lr, r5
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0505 	adds.w	r5, ip, r5
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	45ae      	cmp	lr, r5
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4465      	add	r5, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba5 050e 	sub.w	r5, r5, lr
 8000ec6:	42a5      	cmp	r5, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15e      	cbz	r6, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb65 050e 	sbc.w	r5, r5, lr
 8000eda:	fa05 f707 	lsl.w	r7, r5, r7
 8000ede:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee2:	40cd      	lsrs	r5, r1
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c6 7500 	strd	r7, r5, [r6]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa25 f303 	lsr.w	r3, r5, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	430d      	orrs	r5, r1
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f10:	fb07 3011 	mls	r0, r7, r1, r3
 8000f14:	0c2b      	lsrs	r3, r5, #16
 8000f16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3902      	subs	r1, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a1b      	subs	r3, r3, r0
 8000f3a:	b2ad      	uxth	r5, r5
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3310 	mls	r3, r7, r0, r3
 8000f44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f48:	fb00 f30e 	mul.w	r3, r0, lr
 8000f4c:	42ab      	cmp	r3, r5
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0505 	adds.w	r5, ip, r5
 8000f54:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4465      	add	r5, ip
 8000f62:	1aed      	subs	r5, r5, r3
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	e707      	b.n	8000d80 <__udivmoddi4+0xa8>
 8000f70:	4686      	mov	lr, r0
 8000f72:	e6e5      	b.n	8000d40 <__udivmoddi4+0x68>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6fa      	b.n	8000d6e <__udivmoddi4+0x96>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4641      	mov	r1, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4465      	add	r5, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fe0:	2004      	movs	r0, #4
 8000fe2:	f7ff ffe3 	bl	8000fac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ffe0 	bl	8000fac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	200b      	movs	r0, #11
 8000ff2:	f001 fe80 	bl	8002cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ff6:	200b      	movs	r0, #11
 8000ff8:	f001 fe97 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800100e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4313      	orrs	r3, r2
 8001016:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ffdb 	bl	8001000 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff ffd8 	bl	8001000 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ffd5 	bl	8001000 <LL_AHB2_GRP1_EnableClock>



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105c:	4857      	ldr	r0, [pc, #348]	; (80011bc <MX_GPIO_Init+0x18c>)
 800105e:	f002 fcb0 	bl	80039c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2131      	movs	r1, #49	; 0x31
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f002 fcaa 	bl	80039c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800106e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	484d      	ldr	r0, [pc, #308]	; (80011bc <MX_GPIO_Init+0x18c>)
 8001086:	f002 fa57 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800108a:	2331      	movs	r3, #49	; 0x31
 800108c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f002 fa49 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4840      	ldr	r0, [pc, #256]	; (80011bc <MX_GPIO_Init+0x18c>)
 80010bc:	f002 fa3c 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(GPIOA, PLAY5_Pin | PLAY1_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f002 fc7a 	bl	80039c2 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(GPIOB,
 80010ce:	2201      	movs	r2, #1
 80010d0:	f248 6118 	movw	r1, #34328	; 0x8618
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x18c>)
 80010d6:	f002 fc74 	bl	80039c2 <HAL_GPIO_WritePin>
  			PLAY6_Pin | PLAY8_Pin | PLAY7_Pin | PLAY4_Pin | PLAY2_Pin,
  			GPIO_PIN_SET);

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e0:	4836      	ldr	r0, [pc, #216]	; (80011bc <MX_GPIO_Init+0x18c>)
 80010e2:	f002 fc6e 	bl	80039c2 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f002 fc67 	bl	80039c2 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(PLAY3_GPIO_Port, PLAY3_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2102      	movs	r1, #2
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MX_GPIO_Init+0x190>)
 80010fa:	f002 fc62 	bl	80039c2 <HAL_GPIO_WritePin>

  	/*Configure GPIO pins : PLAY5_Pin PLAY1_Pin */
  	GPIO_InitStruct.Pin = PLAY5_Pin | PLAY1_Pin;
 80010fe:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001102:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f002 fa0e 	bl	8003538 <HAL_GPIO_Init>

  	/*Configure GPIO pins : PLAY6_Pin PLAY8_Pin PLAY7_Pin PLAY4_Pin
  	 PLAY2_Pin */
  	GPIO_InitStruct.Pin = PLAY6_Pin | PLAY8_Pin | PLAY7_Pin | PLAY4_Pin
 800111c:	f248 6318 	movw	r3, #34328	; 0x8618
 8001120:	607b      	str	r3, [r7, #4]
  			| PLAY2_Pin;
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2302      	movs	r3, #2
 800112c:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_GPIO_Init+0x18c>)
 8001134:	f002 fa00 	bl	8003538 <HAL_GPIO_Init>

  	/*Configure GPIO pin : LED2_Pin */
  	GPIO_InitStruct.Pin = LED2_Pin;
 8001138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800113c:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800113e:	2311      	movs	r3, #17
 8001140:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2302      	movs	r3, #2
 8001148:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	481b      	ldr	r0, [pc, #108]	; (80011bc <MX_GPIO_Init+0x18c>)
 8001150:	f002 f9f2 	bl	8003538 <HAL_GPIO_Init>

  	/*Configure GPIO pin : LED1_Pin */
  	GPIO_InitStruct.Pin = LED1_Pin;
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001158:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800115a:	2311      	movs	r3, #17
 800115c:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2302      	movs	r3, #2
 8001164:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f002 f9e3 	bl	8003538 <HAL_GPIO_Init>

  	/*Configure GPIO pin : PLAY3_Pin */
  	GPIO_InitStruct.Pin = PLAY3_Pin;
 8001172:	2302      	movs	r3, #2
 8001174:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PLAY3_GPIO_Port, &GPIO_InitStruct);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <MX_GPIO_Init+0x190>)
 8001188:	f002 f9d6 	bl	8003538 <HAL_GPIO_Init>

  	/*Configure GPIO pins : BOTAO2_Pin BOTAO1_Pin */
  	GPIO_InitStruct.Pin = BOTAO2_Pin | BOTAO1_Pin;
 800118c:	230c      	movs	r3, #12
 800118e:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	2302      	movs	r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f002 f9ca 	bl	8003538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2029      	movs	r0, #41	; 0x29
 80011aa:	f001 fda4 	bl	8002cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ae:	2029      	movs	r0, #41	; 0x29
 80011b0:	f001 fdbb 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800

080011c4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d4:	f023 0218 	bic.w	r2, r3, #24
 80011d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f4:	f001 fc58 	bl	8002aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f8:	f000 f84e 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f7ff ff18 	bl	8001030 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8001200:	f00a fb4d 	bl	800b89e <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */
	LED1_OFF
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f002 fbd8 	bl	80039c2 <HAL_GPIO_WritePin>
	LED2_OFF
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <main+0xa0>)
 800121a:	f002 fbd2 	bl	80039c2 <HAL_GPIO_WritePin>
	teste_led();
 800121e:	f000 fa1d 	bl	800165c <teste_led>
	numero_vv = 1;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <main+0xa4>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	display_num(numero_vv);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <main+0xa4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f88d 	bl	800134c <display_num>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
    if (HAL_GPIO_ReadPin(BOTAO1_GPIO_Port, BOTAO1_Pin)) {
 8001232:	2104      	movs	r1, #4
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f002 fbac 	bl	8003994 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <main+0x56>
    	codec_and_send_start_frame_rc();
 8001242:	f000 fa47 	bl	80016d4 <codec_and_send_start_frame_rc>
    }
	if (HAL_GPIO_ReadPin(BOTAO2_GPIO_Port, BOTAO2_Pin)) {
 8001246:	2108      	movs	r1, #8
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f002 fba2 	bl	8003994 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0ed      	beq.n	8001232 <main+0x42>
		if (numero_vv < 5)
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <main+0xa4>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b04      	cmp	r3, #4
 800125c:	d806      	bhi.n	800126c <main+0x7c>
			numero_vv++;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <main+0xa4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <main+0xa4>)
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e002      	b.n	8001272 <main+0x82>
		else
			numero_vv = 1;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <main+0xa4>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
		display_num(numero_vv);
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <main+0xa4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f868 	bl	800134c <display_num>
		while (HAL_GPIO_ReadPin(BOTAO2_GPIO_Port, BOTAO2_Pin)) {
 800127c:	bf00      	nop
 800127e:	2108      	movs	r1, #8
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f002 fb86 	bl	8003994 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f7      	bne.n	800127e <main+0x8e>
    if (HAL_GPIO_ReadPin(BOTAO1_GPIO_Port, BOTAO1_Pin)) {
 800128e:	e7d0      	b.n	8001232 <main+0x42>
 8001290:	48000400 	.word	0x48000400
 8001294:	200011b1 	.word	0x200011b1

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09a      	sub	sp, #104	; 0x68
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2248      	movs	r2, #72	; 0x48
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00c f8f6 	bl	800d498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012be:	f002 fbb9 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ff7e 	bl	80011c4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <SystemClock_Config+0xb0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <SystemClock_Config+0xb0>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <SystemClock_Config+0xb0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012e4:	2324      	movs	r3, #36	; 0x24
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012e8:	2381      	movs	r3, #129	; 0x81
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80012f4:	23b0      	movs	r3, #176	; 0xb0
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fee3 	bl	80040cc <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800130c:	f000 fac2 	bl	8001894 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001310:	234f      	movs	r3, #79	; 0x4f
 8001312:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fa68 	bl	8004804 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800133a:	f000 faab 	bl	8001894 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3768      	adds	r7, #104	; 0x68
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58000400 	.word	0x58000400

0800134c <display_num>:

/* USER CODE BEGIN 4 */
uint8_t display_num(uint8_t numero) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	DISPLAY1_OFF
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f002 fb2f 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY2_OFF
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	48b9      	ldr	r0, [pc, #740]	; (8001650 <display_num+0x304>)
 800136c:	f002 fb29 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY3_OFF
 8001370:	2201      	movs	r2, #1
 8001372:	2102      	movs	r1, #2
 8001374:	48b7      	ldr	r0, [pc, #732]	; (8001654 <display_num+0x308>)
 8001376:	f002 fb24 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY4_OFF
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	48b3      	ldr	r0, [pc, #716]	; (8001650 <display_num+0x304>)
 8001382:	f002 fb1e 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY5_OFF
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 fb17 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY6_OFF
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139a:	48ad      	ldr	r0, [pc, #692]	; (8001650 <display_num+0x304>)
 800139c:	f002 fb11 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY7_OFF
 80013a0:	2201      	movs	r2, #1
 80013a2:	2110      	movs	r1, #16
 80013a4:	48aa      	ldr	r0, [pc, #680]	; (8001650 <display_num+0x304>)
 80013a6:	f002 fb0c 	bl	80039c2 <HAL_GPIO_WritePin>
	DISPLAY8_OFF
 80013aa:	2201      	movs	r2, #1
 80013ac:	2108      	movs	r1, #8
 80013ae:	48a8      	ldr	r0, [pc, #672]	; (8001650 <display_num+0x304>)
 80013b0:	f002 fb07 	bl	80039c2 <HAL_GPIO_WritePin>

	if (ativo)
 80013b4:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <display_num+0x30c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <display_num+0x7c>
		DISPLAY4_ON
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c2:	48a3      	ldr	r0, [pc, #652]	; (8001650 <display_num+0x304>)
 80013c4:	f002 fafd 	bl	80039c2 <HAL_GPIO_WritePin>
	switch (numero) {
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	f200 8139 	bhi.w	8001642 <display_num+0x2f6>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <display_num+0x8c>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	08001401 	.word	0x08001401
 80013dc:	08001449 	.word	0x08001449
 80013e0:	0800145f 	.word	0x0800145f
 80013e4:	0800149b 	.word	0x0800149b
 80013e8:	080014d3 	.word	0x080014d3
 80013ec:	08001503 	.word	0x08001503
 80013f0:	0800153f 	.word	0x0800153f
 80013f4:	08001589 	.word	0x08001589
 80013f8:	080015a9 	.word	0x080015a9
 80013fc:	080015fd 	.word	0x080015fd
	case 0:
		DISPLAY1_ON
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 fada 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001414:	488e      	ldr	r0, [pc, #568]	; (8001650 <display_num+0x304>)
 8001416:	f002 fad4 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	488d      	ldr	r0, [pc, #564]	; (8001654 <display_num+0x308>)
 8001420:	f002 facf 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f002 fac8 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 8001432:	2200      	movs	r2, #0
 8001434:	2110      	movs	r1, #16
 8001436:	4886      	ldr	r0, [pc, #536]	; (8001650 <display_num+0x304>)
 8001438:	f002 fac3 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 800143c:	2200      	movs	r2, #0
 800143e:	2108      	movs	r1, #8
 8001440:	4883      	ldr	r0, [pc, #524]	; (8001650 <display_num+0x304>)
 8001442:	f002 fabe 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 8001446:	e0fd      	b.n	8001644 <display_num+0x2f8>
	case 1:
		DISPLAY8_ON
 8001448:	2200      	movs	r2, #0
 800144a:	2108      	movs	r1, #8
 800144c:	4880      	ldr	r0, [pc, #512]	; (8001650 <display_num+0x304>)
 800144e:	f002 fab8 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8001452:	2200      	movs	r2, #0
 8001454:	2102      	movs	r1, #2
 8001456:	487f      	ldr	r0, [pc, #508]	; (8001654 <display_num+0x308>)
 8001458:	f002 fab3 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 800145c:	e0f2      	b.n	8001644 <display_num+0x2f8>
	case 2:
		DISPLAY7_ON
 800145e:	2200      	movs	r2, #0
 8001460:	2110      	movs	r1, #16
 8001462:	487b      	ldr	r0, [pc, #492]	; (8001650 <display_num+0x304>)
 8001464:	f002 faad 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8001468:	2200      	movs	r2, #0
 800146a:	2108      	movs	r1, #8
 800146c:	4878      	ldr	r0, [pc, #480]	; (8001650 <display_num+0x304>)
 800146e:	f002 faa8 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001478:	4875      	ldr	r0, [pc, #468]	; (8001650 <display_num+0x304>)
 800147a:	f002 faa2 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY1_ON
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f002 fa9b 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	486f      	ldr	r0, [pc, #444]	; (8001650 <display_num+0x304>)
 8001494:	f002 fa95 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 8001498:	e0d4      	b.n	8001644 <display_num+0x2f8>
	case 3:
		DISPLAY7_ON
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	486c      	ldr	r0, [pc, #432]	; (8001650 <display_num+0x304>)
 80014a0:	f002 fa8f 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 80014a4:	2200      	movs	r2, #0
 80014a6:	2108      	movs	r1, #8
 80014a8:	4869      	ldr	r0, [pc, #420]	; (8001650 <display_num+0x304>)
 80014aa:	f002 fa8a 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80014ae:	2200      	movs	r2, #0
 80014b0:	2102      	movs	r1, #2
 80014b2:	4868      	ldr	r0, [pc, #416]	; (8001654 <display_num+0x308>)
 80014b4:	f002 fa85 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014be:	4864      	ldr	r0, [pc, #400]	; (8001650 <display_num+0x304>)
 80014c0:	f002 fa7f 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ca:	4861      	ldr	r0, [pc, #388]	; (8001650 <display_num+0x304>)
 80014cc:	f002 fa79 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 80014d0:	e0b8      	b.n	8001644 <display_num+0x2f8>
	case 4:
		DISPLAY5_ON
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f002 fa71 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	485a      	ldr	r0, [pc, #360]	; (8001650 <display_num+0x304>)
 80014e8:	f002 fa6b 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 80014ec:	2200      	movs	r2, #0
 80014ee:	2108      	movs	r1, #8
 80014f0:	4857      	ldr	r0, [pc, #348]	; (8001650 <display_num+0x304>)
 80014f2:	f002 fa66 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80014f6:	2200      	movs	r2, #0
 80014f8:	2102      	movs	r1, #2
 80014fa:	4856      	ldr	r0, [pc, #344]	; (8001654 <display_num+0x308>)
 80014fc:	f002 fa61 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 8001500:	e0a0      	b.n	8001644 <display_num+0x2f8>
	case 5:
		DISPLAY7_ON
 8001502:	2200      	movs	r2, #0
 8001504:	2110      	movs	r1, #16
 8001506:	4852      	ldr	r0, [pc, #328]	; (8001650 <display_num+0x304>)
 8001508:	f002 fa5b 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f002 fa54 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001520:	484b      	ldr	r0, [pc, #300]	; (8001650 <display_num+0x304>)
 8001522:	f002 fa4e 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8001526:	2200      	movs	r2, #0
 8001528:	2102      	movs	r1, #2
 800152a:	484a      	ldr	r0, [pc, #296]	; (8001654 <display_num+0x308>)
 800152c:	f002 fa49 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4846      	ldr	r0, [pc, #280]	; (8001650 <display_num+0x304>)
 8001538:	f002 fa43 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 800153c:	e082      	b.n	8001644 <display_num+0x2f8>
	case 6:
		DISPLAY7_ON
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
 8001542:	4843      	ldr	r0, [pc, #268]	; (8001650 <display_num+0x304>)
 8001544:	f002 fa3d 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f002 fa36 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	483c      	ldr	r0, [pc, #240]	; (8001650 <display_num+0x304>)
 800155e:	f002 fa30 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY1_ON
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f002 fa29 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	4836      	ldr	r0, [pc, #216]	; (8001650 <display_num+0x304>)
 8001578:	f002 fa23 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	4834      	ldr	r0, [pc, #208]	; (8001654 <display_num+0x308>)
 8001582:	f002 fa1e 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 8001586:	e05d      	b.n	8001644 <display_num+0x2f8>
	case 7:
		DISPLAY7_ON
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <display_num+0x304>)
 800158e:	f002 fa18 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <display_num+0x304>)
 8001598:	f002 fa13 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	482c      	ldr	r0, [pc, #176]	; (8001654 <display_num+0x308>)
 80015a2:	f002 fa0e 	bl	80039c2 <HAL_GPIO_WritePin>
		break;
 80015a6:	e04d      	b.n	8001644 <display_num+0x2f8>
	case 8:
		DISPLAY1_ON
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f002 fa06 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015bc:	4824      	ldr	r0, [pc, #144]	; (8001650 <display_num+0x304>)
 80015be:	f002 fa00 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80015c2:	2200      	movs	r2, #0
 80015c4:	2102      	movs	r1, #2
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <display_num+0x308>)
 80015c8:	f002 f9fb 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f002 f9f4 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <display_num+0x304>)
 80015e2:	f002 f9ee 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4819      	ldr	r0, [pc, #100]	; (8001650 <display_num+0x304>)
 80015ec:	f002 f9e9 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 80015f0:	2200      	movs	r2, #0
 80015f2:	2108      	movs	r1, #8
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <display_num+0x304>)
 80015f6:	f002 f9e4 	bl	80039c2 <HAL_GPIO_WritePin>

		break;
 80015fa:	e023      	b.n	8001644 <display_num+0x2f8>
	case 9:

		DISPLAY3_ON
 80015fc:	2200      	movs	r2, #0
 80015fe:	2102      	movs	r1, #2
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <display_num+0x308>)
 8001602:	f002 f9de 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f002 f9d7 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <display_num+0x304>)
 800161c:	f002 f9d1 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <display_num+0x304>)
 8001626:	f002 f9cc 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 800162a:	2200      	movs	r2, #0
 800162c:	2108      	movs	r1, #8
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <display_num+0x304>)
 8001630:	f002 f9c7 	bl	80039c2 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <display_num+0x304>)
 800163c:	f002 f9c1 	bl	80039c2 <HAL_GPIO_WritePin>

		break;
 8001640:	e000      	b.n	8001644 <display_num+0x2f8>

	default:
		break;
 8001642:	bf00      	nop
	}
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	48000400 	.word	0x48000400
 8001654:	48000800 	.word	0x48000800
 8001658:	200011b0 	.word	0x200011b0

0800165c <teste_led>:
	HAL_Delay(300);
	display_num(99);

}

void teste_led(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	LED1_OFF
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f002 f9aa 	bl	80039c2 <HAL_GPIO_WritePin>
	LED2_OFF
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <teste_led+0x74>)
 8001676:	f002 f9a4 	bl	80039c2 <HAL_GPIO_WritePin>
	LED1_ON
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f002 f99d 	bl	80039c2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168c:	f000 fb3e 	bl	8001d0c <HAL_Delay>
	LED1_OFF
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f002 f992 	bl	80039c2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f000 fb34 	bl	8001d0c <HAL_Delay>
	LED2_ON
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <teste_led+0x74>)
 80016ac:	f002 f989 	bl	80039c2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b4:	f000 fb2a 	bl	8001d0c <HAL_Delay>
	LED2_OFF
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <teste_led+0x74>)
 80016c0:	f002 f97f 	bl	80039c2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f000 fb21 	bl	8001d0c <HAL_Delay>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <codec_and_send_start_frame_rc>:
	}

	return ok;
}

bool codec_and_send_start_frame_rc(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af04      	add	r7, sp, #16

	bool ok = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//payload inicial tem 16 caracteres
	uint8_t buffer_payload[16] = { 0 };
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
//pega o numero randomico para enviar o index
	int bffInxStart = randomTaskNumber;
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <codec_and_send_start_frame_rc+0x18c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	623b      	str	r3, [r7, #32]
//cria o char index
	char StartIndex[3] = { 0 };
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <codec_and_send_start_frame_rc+0x190>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	81bb      	strh	r3, [r7, #12]
 80016fc:	2300      	movs	r3, #0
 80016fe:	73bb      	strb	r3, [r7, #14]
//transforma o numero randomico em char
	itoa(bffInxStart, StartIndex, 10);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	220a      	movs	r2, #10
 8001706:	4619      	mov	r1, r3
 8001708:	6a38      	ldr	r0, [r7, #32]
 800170a:	f00b feb5 	bl	800d478 <itoa>

//acerta o char do numero randomico por deslocamento de zeros
	if (bffInxStart <= 99 && bffInxStart > 9) {
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	2b63      	cmp	r3, #99	; 0x63
 8001712:	dc09      	bgt.n	8001728 <codec_and_send_start_frame_rc+0x54>
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	2b09      	cmp	r3, #9
 8001718:	dd06      	ble.n	8001728 <codec_and_send_start_frame_rc+0x54>

		StartIndex[2] = StartIndex[1];
 800171a:	7b7b      	ldrb	r3, [r7, #13]
 800171c:	73bb      	strb	r3, [r7, #14]
		StartIndex[1] = StartIndex[0];
 800171e:	7b3b      	ldrb	r3, [r7, #12]
 8001720:	737b      	strb	r3, [r7, #13]
		StartIndex[0] = 48;
 8001722:	2330      	movs	r3, #48	; 0x30
 8001724:	733b      	strb	r3, [r7, #12]
 8001726:	e008      	b.n	800173a <codec_and_send_start_frame_rc+0x66>
	} else if (bffInxStart <= 9) {
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	2b09      	cmp	r3, #9
 800172c:	dc05      	bgt.n	800173a <codec_and_send_start_frame_rc+0x66>
		StartIndex[2] = StartIndex[0];
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	73bb      	strb	r3, [r7, #14]
		StartIndex[1] = 48;
 8001732:	2330      	movs	r3, #48	; 0x30
 8001734:	737b      	strb	r3, [r7, #13]
		StartIndex[0] = 48;
 8001736:	2330      	movs	r3, #48	; 0x30
 8001738:	733b      	strb	r3, [r7, #12]
	}

//resgata o token atual em funcao do index
	actual_token = tokens[bffInxStart];
 800173a:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <codec_and_send_start_frame_rc+0x194>)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	4a4a      	ldr	r2, [pc, #296]	; (800186c <codec_and_send_start_frame_rc+0x198>)
 8001744:	6013      	str	r3, [r2, #0]
	APP_TPRINTF("Actual Token = %u\r\n", actual_token);
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <codec_and_send_start_frame_rc+0x198>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <codec_and_send_start_frame_rc+0x19c>)
 800174e:	2201      	movs	r2, #1
 8001750:	2100      	movs	r1, #0
 8001752:	2000      	movs	r0, #0
 8001754:	f00b fbd6 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	HAL_Delay(bffInxStart);
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fad6 	bl	8001d0c <HAL_Delay>
//cria um segundo index randomico para resgatar na proxima mensagem
	indexToken = randomTaskNumber;
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <codec_and_send_start_frame_rc+0x18c>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 8001768:	601a      	str	r2, [r3, #0]
//cria o char do segundo index
	char CommandIndex[3] = { 0 };
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <codec_and_send_start_frame_rc+0x190>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	813b      	strh	r3, [r7, #8]
 8001770:	2300      	movs	r3, #0
 8001772:	72bb      	strb	r3, [r7, #10]
//transmorma em char o segundo numero randomico
	itoa(indexToken, CommandIndex, 10);
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	220a      	movs	r2, #10
 800177e:	4618      	mov	r0, r3
 8001780:	f00b fe7a 	bl	800d478 <itoa>
//acerto os zeros do segundo numero randomico
	if (indexToken <= 99 && indexToken > 9) {
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b63      	cmp	r3, #99	; 0x63
 800178a:	dc0a      	bgt.n	80017a2 <codec_and_send_start_frame_rc+0xce>
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	dd06      	ble.n	80017a2 <codec_and_send_start_frame_rc+0xce>

		CommandIndex[2] = CommandIndex[1];
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	72bb      	strb	r3, [r7, #10]
		CommandIndex[1] = CommandIndex[0];
 8001798:	7a3b      	ldrb	r3, [r7, #8]
 800179a:	727b      	strb	r3, [r7, #9]
		CommandIndex[0] = 48;
 800179c:	2330      	movs	r3, #48	; 0x30
 800179e:	723b      	strb	r3, [r7, #8]
 80017a0:	e014      	b.n	80017cc <codec_and_send_start_frame_rc+0xf8>
	} else if (indexToken <= 9) {
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	dc06      	bgt.n	80017b8 <codec_and_send_start_frame_rc+0xe4>
		CommandIndex[2] = CommandIndex[0];
 80017aa:	7a3b      	ldrb	r3, [r7, #8]
 80017ac:	72bb      	strb	r3, [r7, #10]
		CommandIndex[1] = 48;
 80017ae:	2330      	movs	r3, #48	; 0x30
 80017b0:	727b      	strb	r3, [r7, #9]
		CommandIndex[0] = 48;
 80017b2:	2330      	movs	r3, #48	; 0x30
 80017b4:	723b      	strb	r3, [r7, #8]
 80017b6:	e009      	b.n	80017cc <codec_and_send_start_frame_rc+0xf8>
	} else if (indexToken == 0){
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <codec_and_send_start_frame_rc+0xf8>
		CommandIndex[2] = 48;
 80017c0:	2330      	movs	r3, #48	; 0x30
 80017c2:	72bb      	strb	r3, [r7, #10]
		CommandIndex[1] = 48;
 80017c4:	2330      	movs	r3, #48	; 0x30
 80017c6:	727b      	strb	r3, [r7, #9]
		CommandIndex[0] = 48;
 80017c8:	2330      	movs	r3, #48	; 0x30
 80017ca:	723b      	strb	r3, [r7, #8]
	}
	char tokenInChar[8]={0};
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
	sprintf(tokenInChar,"%lu",actual_token);
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <codec_and_send_start_frame_rc+0x198>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	463b      	mov	r3, r7
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <codec_and_send_start_frame_rc+0x1a4>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f00c fccf 	bl	800e180 <siprintf>
//pega e armazena o proximo numero token
	next_token = tokens[indexToken];
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a20      	ldr	r2, [pc, #128]	; (8001868 <codec_and_send_start_frame_rc+0x194>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	4a23      	ldr	r2, [pc, #140]	; (800187c <codec_and_send_start_frame_rc+0x1a8>)
 80017ee:	6013      	str	r3, [r2, #0]

	APP_TPRINTF("Next Token[%u] = %u\r\n ", indexToken, next_token);
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <codec_and_send_start_frame_rc+0x1a0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <codec_and_send_start_frame_rc+0x1a8>)
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	9201      	str	r2, [sp, #4]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <codec_and_send_start_frame_rc+0x1ac>)
 80017fe:	2201      	movs	r2, #1
 8001800:	2100      	movs	r1, #0
 8001802:	2000      	movs	r0, #0
 8001804:	f00b fb7e 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

//monta o novo payload
	sprintf((char*)buffer_payload, "%i%i%s%s%s", numeroCadeado, numero_vv, StartIndex,
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <codec_and_send_start_frame_rc+0x1b0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <codec_and_send_start_frame_rc+0x1b4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	f107 0010 	add.w	r0, r7, #16
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	463b      	mov	r3, r7
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	460b      	mov	r3, r1
 800182a:	4918      	ldr	r1, [pc, #96]	; (800188c <codec_and_send_start_frame_rc+0x1b8>)
 800182c:	f00c fca8 	bl	800e180 <siprintf>
			tokenInChar, CommandIndex);

	__NOP();
 8001830:	bf00      	nop
	APP_TPRINTF("Payload  to send= %s\r\n", buffer_payload);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <codec_and_send_start_frame_rc+0x1bc>)
 800183a:	2201      	movs	r2, #1
 800183c:	2100      	movs	r1, #0
 800183e:	2000      	movs	r0, #0
 8001840:	f00b fb60 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	write_master_string(buffer_payload);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4618      	mov	r0, r3
 800184a:	f00a f915 	bl	800ba78 <write_master_string>
//envia o novo payload
	MX_SubGHz_Phy_Process();
 800184e:	f00a f82e 	bl	800b8ae <MX_SubGHz_Phy_Process>
	//ok = send_start_frame(buffer_payload);
	return ok;
 8001852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 8001856:	4618      	mov	r0, r3
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200011c0 	.word	0x200011c0
 8001864:	08011e38 	.word	0x08011e38
 8001868:	20000004 	.word	0x20000004
 800186c:	200011b4 	.word	0x200011b4
 8001870:	08011de4 	.word	0x08011de4
 8001874:	200011bc 	.word	0x200011bc
 8001878:	08011df8 	.word	0x08011df8
 800187c:	200011b8 	.word	0x200011b8
 8001880:	08011dfc 	.word	0x08011dfc
 8001884:	20000000 	.word	0x20000000
 8001888:	200011b1 	.word	0x200011b1
 800188c:	08011e14 	.word	0x08011e14
 8001890:	08011e20 	.word	0x08011e20

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>

0800189e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
	...

080018f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	222c      	movs	r2, #44	; 0x2c
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00b fdcb 	bl	800d498 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_RTC_Init+0x9c>)
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <MX_RTC_Init+0xa0>)
 8001906:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_RTC_Init+0x9c>)
 800190a:	221f      	movs	r2, #31
 800190c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_RTC_Init+0x9c>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_RTC_Init+0x9c>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_RTC_Init+0x9c>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_RTC_Init+0x9c>)
 8001922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001926:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_RTC_Init+0x9c>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_RTC_Init+0x9c>)
 8001930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001936:	4815      	ldr	r0, [pc, #84]	; (800198c <MX_RTC_Init+0x9c>)
 8001938:	f003 fc20 	bl	800517c <HAL_RTC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001942:	f7ff ffa7 	bl	8001894 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001946:	4811      	ldr	r0, [pc, #68]	; (800198c <MX_RTC_Init+0x9c>)
 8001948:	f003 ff0e 	bl	8005768 <HAL_RTCEx_SetSSRU_IT>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001952:	f7ff ff9f 	bl	8001894 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001962:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001966:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_RTC_Init+0x9c>)
 8001976:	f003 fc7b 	bl	8005270 <HAL_RTC_SetAlarm_IT>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001980:	f7ff ff88 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200011c4 	.word	0x200011c4
 8001990:	40002800 	.word	0x40002800

08001994 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	2238      	movs	r2, #56	; 0x38
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00b fd77 	bl	800d498 <memset>
  if(rtcHandle->Instance==RTC)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_RTC_MspInit+0x74>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d125      	bne.n	8001a00 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fabf 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80019d0:	f7ff ff60 	bl	8001894 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019d4:	f7ff ff63 	bl	800189e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019dc:	f7ff ff6f 	bl	80018be <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2002      	movs	r0, #2
 80019e6:	f001 f986 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f001 f99d 	bl	8002d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	202a      	movs	r0, #42	; 0x2a
 80019f6:	f001 f97e 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019fa:	202a      	movs	r0, #42	; 0x2a
 80019fc:	f001 f995 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	3740      	adds	r7, #64	; 0x40
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40002800 	.word	0x40002800

08001a0c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	58000400 	.word	0x58000400

08001a24 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001a40:	f001 f852 	bl	8002ae8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001a44:	f7ff ffe2 	bl	8001a0c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f002 f885 	bl	8003b58 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001a56:	f001 f855 	bl	8002b04 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001a5a:	f000 fed5 	bl	8002808 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001a66:	f001 f83f 	bl	8002ae8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f001 ffef 	bl	8003a50 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001a7a:	f001 f843 	bl	8002b04 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <UsageFault_Handler+0x4>

08001aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001ae2:	f003 fe7d 	bl	80057e0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200011c4 	.word	0x200011c4

08001af0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA1_Channel1_IRQHandler+0x10>)
 8001af6:	f001 fbaf 	bl	8003258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200012a8 	.word	0x200012a8

08001b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART1_IRQHandler+0x10>)
 8001b0a:	f004 fcc9 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20001218 	.word	0x20001218

08001b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b20:	f001 ff66 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <RTC_Alarm_IRQHandler+0x10>)
 8001b2e:	f003 fd07 	bl	8005540 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200011c4 	.word	0x200011c4

08001b3c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001b42:	f004 f9b5 	bl	8005eb0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200011fc 	.word	0x200011fc

08001b50 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_SUBGHZ_Init+0x20>)
 8001b86:	2208      	movs	r2, #8
 8001b88:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_SUBGHZ_Init+0x20>)
 8001b8c:	f003 ff14 	bl	80059b8 <HAL_SUBGHZ_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001b96:	f7ff fe7d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200011fc 	.word	0x200011fc

08001ba4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff ffcf 	bl	8001b50 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2032      	movs	r0, #50	; 0x32
 8001bb8:	f001 f89d 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001bbc:	2032      	movs	r0, #50	; 0x32
 8001bbe:	f001 f8b4 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ffe8 	bl	8001bca <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001bfa:	f00a fed7 	bl	800c9ac <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <SystemApp_Init+0x40>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001c04:	f000 f8ba 	bl	8001d7c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001c08:	f00b f960 	bl	800cecc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <SystemApp_Init+0x44>)
 8001c0e:	f00b f9f9 	bl	800d004 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001c12:	2002      	movs	r0, #2
 8001c14:	f00b fa04 	bl	800d020 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001c18:	f00a f97c 	bl	800bf14 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f00a f9b8 	bl	800bf94 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001c24:	2101      	movs	r1, #1
 8001c26:	2002      	movs	r0, #2
 8001c28:	f00a f984 	bl	800bf34 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20001208 	.word	0x20001208
 8001c34:	08001c45 	.word	0x08001c45

08001c38 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001c3c:	f00a f9da 	bl	800bff4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4618      	mov	r0, r3
 8001c54:	f00a fa78 	bl	800c148 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c5e:	9200      	str	r2, [sp, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <TimestampNow+0x3c>)
 8001c62:	2110      	movs	r1, #16
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f81d 	bl	8001ca4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fa88 	bl	8000180 <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	08011ee4 	.word	0x08011ee4

08001c84 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f00a f952 	bl	800bf34 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2004      	movs	r0, #4
 8001c9c:	f00a f94a 	bl	800bf34 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ca4:	b40c      	push	{r2, r3}
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f00a fb8f 	bl	800c3e0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ccc:	b002      	add	sp, #8
 8001cce:	4770      	bx	lr

08001cd0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_GetTick+0x24>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cf6:	f000 fa23 	bl	8002140 <TIMER_IF_GetTimerValue>
 8001cfa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20001208 	.word	0x20001208

08001d0c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fa99 	bl	800224e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LL_AHB2_GRP1_EnableClock>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d48:	68fb      	ldr	r3, [r7, #12]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <LL_EXTI_EnableIT_32_63+0x24>)
 8001d5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d62:	4905      	ldr	r1, [pc, #20]	; (8001d78 <LL_EXTI_EnableIT_32_63+0x24>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	58000800 	.word	0x58000800

08001d7c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001d82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d86:	f7ff ffe5 	bl	8001d54 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001d8a:	f000 fec9 	bl	8002b20 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001d8e:	f000 fecd 	bl	8002b2c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001d92:	f000 fed1 	bl	8002b38 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff ffb7 	bl	8001d24 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff ffb4 	bl	8001d24 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff ffb1 	bl	8001d24 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff ffae 	bl	8001d24 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f001 fbb0 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4815      	ldr	r0, [pc, #84]	; (8001e38 <DBG_Init+0xbc>)
 8001de2:	f001 fba9 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001de6:	2310      	movs	r3, #16
 8001de8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4812      	ldr	r0, [pc, #72]	; (8001e38 <DBG_Init+0xbc>)
 8001df0:	f001 fba2 	bl	8003538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <DBG_Init+0xbc>)
 8001e00:	f001 fb9a 	bl	8003538 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0c:	f001 fdd9 	bl	80039c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2108      	movs	r1, #8
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <DBG_Init+0xbc>)
 8001e16:	f001 fdd4 	bl	80039c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <DBG_Init+0xbc>)
 8001e20:	f001 fdcf 	bl	80039c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <DBG_Init+0xbc>)
 8001e2c:	f001 fdc9 	bl	80039c2 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	48000400 	.word	0x48000400

08001e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <_kill>:

int _kill(int pid, int sig)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e54:	f00b face 	bl	800d3f4 <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2216      	movs	r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
	return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_exit>:

void _exit (int status)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffe7 	bl	8001e4a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e7c:	e7fe      	b.n	8001e7c <_exit+0x12>

08001e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e00a      	b.n	8001ea6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e90:	f3af 8000 	nop.w
 8001e94:	4601      	mov	r1, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	b2ca      	uxtb	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dbf0      	blt.n	8001e90 <_read+0x12>
	}

return len;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e009      	b.n	8001ede <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	60ba      	str	r2, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbf1      	blt.n	8001eca <_write+0x12>
	}
	return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_close>:

int _close(int file)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f16:	605a      	str	r2, [r3, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <_isatty>:

int _isatty(int file)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f00b fa38 	bl	800d3f4 <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20010000 	.word	0x20010000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	2000120c 	.word	0x2000120c
 8001fb8:	20001ab0 	.word	0x20001ab0

08001fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <TIMER_IF_Init+0x5c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <TIMER_IF_Init+0x60>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002000:	f7ff fc76 	bl	80018f0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002004:	f000 f856 	bl	80020b4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <TIMER_IF_Init+0x60>)
 800200e:	f003 fa3b 	bl	8005488 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <TIMER_IF_Init+0x60>)
 8002014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002018:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800201a:	4809      	ldr	r0, [pc, #36]	; (8002040 <TIMER_IF_Init+0x60>)
 800201c:	f003 fb72 	bl	8005704 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f9d3 	bl	80023cc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002026:	f000 f85f 	bl	80020e8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <TIMER_IF_Init+0x5c>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002030:	79fb      	ldrb	r3, [r7, #7]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20001210 	.word	0x20001210
 8002040:	200011c4 	.word	0x200011c4

08002044 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	; 0x38
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	222c      	movs	r2, #44	; 0x2c
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f00b fa1c 	bl	800d498 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002060:	f000 f828 	bl	80020b4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <TIMER_IF_StartTimer+0x68>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	43db      	mvns	r3, r3
 8002076:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800207c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002080:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	2201      	movs	r2, #1
 800208e:	4619      	mov	r1, r3
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <TIMER_IF_StartTimer+0x6c>)
 8002092:	f003 f8ed 	bl	8005270 <HAL_RTC_SetAlarm_IT>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800209c:	f7ff fbfa 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80020a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20001214 	.word	0x20001214
 80020b0:	200011c4 	.word	0x200011c4

080020b4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <TIMER_IF_StopTimer+0x2c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80020c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c8:	4806      	ldr	r0, [pc, #24]	; (80020e4 <TIMER_IF_StopTimer+0x30>)
 80020ca:	f003 f9dd 	bl	8005488 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <TIMER_IF_StopTimer+0x30>)
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40002800 	.word	0x40002800
 80020e4:	200011c4 	.word	0x200011c4

080020e8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80020ec:	f000 f98e 	bl	800240c <GetTimerTicks>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a03      	ldr	r2, [pc, #12]	; (8002100 <TIMER_IF_SetTimerContext+0x18>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80020f6:	4b02      	ldr	r3, [pc, #8]	; (8002100 <TIMER_IF_SetTimerContext+0x18>)
 80020f8:	681b      	ldr	r3, [r3, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20001214 	.word	0x20001214

08002104 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <TIMER_IF_GetTimerContext+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20001214 	.word	0x20001214

08002118 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002122:	f000 f973 	bl	800240c <GetTimerTicks>
 8002126:	4602      	mov	r2, r0
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20001214 	.word	0x20001214

08002140 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <TIMER_IF_GetTimerValue+0x24>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002152:	f000 f95b 	bl	800240c <GetTimerTicks>
 8002156:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20001210 	.word	0x20001210

08002168 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002172:	2303      	movs	r3, #3
 8002174:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002182:	b5b0      	push	{r4, r5, r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800218a:	2100      	movs	r1, #0
 800218c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	2000      	movs	r0, #0
 8002192:	460a      	mov	r2, r1
 8002194:	4603      	mov	r3, r0
 8002196:	0d95      	lsrs	r5, r2, #22
 8002198:	0294      	lsls	r4, r2, #10
 800219a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe fd47 	bl	8000c38 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}

080021bc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80021bc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80021c6:	2100      	movs	r1, #0
 80021c8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	2000      	movs	r0, #0
 80021ce:	460c      	mov	r4, r1
 80021d0:	4605      	mov	r5, r0
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f04f 0a00 	mov.w	sl, #0
 80021da:	f04f 0b00 	mov.w	fp, #0
 80021de:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80021e2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80021e6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80021ea:	4650      	mov	r0, sl
 80021ec:	4659      	mov	r1, fp
 80021ee:	1b02      	subs	r2, r0, r4
 80021f0:	eb61 0305 	sbc.w	r3, r1, r5
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	0099      	lsls	r1, r3, #2
 80021fe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002202:	0090      	lsls	r0, r2, #2
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	eb12 0804 	adds.w	r8, r2, r4
 800220c:	eb43 0905 	adc.w	r9, r3, r5
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800221c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002220:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002224:	4690      	mov	r8, r2
 8002226:	4699      	mov	r9, r3
 8002228:	4640      	mov	r0, r8
 800222a:	4649      	mov	r1, r9
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	0a82      	lsrs	r2, r0, #10
 8002236:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800223a:	0a8b      	lsrs	r3, r1, #10
 800223c:	4613      	mov	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002240:	68fb      	ldr	r3, [r7, #12]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800224c:	4770      	bx	lr

0800224e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff93 	bl	8002182 <TIMER_IF_Convert_ms2Tick>
 800225c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800225e:	f000 f8d5 	bl	800240c <GetTimerTicks>
 8002262:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002264:	e000      	b.n	8002268 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002266:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002268:	f000 f8d0 	bl	800240c <GetTimerTicks>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f6      	bhi.n	8002266 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800228a:	f00a fcdd 	bl	800cc48 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800229e:	f000 f8a5 	bl	80023ec <TIMER_IF_BkUp_Read_MSBticks>
 80022a2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f88f 	bl	80023cc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80022b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80022c4:	f000 f8a2 	bl	800240c <GetTimerTicks>
 80022c8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80022ca:	f000 f88f 	bl	80023ec <TIMER_IF_BkUp_Read_MSBticks>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2200      	movs	r2, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	000b      	movs	r3, r1
 80022e4:	2200      	movs	r2, #0
 80022e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022e8:	2000      	movs	r0, #0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4605      	mov	r5, r0
 80022ee:	eb12 0804 	adds.w	r8, r2, r4
 80022f2:	eb43 0905 	adc.w	r9, r3, r5
 80022f6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80022fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	0a82      	lsrs	r2, r0, #10
 8002308:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800230c:	0a8b      	lsrs	r3, r1, #10
 800230e:	4613      	mov	r3, r2
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2200      	movs	r2, #0
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002320:	f04f 0b00 	mov.w	fp, #0
 8002324:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff46 	bl	80021bc <TIMER_IF_Convert_Tick2ms>
 8002330:	4603      	mov	r3, r0
 8002332:	b29a      	uxth	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800233a:	4618      	mov	r0, r3
 800233c:	3730      	adds	r7, #48	; 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002344 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	2100      	movs	r1, #0
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002352:	f003 fa69 	bl	8005828 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200011c4 	.word	0x200011c4

08002364 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	2101      	movs	r1, #1
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002372:	f003 fa59 	bl	8005828 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200011c4 	.word	0x200011c4

08002384 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800238e:	2100      	movs	r1, #0
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002392:	f003 fa61 	bl	8005858 <HAL_RTCEx_BKUPRead>
 8002396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200011c4 	.word	0x200011c4

080023a8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80023b2:	2101      	movs	r1, #1
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80023b6:	f003 fa4f 	bl	8005858 <HAL_RTCEx_BKUPRead>
 80023ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200011c4 	.word	0x200011c4

080023cc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	2102      	movs	r1, #2
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80023da:	f003 fa25 	bl	8005828 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200011c4 	.word	0x200011c4

080023ec <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80023f2:	2102      	movs	r1, #2
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80023f6:	f003 fa2f 	bl	8005858 <HAL_RTCEx_BKUPRead>
 80023fa:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80023fc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200011c4 	.word	0x200011c4

0800240c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002412:	480b      	ldr	r0, [pc, #44]	; (8002440 <GetTimerTicks+0x34>)
 8002414:	f7ff fdd8 	bl	8001fc8 <LL_RTC_TIME_GetSubSecond>
 8002418:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800241a:	e003      	b.n	8002424 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <GetTimerTicks+0x34>)
 800241e:	f7ff fdd3 	bl	8001fc8 <LL_RTC_TIME_GetSubSecond>
 8002422:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <GetTimerTicks+0x34>)
 8002426:	f7ff fdcf 	bl	8001fc8 <LL_RTC_TIME_GetSubSecond>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4293      	cmp	r3, r2
 8002430:	d1f4      	bne.n	800241c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40002800 	.word	0x40002800

08002444 <LL_AHB2_GRP1_EnableClock>:
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002468:	68fb      	ldr	r3, [r7, #12]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <LL_APB2_GRP1_EnableClock>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <LL_APB2_GRP1_DisableClock>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ba:	4013      	ands	r3, r2
 80024bc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024ce:	4a23      	ldr	r2, [pc, #140]	; (800255c <MX_USART1_UART_Init+0x94>)
 80024d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024ee:	220c      	movs	r2, #12
 80024f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <MX_USART1_UART_Init+0x90>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_USART1_UART_Init+0x90>)
 800250c:	2200      	movs	r2, #0
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002510:	4811      	ldr	r0, [pc, #68]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002512:	f003 fe8c 	bl	800622e <HAL_UART_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800251c:	f7ff f9ba 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002520:	2100      	movs	r1, #0
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002524:	f005 ff03 	bl	800832e <HAL_UARTEx_SetTxFifoThreshold>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800252e:	f7ff f9b1 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002532:	2100      	movs	r1, #0
 8002534:	4808      	ldr	r0, [pc, #32]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002536:	f005 ff38 	bl	80083aa <HAL_UARTEx_SetRxFifoThreshold>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002540:	f7ff f9a8 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_USART1_UART_Init+0x90>)
 8002546:	f005 feb7 	bl	80082b8 <HAL_UARTEx_EnableFifoMode>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002550:	f7ff f9a0 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20001218 	.word	0x20001218
 800255c:	40013800 	.word	0x40013800

08002560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b096      	sub	sp, #88	; 0x58
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2238      	movs	r2, #56	; 0x38
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f00a ff89 	bl	800d498 <memset>
  if(uartHandle->Instance==USART1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <HAL_UART_MspInit+0xe8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d156      	bne.n	800263e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002590:	2301      	movs	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002594:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002598:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fcd2 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025aa:	f7ff f973 	bl	8001894 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b2:	f7ff ff5f 	bl	8002474 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7ff ff44 	bl	8002444 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025cc:	2307      	movs	r3, #7
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025d4:	4619      	mov	r1, r3
 80025d6:	481d      	ldr	r0, [pc, #116]	; (800264c <HAL_UART_MspInit+0xec>)
 80025d8:	f000 ffae 	bl	8003538 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_UART_MspInit+0xf4>)
 80025e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025e4:	2212      	movs	r2, #18
 80025e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025ea:	2210      	movs	r2, #16
 80025ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b16      	ldr	r3, [pc, #88]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_UART_MspInit+0xf0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_UART_MspInit+0xf0>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_UART_MspInit+0xf0>)
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_UART_MspInit+0xf0>)
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002612:	480f      	ldr	r0, [pc, #60]	; (8002650 <HAL_UART_MspInit+0xf0>)
 8002614:	f000 fba6 	bl	8002d64 <HAL_DMA_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800261e:	f7ff f939 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_UART_MspInit+0xf0>)
 8002626:	679a      	str	r2, [r3, #120]	; 0x78
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_UART_MspInit+0xf0>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2102      	movs	r1, #2
 8002632:	2024      	movs	r0, #36	; 0x24
 8002634:	f000 fb5f 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002638:	2024      	movs	r0, #36	; 0x24
 800263a:	f000 fb76 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800263e:	bf00      	nop
 8002640:	3758      	adds	r7, #88	; 0x58
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40013800 	.word	0x40013800
 800264c:	48000400 	.word	0x48000400
 8002650:	200012a8 	.word	0x200012a8
 8002654:	40020008 	.word	0x40020008

08002658 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_UART_MspDeInit+0x3c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10f      	bne.n	800268a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800266a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266e:	f7ff ff19 	bl	80024a4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002672:	21c0      	movs	r1, #192	; 0xc0
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <HAL_UART_MspDeInit+0x40>)
 8002676:	f001 f8bf 	bl	80037f8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fc18 	bl	8002eb4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002684:	2024      	movs	r0, #36	; 0x24
 8002686:	f000 fb5e 	bl	8002d46 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40013800 	.word	0x40013800
 8002698:	48000400 	.word	0x48000400

0800269c <LL_APB2_GRP1_ForceReset>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_APB2_GRP1_ReleaseReset>:
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d4:	4013      	ands	r3, r2
 80026d6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <LL_EXTI_EnableIT_0_31>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <LL_EXTI_EnableIT_0_31+0x24>)
 80026ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026f2:	4905      	ldr	r1, [pc, #20]	; (8002708 <LL_EXTI_EnableIT_0_31+0x24>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	58000800 	.word	0x58000800

0800270c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <vcom_Init+0x28>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800271a:	f7fe fc5f 	bl	8000fdc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800271e:	f7ff fed3 	bl	80024c8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002722:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002726:	f7ff ffdd 	bl	80026e4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800272a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000130c 	.word	0x2000130c

08002738 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800273c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002740:	f7ff ffac 	bl	800269c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002744:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002748:	f7ff ffb9 	bl	80026be <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <vcom_DeInit+0x28>)
 800274e:	f7ff ff83 	bl	8002658 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002752:	200f      	movs	r0, #15
 8002754:	f000 faf7 	bl	8002d46 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002758:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20001218 	.word	0x20001218

08002764 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	461a      	mov	r2, r3
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <vcom_Trace_DMA+0x24>)
 8002778:	f003 fe00 	bl	800637c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800277c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20001218 	.word	0x20001218

0800278c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <vcom_ReceiveInit+0x70>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800279a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800279e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027a8:	4815      	ldr	r0, [pc, #84]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027aa:	f005 fcf8 	bl	800819e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80027ae:	bf00      	nop
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d0f7      	beq.n	80027b0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80027c0:	bf00      	nop
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d0:	d1f7      	bne.n	80027c2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027e0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027e4:	f005 fd36 	bl	8008254 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80027e8:	2201      	movs	r2, #1
 80027ea:	4906      	ldr	r1, [pc, #24]	; (8002804 <vcom_ReceiveInit+0x78>)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <vcom_ReceiveInit+0x74>)
 80027ee:	f003 fd6f 	bl	80062d0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80027f2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20001310 	.word	0x20001310
 8002800:	20001218 	.word	0x20001218
 8002804:	20001308 	.word	0x20001308

08002808 <vcom_Resume>:

void vcom_Resume(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <vcom_Resume+0x28>)
 800280e:	f003 fd0e 	bl	800622e <HAL_UART_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <vcom_Resume+0x14>
  {
    Error_Handler();
 8002818:	f7ff f83c 	bl	8001894 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <vcom_Resume+0x2c>)
 800281e:	f000 faa1 	bl	8002d64 <HAL_DMA_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <vcom_Resume+0x24>
  {
    Error_Handler();
 8002828:	f7ff f834 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20001218 	.word	0x20001218
 8002834:	200012a8 	.word	0x200012a8

08002838 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_UART_TxCpltCallback+0x24>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d103      	bne.n	8002852 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_UART_TxCpltCallback+0x28>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2000      	movs	r0, #0
 8002850:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40013800 	.word	0x40013800
 8002860:	2000130c 	.word	0x2000130c

08002864 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_UART_RxCpltCallback+0x44>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_UART_RxCpltCallback+0x48>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_UART_RxCpltCallback+0x30>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_UART_RxCpltCallback+0x48>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	2101      	movs	r1, #1
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <HAL_UART_RxCpltCallback+0x4c>)
 8002892:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002894:	2201      	movs	r2, #1
 8002896:	4906      	ldr	r1, [pc, #24]	; (80028b0 <HAL_UART_RxCpltCallback+0x4c>)
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f003 fd19 	bl	80062d0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40013800 	.word	0x40013800
 80028ac:	20001310 	.word	0x20001310
 80028b0:	20001308 	.word	0x20001308

080028b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028b8:	f7ff fb80 	bl	8001fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80028be:	490d      	ldr	r1, [pc, #52]	; (80028f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <LoopForever+0xe>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <LoopForever+0x16>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028e2:	f00a fd8d 	bl	800d400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028e6:	f7fe fc83 	bl	80011f0 <main>

080028ea <LoopForever>:

LoopForever:
    b LoopForever
 80028ea:	e7fe      	b.n	80028ea <LoopForever>
  ldr   r0, =_estack
 80028ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	20001194 	.word	0x20001194
  ldr r2, =_sidata
 80028f8:	0801291c 	.word	0x0801291c
  ldr r2, =_sbss
 80028fc:	20001194 	.word	0x20001194
  ldr r4, =_ebss
 8002900:	20001aac 	.word	0x20001aac

08002904 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC_IRQHandler>

08002906 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800291a:	2310      	movs	r3, #16
 800291c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002932:	f000 fe01 	bl	8003538 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002936:	2320      	movs	r3, #32
 8002938:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002942:	f000 fdf9 	bl	8003538 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002946:	2200      	movs	r2, #0
 8002948:	2120      	movs	r1, #32
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f001 f838 	bl	80039c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002952:	2200      	movs	r2, #0
 8002954:	2110      	movs	r1, #16
 8002956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800295a:	f001 f832 	bl	80039c2 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d83f      	bhi.n	80029f8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	080029ab 	.word	0x080029ab
 8002988:	080029c5 	.word	0x080029c5
 800298c:	080029df 	.word	0x080029df
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	2110      	movs	r1, #16
 8002994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002998:	f001 f813 	bl	80039c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	2120      	movs	r1, #32
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a4:	f001 f80d 	bl	80039c2 <HAL_GPIO_WritePin>
      break;      
 80029a8:	e027      	b.n	80029fa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029aa:	2201      	movs	r2, #1
 80029ac:	2110      	movs	r1, #16
 80029ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b2:	f001 f806 	bl	80039c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029b6:	2200      	movs	r2, #0
 80029b8:	2120      	movs	r1, #32
 80029ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029be:	f001 f800 	bl	80039c2 <HAL_GPIO_WritePin>
      break;
 80029c2:	e01a      	b.n	80029fa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029c4:	2201      	movs	r2, #1
 80029c6:	2110      	movs	r1, #16
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f000 fff9 	bl	80039c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029d0:	2201      	movs	r2, #1
 80029d2:	2120      	movs	r1, #32
 80029d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d8:	f000 fff3 	bl	80039c2 <HAL_GPIO_WritePin>
      break;
 80029dc:	e00d      	b.n	80029fa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029de:	2200      	movs	r2, #0
 80029e0:	2110      	movs	r1, #16
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f000 ffec 	bl	80039c2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029ea:	2201      	movs	r2, #1
 80029ec:	2120      	movs	r1, #32
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f2:	f000 ffe6 	bl	80039c2 <HAL_GPIO_WritePin>
      break;
 80029f6:	e000      	b.n	80029fa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80029f8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a08:	2302      	movs	r3, #2
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a3e:	230f      	movs	r3, #15
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e001      	b.n	8002a48 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a44:	2316      	movs	r3, #22
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6053      	str	r3, [r2, #4]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	e0042000 	.word	0xe0042000

08002a70 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	6053      	str	r3, [r2, #4]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	e0042000 	.word	0xe0042000

08002a8c <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6053      	str	r3, [r2, #4]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	e0042000 	.word	0xe0042000

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f000 f914 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ab8:	f002 f868 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_Init+0x3c>)
 8002ac0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ac2:	200f      	movs	r0, #15
 8002ac4:	f7ff f904 	bl	8001cd0 <HAL_InitTick>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	71fb      	strb	r3, [r7, #7]
 8002ad2:	e001      	b.n	8002ad8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ad4:	f7fe ffd5 	bl	8001a82 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000fa4 	.word	0x20000fa4

08002ae8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_SuspendTick+0x18>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_SuspendTick+0x18>)
 8002af2:	f023 0302 	bic.w	r3, r3, #2
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_ResumeTick+0x18>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a03      	ldr	r2, [pc, #12]	; (8002b1c <HAL_ResumeTick+0x18>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002b24:	f7ff ff96 	bl	8002a54 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002b30:	f7ff ff9e 	bl	8002a70 <LL_DBGMCU_EnableDBGStopMode>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002b3c:	f7ff ffa6 	bl	8002a8c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4906      	ldr	r1, [pc, #24]	; (8002bdc <__NVIC_EnableIRQ+0x34>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db12      	blt.n	8002c18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	490a      	ldr	r1, [pc, #40]	; (8002c24 <__NVIC_DisableIRQ+0x44>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	3320      	adds	r3, #32
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c0c:	f3bf 8f4f 	dsb	sy
}
 8002c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c12:	f3bf 8f6f 	isb	sy
}
 8002c16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff2b 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d04:	f7ff ff42 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ffb4 	bl	8002c7c <NVIC_EncodePriority>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff83 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff35 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff43 	bl	8002be0 <__NVIC_DisableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e08e      	b.n	8002e94 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_DMA_Init+0x138>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d80f      	bhi.n	8002da2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_DMA_Init+0x13c>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <HAL_DMA_Init+0x140>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_DMA_Init+0x144>)
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002da0:	e00e      	b.n	8002dc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_DMA_Init+0x148>)
 8002daa:	4413      	add	r3, r2
 8002dac:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <HAL_DMA_Init+0x140>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_DMA_Init+0x14c>)
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb24 	bl	8003460 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e20:	d102      	bne.n	8002e28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <HAL_DMA_Init+0x106>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d80c      	bhi.n	8002e6a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fb4d 	bl	80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e008      	b.n	8002e7c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40020407 	.word	0x40020407
 8002ea0:	bffdfff8 	.word	0xbffdfff8
 8002ea4:	cccccccd 	.word	0xcccccccd
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	bffdfbf8 	.word	0xbffdfbf8
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07b      	b.n	8002fbe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_DMA_DeInit+0x114>)
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d80f      	bhi.n	8002f02 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_DMA_DeInit+0x118>)
 8002eea:	4413      	add	r3, r2
 8002eec:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <HAL_DMA_DeInit+0x11c>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	009a      	lsls	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <HAL_DMA_DeInit+0x120>)
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
 8002f00:	e00e      	b.n	8002f20 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_DMA_DeInit+0x124>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_DMA_DeInit+0x11c>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <HAL_DMA_DeInit+0x128>)
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f003 021c 	and.w	r2, r3, #28
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fa8f 	bl	8003460 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f52:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <HAL_DMA_DeInit+0xc8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d80b      	bhi.n	8002f7c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fac3 	bl	80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40020407 	.word	0x40020407
 8002fcc:	bffdfff8 	.word	0xbffdfff8
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	bffdfbf8 	.word	0xbffdfbf8
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Start_IT+0x20>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e069      	b.n	80030d4 <HAL_DMA_Start_IT+0xf4>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d155      	bne.n	80030c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f9d3 	bl	80033e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 020e 	orr.w	r2, r2, #14
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00f      	b.n	8003078 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0204 	bic.w	r2, r2, #4
 8003066:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 020a 	orr.w	r2, r2, #10
 8003076:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e008      	b.n	80030d2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e04f      	b.n	800318e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d008      	beq.n	800310c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e040      	b.n	800318e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 020e 	bic.w	r2, r2, #14
 800311a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f003 021c 	and.w	r2, r3, #28
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003158:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800317a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d005      	beq.n	80031bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e047      	b.n	800324c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020e 	bic.w	r2, r2, #14
 80031ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f003 021c 	and.w	r2, r3, #28
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003208:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003220:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800322a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
    }
  }
  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	f003 031c 	and.w	r3, r3, #28
 8003278:	2204      	movs	r2, #4
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d027      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x7c>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d022      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f003 021c 	and.w	r2, r3, #28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2104      	movs	r1, #4
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8081 	beq.w	80033cc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80032d2:	e07b      	b.n	80033cc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 031c 	and.w	r3, r3, #28
 80032dc:	2202      	movs	r2, #2
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03d      	beq.n	8003364 <HAL_DMA_IRQHandler+0x10c>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d038      	beq.n	8003364 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 020a 	bic.w	r2, r2, #10
 800330e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_DMA_IRQHandler+0x180>)
 8003320:	429a      	cmp	r2, r3
 8003322:	d909      	bls.n	8003338 <HAL_DMA_IRQHandler+0xe0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f003 031c 	and.w	r3, r3, #28
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_DMA_IRQHandler+0x184>)
 800332e:	2102      	movs	r1, #2
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	6053      	str	r3, [r2, #4]
 8003336:	e008      	b.n	800334a <HAL_DMA_IRQHandler+0xf2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f003 031c 	and.w	r3, r3, #28
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <HAL_DMA_IRQHandler+0x188>)
 8003342:	2102      	movs	r1, #2
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d038      	beq.n	80033cc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003362:	e033      	b.n	80033cc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f003 031c 	and.w	r3, r3, #28
 800336c:	2208      	movs	r2, #8
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x176>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d025      	beq.n	80033ce <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 020e 	bic.w	r2, r2, #14
 8003390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 021c 	and.w	r2, r3, #28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
}
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40020080 	.word	0x40020080
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020000 	.word	0x40020000

080033e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800340c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f003 021c 	and.w	r2, r3, #28
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d108      	bne.n	8003444 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003442:	e007      	b.n	8003454 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
	...

08003460 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d813      	bhi.n	800349c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003480:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3b08      	subs	r3, #8
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e011      	b.n	80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80034a6:	4413      	add	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3b08      	subs	r3, #8
 80034b4:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	3307      	adds	r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80034c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40020407 	.word	0x40020407
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	4002081c 	.word	0x4002081c
 80034ec:	40020880 	.word	0x40020880

080034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003500:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003514:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b01      	subs	r3, #1
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2201      	movs	r2, #1
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	1000823f 	.word	0x1000823f
 8003534:	40020940 	.word	0x40020940

08003538 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003546:	e140      	b.n	80037ca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8132 	beq.w	80037c4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d005      	beq.n	8003578 <HAL_GPIO_Init+0x40>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d130      	bne.n	80035da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ae:	2201      	movs	r2, #1
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0201 	and.w	r2, r3, #1
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d123      	bne.n	800366a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	6939      	ldr	r1, [r7, #16]
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 808c 	beq.w	80037c4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80036ac:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_GPIO_Init+0x2b0>)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	3302      	adds	r3, #2
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	2207      	movs	r2, #7
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1bc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_GPIO_Init+0x2b4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1b8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_GPIO_Init+0x2b8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1b4>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e004      	b.n	80036f6 <HAL_GPIO_Init+0x1be>
 80036ec:	2307      	movs	r3, #7
 80036ee:	e002      	b.n	80036f6 <HAL_GPIO_Init+0x1be>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_GPIO_Init+0x1be>
 80036f4:	2300      	movs	r3, #0
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	f002 0203 	and.w	r2, r2, #3
 80036fc:	0092      	lsls	r2, r2, #2
 80036fe:	4093      	lsls	r3, r2
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003706:	4938      	ldr	r1, [pc, #224]	; (80037e8 <HAL_GPIO_Init+0x2b0>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003714:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003738:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003762:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800378e:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_GPIO_Init+0x2bc>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f aeb7 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	48000400 	.word	0x48000400
 80037f0:	48000800 	.word	0x48000800
 80037f4:	58000800 	.word	0x58000800

080037f8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003806:	e0af      	b.n	8003968 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003808:	2201      	movs	r2, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a2 	beq.w	8003962 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800381e:	4a59      	ldr	r2, [pc, #356]	; (8003984 <HAL_GPIO_DeInit+0x18c>)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	3302      	adds	r3, #2
 8003826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	2207      	movs	r2, #7
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003846:	d00d      	beq.n	8003864 <HAL_GPIO_DeInit+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a4f      	ldr	r2, [pc, #316]	; (8003988 <HAL_GPIO_DeInit+0x190>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <HAL_GPIO_DeInit+0x68>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_GPIO_DeInit+0x194>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_GPIO_DeInit+0x64>
 8003858:	2302      	movs	r3, #2
 800385a:	e004      	b.n	8003866 <HAL_GPIO_DeInit+0x6e>
 800385c:	2307      	movs	r3, #7
 800385e:	e002      	b.n	8003866 <HAL_GPIO_DeInit+0x6e>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_GPIO_DeInit+0x6e>
 8003864:	2300      	movs	r3, #0
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	f002 0203 	and.w	r2, r2, #3
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	4093      	lsls	r3, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	429a      	cmp	r2, r3
 8003874:	d136      	bne.n	80038e4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003876:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 8003878:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	4943      	ldr	r1, [pc, #268]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 8003882:	4013      	ands	r3, r2
 8003884:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 800388a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	493f      	ldr	r1, [pc, #252]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 8003894:	4013      	ands	r3, r2
 8003896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	493b      	ldr	r1, [pc, #236]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_GPIO_DeInit+0x198>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	2207      	movs	r2, #7
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038c6:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <HAL_GPIO_DeInit+0x18c>)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	3302      	adds	r3, #2
 80038ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	482b      	ldr	r0, [pc, #172]	; (8003984 <HAL_GPIO_DeInit+0x18c>)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	400a      	ands	r2, r1
 80038de:	3302      	adds	r3, #2
 80038e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2103      	movs	r1, #3
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	08d2      	lsrs	r2, r2, #3
 8003918:	4019      	ands	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3208      	adds	r2, #8
 800391e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2103      	movs	r1, #3
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	401a      	ands	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	2101      	movs	r1, #1
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2103      	movs	r1, #3
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	401a      	ands	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3301      	adds	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f af49 	bne.w	8003808 <HAL_GPIO_DeInit+0x10>
  }
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	48000400 	.word	0x48000400
 800398c:	48000800 	.word	0x48000800
 8003990:	58000800 	.word	0x58000800

08003994 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	807b      	strh	r3, [r7, #2]
 80039ce:	4613      	mov	r3, r2
 80039d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039d2:	787b      	ldrb	r3, [r7, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039de:	e002      	b.n	80039e6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f806 	bl	8003a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	58000800 	.word	0x58000800

08003a20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a03      	ldr	r2, [pc, #12]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	58000400 	.word	0x58000400

08003a50 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10c      	bne.n	8003a7c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6e:	d10d      	bne.n	8003a8c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003a70:	f000 f83c 	bl	8003aec <HAL_PWREx_DisableLowPowerRunMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8003a7a:	e015      	b.n	8003aa8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003a88:	f000 f822 	bl	8003ad0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003a9e:	bf30      	wfi
 8003aa0:	e002      	b.n	8003aa8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003aa2:	bf40      	sev
    __WFE();
 8003aa4:	bf20      	wfe
    __WFE();
 8003aa6:	bf20      	wfe
  }
}
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	58000400 	.word	0x58000400
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_PWREx_GetVoltageRange+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	58000400 	.word	0x58000400

08003ad0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	58000400 	.word	0x58000400

08003aec <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2232      	movs	r2, #50	; 0x32
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003b12:	e002      	b.n	8003b1a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d102      	bne.n	8003b2e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f2      	bne.n	8003b14 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3a:	d101      	bne.n	8003b40 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	58000400 	.word	0x58000400
 8003b50:	20000fa4 	.word	0x20000fa4
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0307 	bic.w	r3, r3, #7
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b84:	bf30      	wfi
 8003b86:	e002      	b.n	8003b8e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b88:	bf40      	sev
    __WFE();
 8003b8a:	bf20      	wfe
    __WFE();
 8003b8c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	4a05      	ldr	r2, [pc, #20]	; (8003ba8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6113      	str	r3, [r2, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	58000400 	.word	0x58000400
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <LL_PWR_IsEnabledBkUpAccess>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbc:	d101      	bne.n	8003bc2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	58000400 	.word	0x58000400

08003bd0 <LL_RCC_HSE_EnableTcxo>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <LL_RCC_HSE_DisableTcxo>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1a:	d101      	bne.n	8003c20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_HSE_Enable>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_HSE_Disable>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_HSE_IsReady>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c74:	d101      	bne.n	8003c7a <LL_RCC_HSE_IsReady+0x18>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <LL_RCC_HSE_IsReady+0x1a>
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <LL_RCC_HSI_Enable>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_HSI_Disable>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <LL_RCC_HSI_IsReady>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d101      	bne.n	8003cd4 <LL_RCC_HSI_IsReady+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_RCC_HSI_IsReady+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_HSI_SetCalibTrimming>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_LSE_IsReady>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d101      	bne.n	8003d1e <LL_RCC_LSE_IsReady+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_RCC_LSE_IsReady+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_LSI_Enable>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_LSI_Disable>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_LSI_IsReady>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d101      	bne.n	8003d80 <LL_RCC_LSI_IsReady+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_RCC_LSI_IsReady+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <LL_RCC_MSI_Enable>:
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <LL_RCC_MSI_Disable>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6013      	str	r3, [r2, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_MSI_IsReady>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d101      	bne.n	8003dd8 <LL_RCC_MSI_IsReady+0x16>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_RCC_MSI_IsReady+0x18>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d101      	bne.n	8003df8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_MSI_GetRange>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <LL_RCC_SetSysClkSource>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_GetSysClkSource>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_SetAHBPrescaler>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_SetAHB3Prescaler>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003eca:	f023 020f 	bic.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_SetAPB1Prescaler>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_SetAPB2Prescaler>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <LL_RCC_GetAHBPrescaler>:
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_GetAHB3Prescaler>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_GetAPB1Prescaler>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_GetAPB2Prescaler>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbc:	6013      	str	r3, [r2, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd8:	d101      	bne.n	8003fde <LL_RCC_PLL_IsReady+0x18>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <LL_RCC_PLL_IsReady+0x1a>
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0303 	and.w	r3, r3, #3
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d101      	bne.n	800405a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d101      	bne.n	800407e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800409a:	d101      	bne.n	80040a0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040bc:	d101      	bne.n	80040c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e38b      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	f7ff fece 	bl	8003e7e <LL_RCC_GetSysClkSource>
 80040e2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	f7ff ffa2 	bl	800402c <LL_RCC_PLL_GetMainSource>
 80040e8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80c9 	beq.w	800428a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x3e>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d17b      	bne.n	80041fc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d178      	bne.n	80041fc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800410a:	f7ff fe5a 	bl	8003dc2 <LL_RCC_MSI_IsReady>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_OscConfig+0x54>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e36a      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x72>
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413c:	e006      	b.n	800414c <HAL_RCC_OscConfig+0x80>
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	4293      	cmp	r3, r2
 800414e:	d222      	bcs.n	8004196 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd51 	bl	8004bfc <RCC_SetFlashLatencyFromMSIRange>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e348      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fe4e 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>
 8004194:	e021      	b.n	80041da <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a0:	f043 0308 	orr.w	r3, r3, #8
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fe35 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd16 	bl	8004bfc <RCC_SetFlashLatencyFromMSIRange>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e30d      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041da:	f000 fcd7 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 80041de:	4603      	mov	r3, r0
 80041e0:	4aa1      	ldr	r2, [pc, #644]	; (8004468 <HAL_RCC_OscConfig+0x39c>)
 80041e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041e4:	4ba1      	ldr	r3, [pc, #644]	; (800446c <HAL_RCC_OscConfig+0x3a0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd fd71 	bl	8001cd0 <HAL_InitTick>
 80041ee:	4603      	mov	r3, r0
 80041f0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d047      	beq.n	8004288 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	e2fc      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02c      	beq.n	800425e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004204:	f7ff fdc1 	bl	8003d8a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004208:	f7fd fd6c 	bl	8001ce4 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004210:	f7fd fd68 	bl	8001ce4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e2e9      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004222:	f7ff fdce 	bl	8003dc2 <LL_RCC_MSI_IsReady>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f1      	beq.n	8004210 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fdea 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800425e:	f7ff fda2 	bl	8003da6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004262:	f7fd fd3f 	bl	8001ce4 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800426a:	f7fd fd3b 	bl	8001ce4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e2bc      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800427c:	f7ff fda1 	bl	8003dc2 <LL_RCC_MSI_IsReady>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f1      	bne.n	800426a <HAL_RCC_OscConfig+0x19e>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004288:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d05f      	beq.n	8004356 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x1dc>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d10d      	bne.n	80042be <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d10a      	bne.n	80042be <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	f7ff fcdb 	bl	8003c62 <LL_RCC_HSE_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d050      	beq.n	8004354 <HAL_RCC_OscConfig+0x288>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d14c      	bne.n	8004354 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e29b      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_OscConfig+0x218>
 80042de:	f7ff fca4 	bl	8003c2a <LL_RCC_HSE_Enable>
 80042e2:	e00d      	b.n	8004300 <HAL_RCC_OscConfig+0x234>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80042ec:	d104      	bne.n	80042f8 <HAL_RCC_OscConfig+0x22c>
 80042ee:	f7ff fc6f 	bl	8003bd0 <LL_RCC_HSE_EnableTcxo>
 80042f2:	f7ff fc9a 	bl	8003c2a <LL_RCC_HSE_Enable>
 80042f6:	e003      	b.n	8004300 <HAL_RCC_OscConfig+0x234>
 80042f8:	f7ff fca5 	bl	8003c46 <LL_RCC_HSE_Disable>
 80042fc:	f7ff fc76 	bl	8003bec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fcec 	bl	8001ce4 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd fce8 	bl	8001ce4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e269      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004322:	f7ff fc9e 	bl	8003c62 <LL_RCC_HSE_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f1      	beq.n	8004310 <HAL_RCC_OscConfig+0x244>
 800432c:	e013      	b.n	8004356 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd fcd9 	bl	8001ce4 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004336:	f7fd fcd5 	bl	8001ce4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	; 0x64
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e256      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004348:	f7ff fc8b 	bl	8003c62 <LL_RCC_HSE_IsReady>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f1      	bne.n	8004336 <HAL_RCC_OscConfig+0x26a>
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04b      	beq.n	80043fa <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x2a8>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d113      	bne.n	8004396 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d110      	bne.n	8004396 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004374:	f7ff fca2 	bl	8003cbc <LL_RCC_HSI_IsReady>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x2be>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e235      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fca5 	bl	8003cde <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004394:	e031      	b.n	80043fa <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800439e:	f7ff fc71 	bl	8003c84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd fc9f 	bl	8001ce4 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fd fc9b 	bl	8001ce4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e21c      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80043bc:	f7ff fc7e 	bl	8003cbc <LL_RCC_HSI_IsReady>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f1      	beq.n	80043aa <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc87 	bl	8003cde <LL_RCC_HSI_SetCalibTrimming>
 80043d0:	e013      	b.n	80043fa <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d2:	f7ff fc65 	bl	8003ca0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd fc85 	bl	8001ce4 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fd fc81 	bl	8001ce4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e202      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043f0:	f7ff fc64 	bl	8003cbc <LL_RCC_HSI_IsReady>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f1      	bne.n	80043de <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d06f      	beq.n	80044e6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d057      	beq.n	80044be <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	429a      	cmp	r2, r3
 8004424:	d036      	beq.n	8004494 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e1db      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d018      	beq.n	800447a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8004448:	f7ff fc7e 	bl	8003d48 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444c:	f7fd fc4a 	bl	8001ce4 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004452:	e00d      	b.n	8004470 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fd fc46 	bl	8001ce4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b11      	cmp	r3, #17
 8004460:	d906      	bls.n	8004470 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1c7      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
 8004466:	bf00      	nop
 8004468:	20000fa4 	.word	0x20000fa4
 800446c:	20000fa8 	.word	0x20000fa8
          while (LL_RCC_LSI_IsReady() != 0U)
 8004470:	f7ff fc7a 	bl	8003d68 <LL_RCC_LSI_IsReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ec      	bne.n	8004454 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004482:	f023 0210 	bic.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004494:	f7ff fc48 	bl	8003d28 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fc24 	bl	8001ce4 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fd fc20 	bl	8001ce4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b11      	cmp	r3, #17
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e1a1      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80044b2:	f7ff fc59 	bl	8003d68 <LL_RCC_LSI_IsReady>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f1      	beq.n	80044a0 <HAL_RCC_OscConfig+0x3d4>
 80044bc:	e013      	b.n	80044e6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044be:	f7ff fc43 	bl	8003d48 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fc0f 	bl	8001ce4 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fd fc0b 	bl	8001ce4 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b11      	cmp	r3, #17
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e18c      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80044dc:	f7ff fc44 	bl	8003d68 <LL_RCC_LSI_IsReady>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80d8 	beq.w	80046a4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80044f4:	f7ff fb5a 	bl	8003bac <LL_PWR_IsEnabledBkUpAccess>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044fe:	f7ff fa99 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fd fbef 	bl	8001ce4 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd fbeb 	bl	8001ce4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e16c      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800451c:	f7ff fb46 	bl	8003bac <LL_PWR_IsEnabledBkUpAccess>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f1      	beq.n	800450a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07b      	beq.n	8004626 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b85      	cmp	r3, #133	; 0x85
 8004534:	d003      	beq.n	800453e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b05      	cmp	r3, #5
 800453c:	d109      	bne.n	8004552 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800453e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fbc7 	bl	8001ce4 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fd fbb9 	bl	8001ce4 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e138      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004584:	f7ff fbbf 	bl	8003d06 <LL_RCC_LSE_IsReady>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b81      	cmp	r3, #129	; 0x81
 8004594:	d003      	beq.n	800459e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b85      	cmp	r3, #133	; 0x85
 800459c:	d121      	bne.n	80045e2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd fba1 	bl	8001ce4 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fb93 	bl	8001ce4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e112      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ec      	beq.n	80045ba <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80045e0:	e060      	b.n	80046a4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd fb7f 	bl	8001ce4 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fb71 	bl	8001ce4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0f0      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ec      	bne.n	80045fe <HAL_RCC_OscConfig+0x532>
 8004624:	e03e      	b.n	80046a4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fd fb5d 	bl	8001ce4 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fd fb4f 	bl	8001ce4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0ce      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ec      	bne.n	8004642 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fd fb3c 	bl	8001ce4 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fd fb2e 	bl	8001ce4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0ad      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800469a:	f7ff fb34 	bl	8003d06 <LL_RCC_LSE_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ef      	bne.n	8004684 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a3 	beq.w	80047f4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d076      	beq.n	80047a2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d14b      	bne.n	8004754 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	f7ff fc75 	bl	8003faa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fb10 	bl	8001ce4 <HAL_GetTick>
 80046c4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fb0c 	bl	8001ce4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b0a      	cmp	r3, #10
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e08d      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80046da:	f7ff fc74 	bl	8003fc6 <LL_RCC_PLL_IsReady>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f1      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b45      	ldr	r3, [pc, #276]	; (8004800 <HAL_RCC_OscConfig+0x734>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046fc:	0212      	lsls	r2, r2, #8
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004710:	430a      	orrs	r2, r1
 8004712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471a:	f7ff fc38 	bl	8003f8e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fd fad9 	bl	8001ce4 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd fad5 	bl	8001ce4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b0a      	cmp	r3, #10
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e056      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004748:	f7ff fc3d 	bl	8003fc6 <LL_RCC_PLL_IsReady>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f1      	beq.n	8004736 <HAL_RCC_OscConfig+0x66a>
 8004752:	e04f      	b.n	80047f4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	f7ff fc29 	bl	8003faa <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004772:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd fab2 	bl	8001ce4 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fd faae 	bl	8001ce4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b0a      	cmp	r3, #10
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e02f      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004796:	f7ff fc16 	bl	8003fc6 <LL_RCC_PLL_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x6b8>
 80047a0:	e028      	b.n	80047f4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e023      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0203 	and.w	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d115      	bne.n	80047f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10e      	bne.n	80047f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	429a      	cmp	r2, r3
 80047e0:	d106      	bne.n	80047f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	11c1808c 	.word	0x11c1808c

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e10f      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d91b      	bls.n	800485e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b86      	ldr	r3, [pc, #536]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4984      	ldr	r1, [pc, #528]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fd fa55 	bl	8001ce4 <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483c:	e008      	b.n	8004850 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800483e:	f7fd fa51 	bl	8001ce4 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0f3      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004850:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d1ef      	bne.n	800483e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fb10 	bl	8003e94 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004874:	f7fd fa36 	bl	8001ce4 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800487c:	f7fd fa32 	bl	8001ce4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0d4      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800488e:	f7ff fbd8 	bl	8004042 <LL_RCC_IsActiveFlag_HPRE>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f1      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fb06 	bl	8003eba <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048ae:	f7fd fa19 	bl	8001ce4 <HAL_GetTick>
 80048b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048b6:	f7fd fa15 	bl	8001ce4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0b7      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048c8:	f7ff fbcc 	bl	8004064 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f1      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff faff 	bl	8003ee6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048e8:	f7fd f9fc 	bl	8001ce4 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f0:	f7fd f9f8 	bl	8001ce4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e09a      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004902:	f7ff fbc1 	bl	8004088 <LL_RCC_IsActiveFlag_PPRE1>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f1      	beq.n	80048f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d017      	beq.n	8004948 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff faf4 	bl	8003f0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004924:	f7fd f9de 	bl	8001ce4 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800492c:	f7fd f9da 	bl	8001ce4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e07c      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800493e:	f7ff fbb4 	bl	80040aa <LL_RCC_IsActiveFlag_PPRE2>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f1      	beq.n	800492c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d043      	beq.n	80049dc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d106      	bne.n	800496a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800495c:	f7ff f981 	bl	8003c62 <LL_RCC_HSE_IsReady>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d11e      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e066      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d106      	bne.n	8004980 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004972:	f7ff fb28 	bl	8003fc6 <LL_RCC_PLL_IsReady>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d113      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e05b      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004988:	f7ff fa1b 	bl	8003dc2 <LL_RCC_MSI_IsReady>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e050      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004996:	f7ff f991 	bl	8003cbc <LL_RCC_HSI_IsReady>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e049      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fa55 	bl	8003e58 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ae:	f7fd f999 	bl	8001ce4 <HAL_GetTick>
 80049b2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b6:	f7fd f995 	bl	8001ce4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e035      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049cc:	f7ff fa57 	bl	8003e7e <LL_RCC_GetSysClkSource>
 80049d0:	4602      	mov	r2, r0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ec      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d21b      	bcs.n	8004a22 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 0207 	bic.w	r2, r3, #7
 80049f2:	4913      	ldr	r1, [pc, #76]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fd f973 	bl	8001ce4 <HAL_GetTick>
 80049fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a02:	f7fd f96f 	bl	8001ce4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e011      	b.n	8004a38 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_ClockConfig+0x23c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d1ef      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a22:	f000 f8b3 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <HAL_RCC_ClockConfig+0x240>)
 8004a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd f94d 	bl	8001cd0 <HAL_InitTick>
 8004a36:	4603      	mov	r3, r0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58004000 	.word	0x58004000
 8004a44:	20000fa4 	.word	0x20000fa4
 8004a48:	20000fa8 	.word	0x20000fa8

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	f7ff fa10 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004a5e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a60:	f7ff fae4 	bl	800402c <LL_RCC_PLL_GetMainSource>
 8004a64:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x2c>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d139      	bne.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d136      	bne.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a78:	f7ff f9b3 	bl	8003de2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_GetSysClockFreq+0x62>
 8004a82:	f7ff f9ae 	bl	8003de2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_GetSysClockFreq+0x4e>
 8004a8c:	f7ff f9b9 	bl	8003e02 <LL_RCC_MSI_GetRange>
 8004a90:	4603      	mov	r3, r0
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	e005      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x5a>
 8004a9a:	f7ff f9bd 	bl	8003e18 <LL_RCC_MSI_GetRangeAfterStandby>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	4a36      	ldr	r2, [pc, #216]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x134>)
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	e014      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x8c>
 8004aae:	f7ff f998 	bl	8003de2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x7a>
 8004ab8:	f7ff f9a3 	bl	8003e02 <LL_RCC_MSI_GetRange>
 8004abc:	4603      	mov	r3, r0
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x86>
 8004ac6:	f7ff f9a7 	bl	8003e18 <LL_RCC_MSI_GetRangeAfterStandby>
 8004aca:	4603      	mov	r3, r0
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	4a2b      	ldr	r2, [pc, #172]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x134>)
 8004ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d115      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ae4:	e012      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d102      	bne.n	8004af2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e00c      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d109      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004af8:	f7ff f886 	bl	8003c08 <LL_RCC_HSE_IsEnabledDiv2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d102      	bne.n	8004b08 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e001      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b0a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	f7ff f9b7 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d12f      	bne.n	8004b76 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b16:	f7ff fa89 	bl	800402c <LL_RCC_PLL_GetMainSource>
 8004b1a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0xde>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0xe4>
 8004b28:	e00d      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b2c:	60fb      	str	r3, [r7, #12]
        break;
 8004b2e:	e00d      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b30:	f7ff f86a 	bl	8003c08 <LL_RCC_HSE_IsEnabledDiv2>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b3c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b42:	60fb      	str	r3, [r7, #12]
        break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	60fb      	str	r3, [r7, #12]
        break;
 8004b4a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004b4c:	f7ff fa4c 	bl	8003fe8 <LL_RCC_PLL_GetN>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fb03 f402 	mul.w	r4, r3, r2
 8004b58:	f7ff fa5d 	bl	8004016 <LL_RCC_PLL_GetDivider>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	3301      	adds	r3, #1
 8004b62:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b66:	f7ff fa4b 	bl	8004000 <LL_RCC_PLL_GetR>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	0f5b      	lsrs	r3, r3, #29
 8004b6e:	3301      	adds	r3, #1
 8004b70:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b74:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b76:	697b      	ldr	r3, [r7, #20]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	08012240 	.word	0x08012240
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	01e84800 	.word	0x01e84800

08004b8c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b598      	push	{r3, r4, r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b90:	f7ff ff5c 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004b94:	4604      	mov	r4, r0
 8004b96:	f7ff f9cc 	bl	8003f32 <LL_RCC_GetAHBPrescaler>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd98      	pop	{r3, r4, r7, pc}
 8004bb0:	080121e0 	.word	0x080121e0

08004bb4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb4:	b598      	push	{r3, r4, r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bb8:	f7ff ffe8 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	f7ff f9d0 	bl	8003f62 <LL_RCC_GetAPB1Prescaler>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd98      	pop	{r3, r4, r7, pc}
 8004bd4:	08012220 	.word	0x08012220

08004bd8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b598      	push	{r3, r4, r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bdc:	f7ff ffd6 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004be0:	4604      	mov	r4, r0
 8004be2:	f7ff f9c9 	bl	8003f78 <LL_RCC_GetAPB2Prescaler>
 8004be6:	4603      	mov	r3, r0
 8004be8:	0adb      	lsrs	r3, r3, #11
 8004bea:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd98      	pop	{r3, r4, r7, pc}
 8004bf8:	08012220 	.word	0x08012220

08004bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004c14:	f7ff f998 	bl	8003f48 <LL_RCC_GetAHB3Prescaler>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0c9c      	lsrs	r4, r3, #18
 8004c38:	f7fe ff3e 	bl	8003ab8 <HAL_PWREx_GetVoltageRange>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 f80b 	bl	8004c5c <RCC_SetFlashLatency>
 8004c46:	4603      	mov	r3, r0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	08012240 	.word	0x08012240
 8004c54:	080121e0 	.word	0x080121e0
 8004c58:	431bde83 	.word	0x431bde83

08004c5c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004c66:	4a3a      	ldr	r2, [pc, #232]	; (8004d50 <RCC_SetFlashLatency+0xf4>)
 8004c68:	f107 0320 	add.w	r3, r7, #32
 8004c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c70:	6018      	str	r0, [r3, #0]
 8004c72:	3304      	adds	r3, #4
 8004c74:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004c76:	4a37      	ldr	r2, [pc, #220]	; (8004d54 <RCC_SetFlashLatency+0xf8>)
 8004c78:	f107 0318 	add.w	r3, r7, #24
 8004c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c80:	6018      	str	r0, [r3, #0]
 8004c82:	3304      	adds	r3, #4
 8004c84:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004c86:	4a34      	ldr	r2, [pc, #208]	; (8004d58 <RCC_SetFlashLatency+0xfc>)
 8004c88:	f107 030c 	add.w	r3, r7, #12
 8004c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d11b      	bne.n	8004cd6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca2:	e014      	b.n	8004cce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	3338      	adds	r3, #56	; 0x38
 8004caa:	443b      	add	r3, r7
 8004cac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d807      	bhi.n	8004cc8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	3338      	adds	r3, #56	; 0x38
 8004cbe:	443b      	add	r3, r7
 8004cc0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cc6:	e021      	b.n	8004d0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	3301      	adds	r3, #1
 8004ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d9e7      	bls.n	8004ca4 <RCC_SetFlashLatency+0x48>
 8004cd4:	e01a      	b.n	8004d0c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cda:	e014      	b.n	8004d06 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	3338      	adds	r3, #56	; 0x38
 8004ce2:	443b      	add	r3, r7
 8004ce4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d807      	bhi.n	8004d00 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	3338      	adds	r3, #56	; 0x38
 8004cf6:	443b      	add	r3, r7
 8004cf8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cfe:	e005      	b.n	8004d0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	3301      	adds	r3, #1
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d9e7      	bls.n	8004cdc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <RCC_SetFlashLatency+0x100>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	4911      	ldr	r1, [pc, #68]	; (8004d5c <RCC_SetFlashLatency+0x100>)
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d1c:	f7fc ffe2 	bl	8001ce4 <HAL_GetTick>
 8004d20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d22:	e008      	b.n	8004d36 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d24:	f7fc ffde 	bl	8001ce4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e007      	b.n	8004d46 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <RCC_SetFlashLatency+0x100>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1ef      	bne.n	8004d24 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3738      	adds	r7, #56	; 0x38
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08011ef0 	.word	0x08011ef0
 8004d54:	08011ef8 	.word	0x08011ef8
 8004d58:	08011f00 	.word	0x08011f00
 8004d5c:	58004000 	.word	0x58004000

08004d60 <LL_RCC_LSE_IsReady>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d101      	bne.n	8004d78 <LL_RCC_LSE_IsReady+0x18>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <LL_RCC_LSE_IsReady+0x1a>
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <LL_RCC_SetUSARTClockSource>:
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	43db      	mvns	r3, r3
 8004d98:	401a      	ands	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <LL_RCC_SetI2SClockSource>:
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_SetLPUARTClockSource>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_SetI2CClockSource>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	401a      	ands	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <LL_RCC_SetLPTIMClockSource>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_SetRNGClockSource>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <LL_RCC_SetADCClockSource>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_SetRTCClockSource>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <LL_RCC_GetRTCClockSource>:
{
 8004eee:	b480      	push	{r7}
 8004ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <LL_RCC_ForceBackupDomainReset>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004f54:	2300      	movs	r3, #0
 8004f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f58:	2300      	movs	r3, #0
 8004f5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d058      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004f68:	f7fe fd64 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6c:	f7fc feba 	bl	8001ce4 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f72:	e009      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fc feb6 	bl	8001ce4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	74fb      	strb	r3, [r7, #19]
        break;
 8004f86:	e006      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004f88:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d1ee      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d13c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004f9c:	f7ff ffa7 	bl	8004eee <LL_RCC_GetRTCClockSource>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d00f      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb8:	f7ff ffa5 	bl	8004f06 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbc:	f7ff ffb3 	bl	8004f26 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d014      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fe86 	bl	8001ce4 <HAL_GetTick>
 8004fd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004fda:	e00b      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fe82 	bl	8001ce4 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d902      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ff2:	e004      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004ff4:	f7ff feb4 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d1ee      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff5b 	bl	8004ec4 <LL_RCC_SetRTCClockSource>
 800500e:	e004      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	74bb      	strb	r3, [r7, #18]
 8005014:	e001      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fea9 	bl	8004d82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fe9e 	bl	8004d82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fec0 	bl	8004ddc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fee6 	bl	8004e3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fedb 	bl	8004e3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fed0 	bl	8004e3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fea9 	bl	8004e06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fe9e 	bl	8004e06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fe93 	bl	8004e06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d011      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fe5e 	bl	8004db2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d107      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800510e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fea5 	bl	8004e70 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800513c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fea3 	bl	8004e9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515c:	d107      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800516e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	58000400 	.word	0x58000400

0800517c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d068      	beq.n	8005260 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fbf6 	bl	8001994 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b0:	4b2e      	ldr	r3, [pc, #184]	; (800526c <HAL_RTC_Init+0xf0>)
 80051b2:	22ca      	movs	r2, #202	; 0xca
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
 80051b6:	4b2d      	ldr	r3, [pc, #180]	; (800526c <HAL_RTC_Init+0xf0>)
 80051b8:	2253      	movs	r2, #83	; 0x53
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fa0f 	bl	80055e0 <RTC_EnterInitMode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d13f      	bne.n	800524c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RTC_Init+0xf0>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <HAL_RTC_Init+0xf0>)
 80051d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80051d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051da:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80051dc:	4b23      	ldr	r3, [pc, #140]	; (800526c <HAL_RTC_Init+0xf0>)
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	4319      	orrs	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	491e      	ldr	r1, [pc, #120]	; (800526c <HAL_RTC_Init+0xf0>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	491a      	ldr	r1, [pc, #104]	; (800526c <HAL_RTC_Init+0xf0>)
 8005202:	4313      	orrs	r3, r2
 8005204:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_RTC_Init+0xf0>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	430b      	orrs	r3, r1
 8005218:	4914      	ldr	r1, [pc, #80]	; (800526c <HAL_RTC_Init+0xf0>)
 800521a:	4313      	orrs	r3, r2
 800521c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa12 	bl	8005648 <RTC_ExitInitMode>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10e      	bne.n	800524c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <HAL_RTC_Init+0xf0>)
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a19      	ldr	r1, [r3, #32]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4319      	orrs	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	430b      	orrs	r3, r1
 8005246:	4909      	ldr	r1, [pc, #36]	; (800526c <HAL_RTC_Init+0xf0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_RTC_Init+0xf0>)
 800524e:	22ff      	movs	r2, #255	; 0xff
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40002800 	.word	0x40002800

08005270 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_RTC_SetAlarm_IT+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e0f3      	b.n	8005476 <HAL_RTC_SetAlarm_IT+0x206>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800529e:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	d06a      	beq.n	8005386 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d13a      	bne.n	800532c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f9f5 	bl	80056c4 <RTC_ByteToBcd2>
 80052da:	4603      	mov	r3, r0
 80052dc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f9ee 	bl	80056c4 <RTC_ByteToBcd2>
 80052e8:	4603      	mov	r3, r0
 80052ea:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052ec:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	789b      	ldrb	r3, [r3, #2]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f9e6 	bl	80056c4 <RTC_ByteToBcd2>
 80052f8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052fa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005304:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f9d8 	bl	80056c4 <RTC_ByteToBcd2>
 8005314:	4603      	mov	r3, r0
 8005316:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005318:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005320:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e02c      	b.n	8005386 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8005334:	d00d      	beq.n	8005352 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800533e:	d008      	beq.n	8005352 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005340:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800535e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005364:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800536c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005374:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005376:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800537c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005388:	22ca      	movs	r2, #202	; 0xca
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 800538e:	2253      	movs	r2, #83	; 0x53
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d12c      	bne.n	80053f6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800539c:	4b38      	ldr	r3, [pc, #224]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4a37      	ldr	r2, [pc, #220]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053a6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b4:	d107      	bne.n	80053c6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4930      	ldr	r1, [pc, #192]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	644b      	str	r3, [r1, #68]	; 0x44
 80053c4:	e006      	b.n	80053d4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80053c6:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80053cc:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f043 0201 	orr.w	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	4a24      	ldr	r2, [pc, #144]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053ee:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80053f2:	6193      	str	r3, [r2, #24]
 80053f4:	e02b      	b.n	800544e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 80053fc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8005400:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005402:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005404:	2202      	movs	r2, #2
 8005406:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d107      	bne.n	8005420 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4919      	ldr	r1, [pc, #100]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 800541a:	4313      	orrs	r3, r2
 800541c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800541e:	e006      	b.n	800542e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f043 0202 	orr.w	r2, r3, #2
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005448:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800544c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RTC_SetAlarm_IT+0x214>)
 8005450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005454:	4a0b      	ldr	r2, [pc, #44]	; (8005484 <HAL_RTC_SetAlarm_IT+0x214>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RTC_SetAlarm_IT+0x210>)
 8005460:	22ff      	movs	r2, #255	; 0xff
 8005462:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd90      	pop	{r4, r7, pc}
 800547e:	bf00      	nop
 8005480:	40002800 	.word	0x40002800
 8005484:	58000800 	.word	0x58000800

08005488 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_RTC_DeactivateAlarm+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e048      	b.n	8005532 <HAL_RTC_DeactivateAlarm+0xaa>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b0:	4b22      	ldr	r3, [pc, #136]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054b2:	22ca      	movs	r2, #202	; 0xca
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
 80054b6:	4b21      	ldr	r3, [pc, #132]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054b8:	2253      	movs	r2, #83	; 0x53
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c2:	d115      	bne.n	80054f0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80054c4:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054ce:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	4a19      	ldr	r2, [pc, #100]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054da:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f023 0201 	bic.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ee:	e014      	b.n	800551a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054f6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80054fa:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 80054fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005500:	4a0e      	ldr	r2, [pc, #56]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005502:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005506:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	f023 0202 	bic.w	r2, r3, #2
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005516:	2202      	movs	r2, #2
 8005518:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_RTC_DeactivateAlarm+0xb4>)
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	40002800 	.word	0x40002800

08005540 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_RTC_AlarmIRQHandler+0x50>)
 800554a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005560:	2201      	movs	r2, #1
 8005562:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fe8c 	bl	8002282 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005576:	2202      	movs	r2, #2
 8005578:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f94a 	bl	8005814 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40002800 	.word	0x40002800

08005594 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <HAL_RTC_WaitForSynchro+0x48>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <HAL_RTC_WaitForSynchro+0x48>)
 80055a2:	f023 0320 	bic.w	r3, r3, #32
 80055a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80055a8:	f7fc fb9c 	bl	8001ce4 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80055ae:	e009      	b.n	80055c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055b0:	f7fc fb98 	bl	8001ce4 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055be:	d901      	bls.n	80055c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e006      	b.n	80055d2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RTC_WaitForSynchro+0x48>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0ef      	beq.n	80055b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40002800 	.word	0x40002800

080055e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80055ec:	4b15      	ldr	r3, [pc, #84]	; (8005644 <RTC_EnterInitMode+0x64>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d120      	bne.n	800563a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80055f8:	4b12      	ldr	r3, [pc, #72]	; (8005644 <RTC_EnterInitMode+0x64>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <RTC_EnterInitMode+0x64>)
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005604:	f7fc fb6e 	bl	8001ce4 <HAL_GetTick>
 8005608:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800560a:	e00d      	b.n	8005628 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800560c:	f7fc fb6a 	bl	8001ce4 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561a:	d905      	bls.n	8005628 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2203      	movs	r2, #3
 8005624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <RTC_EnterInitMode+0x64>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <RTC_EnterInitMode+0x5a>
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d1e8      	bne.n	800560c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40002800 	.word	0x40002800

08005648 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <RTC_ExitInitMode+0x78>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <RTC_ExitInitMode+0x78>)
 800565a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <RTC_ExitInitMode+0x78>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10c      	bne.n	8005686 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff91 	bl	8005594 <HAL_RTC_WaitForSynchro>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01e      	beq.n	80056b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2203      	movs	r2, #3
 800567c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e017      	b.n	80056b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <RTC_ExitInitMode+0x78>)
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <RTC_ExitInitMode+0x78>)
 800568c:	f023 0320 	bic.w	r3, r3, #32
 8005690:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ff7e 	bl	8005594 <HAL_RTC_WaitForSynchro>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2203      	movs	r2, #3
 80056a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <RTC_ExitInitMode+0x78>)
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <RTC_ExitInitMode+0x78>)
 80056b0:	f043 0320 	orr.w	r3, r3, #32
 80056b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40002800 	.word	0x40002800

080056c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80056d6:	e005      	b.n	80056e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	3b0a      	subs	r3, #10
 80056e2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	2b09      	cmp	r3, #9
 80056e8:	d8f6      	bhi.n	80056d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	7afb      	ldrb	r3, [r7, #11]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	b2db      	uxtb	r3, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
	...

08005704 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_RTCEx_EnableBypassShadow+0x16>
 8005716:	2302      	movs	r3, #2
 8005718:	e01f      	b.n	800575a <HAL_RTCEx_EnableBypassShadow+0x56>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800572c:	22ca      	movs	r2, #202	; 0xca
 800572e:	625a      	str	r2, [r3, #36]	; 0x24
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005732:	2253      	movs	r2, #83	; 0x53
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800573c:	f043 0320 	orr.w	r3, r3, #32
 8005740:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	40002800 	.word	0x40002800

08005768 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_RTCEx_SetSSRU_IT+0x16>
 800577a:	2302      	movs	r3, #2
 800577c:	e027      	b.n	80057ce <HAL_RTCEx_SetSSRU_IT+0x66>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005790:	22ca      	movs	r2, #202	; 0xca
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
 8005794:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005796:	2253      	movs	r2, #83	; 0x53
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <HAL_RTCEx_SetSSRU_IT+0x74>)
 80057a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ac:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <HAL_RTCEx_SetSSRU_IT+0x74>)
 80057ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b6:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40002800 	.word	0x40002800
 80057dc:	58000800 	.word	0x58000800

080057e0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80057f6:	2240      	movs	r2, #64	; 0x40
 80057f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fd4b 	bl	8002296 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40002800 	.word	0x40002800

08005814 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_RTCEx_BKUPWrite+0x2c>)
 8005836:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	4000b100 	.word	0x4000b100

08005858 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <HAL_RTCEx_BKUPRead+0x28>)
 8005864:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	4000b100 	.word	0x4000b100

08005884 <LL_PWR_SetRadioBusyTrigger>:
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005894:	4904      	ldr	r1, [pc, #16]	; (80058a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4313      	orrs	r3, r2
 800589a:	608b      	str	r3, [r1, #8]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	58000400 	.word	0x58000400

080058ac <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80058b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	58000400 	.word	0x58000400

080058cc <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80058d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058e0:	bf00      	nop
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	58000400 	.word	0x58000400

080058ec <LL_PWR_ClearFlag_RFBUSY>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80058f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f6:	619a      	str	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	58000400 	.word	0x58000400

08005904 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b02      	cmp	r3, #2
 8005912:	d101      	bne.n	8005918 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	58000400 	.word	0x58000400

08005928 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d101      	bne.n	800593c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	58000400 	.word	0x58000400

0800594c <LL_RCC_RF_DisableReset>:
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <LL_RCC_IsRFUnderReset>:
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005980:	d101      	bne.n	8005986 <LL_RCC_IsRFUnderReset+0x1a>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <LL_RCC_IsRFUnderReset+0x1c>
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <LL_EXTI_EnableIT_32_63>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800599a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800599e:	4905      	ldr	r1, [pc, #20]	; (80059b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	58000800 	.word	0x58000800

080059b8 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
    return status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	e04b      	b.n	8005a66 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	799b      	ldrb	r3, [r3, #6]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fc f8de 	bl	8001ba4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80059ee:	f7ff ffad 	bl	800594c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80059f2:	4b1f      	ldr	r3, [pc, #124]	; (8005a70 <HAL_SUBGHZ_Init+0xb8>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	0cdb      	lsrs	r3, r3, #19
 8005a00:	2264      	movs	r2, #100	; 0x64
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d105      	bne.n	8005a1a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e007      	b.n	8005a2a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005a20:	f7ff ffa4 	bl	800596c <LL_RCC_IsRFUnderReset>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ee      	bne.n	8005a08 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a2a:	f7ff ff3f 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005a2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a32:	f7ff ffad 	bl	8005990 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005a36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a3a:	f7ff ff23 	bl	8005884 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005a3e:	f7ff ff55 	bl	80058ec <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 faad 	bl	8005fac <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	719a      	strb	r2, [r3, #6]

  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000fa4 	.word	0x20000fa4

08005a74 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	460b      	mov	r3, r1
 8005a82:	817b      	strh	r3, [r7, #10]
 8005a84:	4613      	mov	r3, r2
 8005a86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	799b      	ldrb	r3, [r3, #6]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d14a      	bne.n	8005b28 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	795b      	ldrb	r3, [r3, #5]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e045      	b.n	8005b2a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fb4c 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ab0:	f7ff ff0c 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005ab4:	210d      	movs	r1, #13
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa98 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fa90 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fa8a 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	82bb      	strh	r3, [r7, #20]
 8005adc:	e00a      	b.n	8005af4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ade:	8abb      	ldrh	r3, [r7, #20]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa7f 	bl	8005fec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005aee:	8abb      	ldrh	r3, [r7, #20]
 8005af0:	3301      	adds	r3, #1
 8005af2:	82bb      	strh	r3, [r7, #20]
 8005af4:	8aba      	ldrh	r2, [r7, #20]
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d3f0      	bcc.n	8005ade <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005afc:	f7ff fed6 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fb45 	bl	8006190 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
 8005b12:	e001      	b.n	8005b18 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	715a      	strb	r2, [r3, #5]

    return status;
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	e000      	b.n	8005b2a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005b28:	2302      	movs	r3, #2
  }
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	460b      	mov	r3, r1
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	4613      	mov	r3, r2
 8005b44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	799b      	ldrb	r3, [r3, #6]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d14a      	bne.n	8005bea <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	795b      	ldrb	r3, [r3, #5]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e045      	b.n	8005bec <HAL_SUBGHZ_ReadRegisters+0xba>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 faee 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b6c:	f7ff feae 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005b70:	211d      	movs	r1, #29
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fa3a 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fa32 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fa2c 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005b94:	2100      	movs	r1, #0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fa28 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	82fb      	strh	r3, [r7, #22]
 8005ba0:	e009      	b.n	8005bb6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fa77 	bl	8006098 <SUBGHZSPI_Receive>
      pData++;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005bb0:	8afb      	ldrh	r3, [r7, #22]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	82fb      	strh	r3, [r7, #22]
 8005bb6:	8afa      	ldrh	r2, [r7, #22]
 8005bb8:	893b      	ldrh	r3, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3f1      	bcc.n	8005ba2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005bbe:	f7ff fe75 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fae4 	bl	8006190 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e001      	b.n	8005bda <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	715a      	strb	r2, [r3, #5]

    return status;
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	e000      	b.n	8005bec <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	460b      	mov	r3, r1
 8005c02:	72fb      	strb	r3, [r7, #11]
 8005c04:	4613      	mov	r3, r2
 8005c06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	799b      	ldrb	r3, [r3, #6]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d14a      	bne.n	8005ca8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	795b      	ldrb	r3, [r3, #5]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e045      	b.n	8005caa <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fa8f 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	2b84      	cmp	r3, #132	; 0x84
 8005c2e:	d002      	beq.n	8005c36 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	2b94      	cmp	r3, #148	; 0x94
 8005c34:	d103      	bne.n	8005c3e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	711a      	strb	r2, [r3, #4]
 8005c3c:	e002      	b.n	8005c44 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c44:	f7ff fe42 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c48:	7afb      	ldrb	r3, [r7, #11]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f9cd 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	82bb      	strh	r3, [r7, #20]
 8005c56:	e00a      	b.n	8005c6e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005c58:	8abb      	ldrh	r3, [r7, #20]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f9c2 	bl	8005fec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c68:	8abb      	ldrh	r3, [r7, #20]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	82bb      	strh	r3, [r7, #20]
 8005c6e:	8aba      	ldrh	r2, [r7, #20]
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3f0      	bcc.n	8005c58 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c76:	f7ff fe19 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b84      	cmp	r3, #132	; 0x84
 8005c7e:	d002      	beq.n	8005c86 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fa85 	bl	8006190 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
 8005c92:	e001      	b.n	8005c98 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	715a      	strb	r2, [r3, #5]

    return status;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	e000      	b.n	8005caa <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	72fb      	strb	r3, [r7, #11]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	799b      	ldrb	r3, [r3, #6]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d13d      	bne.n	8005d50 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	795b      	ldrb	r3, [r3, #5]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e038      	b.n	8005d52 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa2e 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005cec:	f7ff fdee 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f979 	bl	8005fec <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f975 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	82fb      	strh	r3, [r7, #22]
 8005d06:	e009      	b.n	8005d1c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f9c4 	bl	8006098 <SUBGHZSPI_Receive>
      pData++;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	82fb      	strh	r3, [r7, #22]
 8005d1c:	8afa      	ldrh	r2, [r7, #22]
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d3f1      	bcc.n	8005d08 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d24:	f7ff fdc2 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fa31 	bl	8006190 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e001      	b.n	8005d40 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	715a      	strb	r2, [r3, #5]

    return status;
 8005d4c:	7ffb      	ldrb	r3, [r7, #31]
 8005d4e:	e000      	b.n	8005d52 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d50:	2302      	movs	r3, #2
  }
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	461a      	mov	r2, r3
 8005d66:	460b      	mov	r3, r1
 8005d68:	72fb      	strb	r3, [r7, #11]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	799b      	ldrb	r3, [r3, #6]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d13e      	bne.n	8005df6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	795b      	ldrb	r3, [r3, #5]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e039      	b.n	8005df8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f9dc 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d90:	f7ff fd9c 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005d94:	210e      	movs	r1, #14
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f928 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f923 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	82bb      	strh	r3, [r7, #20]
 8005daa:	e00a      	b.n	8005dc2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005dac:	8abb      	ldrh	r3, [r7, #20]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f918 	bl	8005fec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005dbc:	8abb      	ldrh	r3, [r7, #20]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	82bb      	strh	r3, [r7, #20]
 8005dc2:	8aba      	ldrh	r2, [r7, #20]
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3f0      	bcc.n	8005dac <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005dca:	f7ff fd6f 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f9de 	bl	8006190 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
 8005de0:	e001      	b.n	8005de6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	715a      	strb	r2, [r3, #5]

    return status;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	e000      	b.n	8005df8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
  }
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	72fb      	strb	r3, [r7, #11]
 8005e10:	4613      	mov	r3, r2
 8005e12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	799b      	ldrb	r3, [r3, #6]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d141      	bne.n	8005ea6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	795b      	ldrb	r3, [r3, #5]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e03c      	b.n	8005ea8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f987 	bl	8006148 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e3a:	f7ff fd47 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005e3e:	211e      	movs	r1, #30
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f8d3 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f8ce 	bl	8005fec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005e50:	2100      	movs	r1, #0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f8ca 	bl	8005fec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	82fb      	strh	r3, [r7, #22]
 8005e5c:	e009      	b.n	8005e72 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f919 	bl	8006098 <SUBGHZSPI_Receive>
      pData++;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005e6c:	8afb      	ldrh	r3, [r7, #22]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	82fb      	strh	r3, [r7, #22]
 8005e72:	8afa      	ldrh	r2, [r7, #22]
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d3f1      	bcc.n	8005e5e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005e7a:	f7ff fd17 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f986 	bl	8006190 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e001      	b.n	8005e96 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	715a      	strb	r2, [r3, #5]

    return status;
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	e000      	b.n	8005ea8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
  }
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005eb8:	2300      	movs	r3, #0
 8005eba:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005ebc:	f107 020c 	add.w	r2, r7, #12
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	2112      	movs	r1, #18
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fef4 	bl	8005cb2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005eca:	7b3b      	ldrb	r3, [r7, #12]
 8005ecc:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005ece:	89fb      	ldrh	r3, [r7, #14]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	b21a      	sxth	r2, r3
 8005ed4:	7b7b      	ldrb	r3, [r7, #13]
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	b21b      	sxth	r3, r3
 8005edc:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f005 fb0d 	bl	800b508 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f005 fb12 	bl	800b524 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005f00:	89fb      	ldrh	r3, [r7, #14]
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f005 fb61 	bl	800b5d4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005f12:	89fb      	ldrh	r3, [r7, #14]
 8005f14:	08db      	lsrs	r3, r3, #3
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f005 fb66 	bl	800b5f0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f005 fb6b 	bl	800b60c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005f36:	89fb      	ldrh	r3, [r7, #14]
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f005 fb38 	bl	800b5b8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f005 faf3 	bl	800b540 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	09db      	lsrs	r3, r3, #7
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005f72:	2101      	movs	r1, #1
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f005 faf1 	bl	800b55c <HAL_SUBGHZ_CADStatusCallback>
 8005f7a:	e003      	b.n	8005f84 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f005 faec 	bl	800b55c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	0a5b      	lsrs	r3, r3, #9
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f005 fb01 	bl	800b598 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8005f96:	f107 020c 	add.w	r2, r7, #12
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fe28 	bl	8005bf4 <HAL_SUBGHZ_ExecSetCmd>
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fbe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005fc0:	4a09      	ldr	r2, [pc, #36]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005fc8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fcc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <SUBGHZSPI_Init+0x3c>)
 8005fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fdc:	6013      	str	r3, [r2, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	58010000 	.word	0x58010000

08005fec <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ffc:	4b23      	ldr	r3, [pc, #140]	; (800608c <SUBGHZSPI_Transmit+0xa0>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	0cdb      	lsrs	r3, r3, #19
 800600a:	2264      	movs	r2, #100	; 0x64
 800600c:	fb02 f303 	mul.w	r3, r2, r3
 8006010:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	609a      	str	r2, [r3, #8]
      break;
 8006022:	e008      	b.n	8006036 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3b01      	subs	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800602a:	4b19      	ldr	r3, [pc, #100]	; (8006090 <SUBGHZSPI_Transmit+0xa4>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d1ed      	bne.n	8006012 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <SUBGHZSPI_Transmit+0xa8>)
 8006038:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006040:	4b12      	ldr	r3, [pc, #72]	; (800608c <SUBGHZSPI_Transmit+0xa0>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	0cdb      	lsrs	r3, r3, #19
 800604e:	2264      	movs	r2, #100	; 0x64
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d105      	bne.n	8006068 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	609a      	str	r2, [r3, #8]
      break;
 8006066:	e008      	b.n	800607a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <SUBGHZSPI_Transmit+0xa4>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d1ed      	bne.n	8006056 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <SUBGHZSPI_Transmit+0xa4>)
 800607c:	68db      	ldr	r3, [r3, #12]

  return status;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000fa4 	.word	0x20000fa4
 8006090:	58010000 	.word	0x58010000
 8006094:	5801000c 	.word	0x5801000c

08006098 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <SUBGHZSPI_Receive+0xa4>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	0cdb      	lsrs	r3, r3, #19
 80060b4:	2264      	movs	r2, #100	; 0x64
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	609a      	str	r2, [r3, #8]
      break;
 80060cc:	e008      	b.n	80060e0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <SUBGHZSPI_Receive+0xa8>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d1ed      	bne.n	80060bc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80060e0:	4b18      	ldr	r3, [pc, #96]	; (8006144 <SUBGHZSPI_Receive+0xac>)
 80060e2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	22ff      	movs	r2, #255	; 0xff
 80060e8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <SUBGHZSPI_Receive+0xa4>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	0cdb      	lsrs	r3, r3, #19
 80060f8:	2264      	movs	r2, #100	; 0x64
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d105      	bne.n	8006112 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	609a      	str	r2, [r3, #8]
      break;
 8006110:	e008      	b.n	8006124 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3b01      	subs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <SUBGHZSPI_Receive+0xa8>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d1ed      	bne.n	8006100 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <SUBGHZSPI_Receive+0xa8>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	701a      	strb	r2, [r3, #0]

  return status;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000fa4 	.word	0x20000fa4
 8006140:	58010000 	.word	0x58010000
 8006144:	5801000c 	.word	0x5801000c

08006148 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d111      	bne.n	800617c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <SUBGHZ_CheckDeviceReady+0x44>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006168:	f7ff fbb0 	bl	80058cc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b01      	subs	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f9      	bne.n	800616c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006178:	f7ff fb98 	bl	80058ac <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f807 	bl	8006190 <SUBGHZ_WaitOnBusy>
 8006182:	4603      	mov	r3, r0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000fa4 	.word	0x20000fa4

08006190 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <SUBGHZ_WaitOnBusy+0x58>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	0d1b      	lsrs	r3, r3, #20
 80061aa:	2264      	movs	r2, #100	; 0x64
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80061b2:	f7ff fbb9 	bl	8005928 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80061b6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e009      	b.n	80061de <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80061d0:	f7ff fb98 	bl	8005904 <LL_PWR_IsActiveFlag_RFBUSYS>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4013      	ands	r3, r2
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d0e9      	beq.n	80061b2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000fa4 	.word	0x20000fa4

080061ec <LL_RCC_GetUSARTClockSource>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	401a      	ands	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	4313      	orrs	r3, r2
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <LL_RCC_GetLPUARTClockSource>:
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4013      	ands	r3, r2
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e042      	b.n	80062c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fc f984 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fc4b 	bl	8006b0c <UART_SetConfig>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e022      	b.n	80062c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 feb3 	bl	8006ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 ff39 	bl	8007136 <UART_CheckIdleState>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d142      	bne.n	800636e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_UART_Receive_IT+0x24>
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e03b      	b.n	8006370 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UART_Receive_IT+0x36>
 8006302:	2302      	movs	r3, #2
 8006304:	e034      	b.n	8006370 <HAL_UART_Receive_IT+0xa0>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_UART_Receive_IT+0xa8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01f      	beq.n	800635e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d018      	beq.n	800635e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	613b      	str	r3, [r7, #16]
   return(result);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	69f9      	ldr	r1, [r7, #28]
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	61bb      	str	r3, [r7, #24]
   return(result);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	461a      	mov	r2, r3
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fff9 	bl	800735c <UART_Start_Receive_IT>
 800636a:	4603      	mov	r3, r0
 800636c:	e000      	b.n	8006370 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3728      	adds	r7, #40	; 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40008000 	.word	0x40008000

0800637c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006390:	2b20      	cmp	r3, #32
 8006392:	d17a      	bne.n	800648a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_UART_Transmit_DMA+0x24>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e073      	b.n	800648c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit_DMA+0x36>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e06c      	b.n	800648c <HAL_UART_Transmit_DMA+0x110>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2221      	movs	r2, #33	; 0x21
 80063dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02c      	beq.n	8006442 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <HAL_UART_Transmit_DMA+0x118>)
 80063ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <HAL_UART_Transmit_DMA+0x11c>)
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <HAL_UART_Transmit_DMA+0x120>)
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006404:	2200      	movs	r2, #0
 8006406:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	4619      	mov	r1, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3328      	adds	r3, #40	; 0x28
 8006418:	461a      	mov	r2, r3
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	f7fc fde0 	bl	8002fe0 <HAL_DMA_Start_IT>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2210      	movs	r2, #16
 800642a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e024      	b.n	800648c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2240      	movs	r2, #64	; 0x40
 8006448:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	613b      	str	r3, [r7, #16]
   return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	623a      	str	r2, [r7, #32]
 8006474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	6a3a      	ldr	r2, [r7, #32]
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3728      	adds	r7, #40	; 0x28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	080076f7 	.word	0x080076f7
 8006498:	08007791 	.word	0x08007791
 800649c:	080077ad 	.word	0x080077ad

080064a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b0ba      	sub	sp, #232	; 0xe8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ce:	4013      	ands	r3, r2
 80064d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11b      	bne.n	8006514 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 82d6 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
      }
      return;
 8006512:	e2d0      	b.n	8006ab6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 811f 	beq.w	800675c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800651e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006522:	4b8b      	ldr	r3, [pc, #556]	; (8006750 <HAL_UART_IRQHandler+0x2b0>)
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800652a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800652e:	4b89      	ldr	r3, [pc, #548]	; (8006754 <HAL_UART_IRQHandler+0x2b4>)
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8112 	beq.w	800675c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d011      	beq.n	8006568 <HAL_UART_IRQHandler+0xc8>
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d011      	beq.n	8006598 <HAL_UART_IRQHandler+0xf8>
 8006574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658e:	f043 0204 	orr.w	r2, r3, #4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d011      	beq.n	80065c8 <HAL_UART_IRQHandler+0x128>
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2204      	movs	r2, #4
 80065b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065be:	f043 0202 	orr.w	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d017      	beq.n	8006604 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065e4:	4b5a      	ldr	r3, [pc, #360]	; (8006750 <HAL_UART_IRQHandler+0x2b0>)
 80065e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2208      	movs	r2, #8
 80065f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660c:	2b00      	cmp	r3, #0
 800660e:	d012      	beq.n	8006636 <HAL_UART_IRQHandler+0x196>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 823c 	beq.w	8006aba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d013      	beq.n	8006676 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800665a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800667c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d005      	beq.n	800669a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800668e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04f      	beq.n	800673a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 ffc6 	bl	800762c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d141      	bne.n	8006732 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1d9      	bne.n	80066ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006706:	4a14      	ldr	r2, [pc, #80]	; (8006758 <HAL_UART_IRQHandler+0x2b8>)
 8006708:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	4618      	mov	r0, r3
 8006710:	f7fc fd42 	bl	8003198 <HAL_DMA_Abort_IT>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d017      	beq.n	800674a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e00f      	b.n	800674a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9d9 	bl	8006ae2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00b      	b.n	800674a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9d5 	bl	8006ae2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e007      	b.n	800674a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9d1 	bl	8006ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006748:	e1b7      	b.n	8006aba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674a:	bf00      	nop
    return;
 800674c:	e1b5      	b.n	8006aba <HAL_UART_IRQHandler+0x61a>
 800674e:	bf00      	nop
 8006750:	10000001 	.word	0x10000001
 8006754:	04000120 	.word	0x04000120
 8006758:	0800782d 	.word	0x0800782d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b01      	cmp	r3, #1
 8006762:	f040 814a 	bne.w	80069fa <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8143 	beq.w	80069fa <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 813c 	beq.w	80069fa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2210      	movs	r2, #16
 8006788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	f040 80b5 	bne.w	8006904 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80067a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8187 	beq.w	8006abe <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ba:	429a      	cmp	r2, r3
 80067bc:	f080 817f 	bcs.w	8006abe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 8086 	bne.w	80068e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800680a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800681e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1da      	bne.n	80067dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3308      	adds	r3, #8
 8006846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800684a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800684e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800685c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e1      	bne.n	8006826 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800688c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e3      	bne.n	8006862 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b8:	f023 0310 	bic.w	r3, r3, #16
 80068bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80068cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e4      	bne.n	80068a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fc fbfa 	bl	80030dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8f9 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006902:	e0dc      	b.n	8006abe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80ce 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80c9 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e4      	bne.n	8006930 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	623b      	str	r3, [r7, #32]
   return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800698e:	633a      	str	r2, [r7, #48]	; 0x30
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e1      	bne.n	8006966 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	617b      	str	r3, [r7, #20]
   return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e4      	bne.n	80069b6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f87e 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80069f8:	e063      	b.n	8006ac2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <HAL_UART_IRQHandler+0x584>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fba3 	bl	8008168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a22:	e051      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d014      	beq.n	8006a5a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d03a      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
    }
    return;
 8006a58:	e035      	b.n	8006ac6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_UART_IRQHandler+0x5da>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fef0 	bl	8007858 <UART_EndTransmit_IT>
    return;
 8006a78:	e026      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <HAL_UART_IRQHandler+0x5fa>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fb7a 	bl	800818c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a98:	e016      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d010      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x628>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	da0c      	bge.n	8006ac8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fb63 	bl	800817a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ab4:	e008      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ab6:	bf00      	nop
 8006ab8:	e006      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
    return;
 8006aba:	bf00      	nop
 8006abc:	e004      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
      return;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <HAL_UART_IRQHandler+0x628>
    return;
 8006ac6:	bf00      	nop
  }
}
 8006ac8:	37e8      	adds	r7, #232	; 0xe8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop

08006ad0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
	...

08006b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b10:	b08c      	sub	sp, #48	; 0x30
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b94      	ldr	r3, [pc, #592]	; (8006d8c <UART_SetConfig+0x280>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a89      	ldr	r2, [pc, #548]	; (8006d90 <UART_SetConfig+0x284>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b74:	4313      	orrs	r3, r2
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	f023 010f 	bic.w	r1, r3, #15
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a7a      	ldr	r2, [pc, #488]	; (8006d94 <UART_SetConfig+0x288>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d127      	bne.n	8006c00 <UART_SetConfig+0xf4>
 8006bb0:	2003      	movs	r0, #3
 8006bb2:	f7ff fb1b 	bl	80061ec <LL_RCC_GetUSARTClockSource>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d81b      	bhi.n	8006bf8 <UART_SetConfig+0xec>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <UART_SetConfig+0xbc>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006bf1 	.word	0x08006bf1
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e080      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006be0:	2302      	movs	r3, #2
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e07c      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006be8:	2304      	movs	r3, #4
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e078      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf6:	e074      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e070      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a64      	ldr	r2, [pc, #400]	; (8006d98 <UART_SetConfig+0x28c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d138      	bne.n	8006c7c <UART_SetConfig+0x170>
 8006c0a:	200c      	movs	r0, #12
 8006c0c:	f7ff faee 	bl	80061ec <LL_RCC_GetUSARTClockSource>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d82c      	bhi.n	8006c74 <UART_SetConfig+0x168>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0x114>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006c75 	.word	0x08006c75
 8006c2c:	08006c75 	.word	0x08006c75
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006c75 	.word	0x08006c75
 8006c38:	08006c75 	.word	0x08006c75
 8006c3c:	08006c75 	.word	0x08006c75
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c6d 	.word	0x08006c6d
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e042      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e03e      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e03a      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e036      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e032      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a43      	ldr	r2, [pc, #268]	; (8006d90 <UART_SetConfig+0x284>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d12a      	bne.n	8006cdc <UART_SetConfig+0x1d0>
 8006c86:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c8a:	f7ff fac1 	bl	8006210 <LL_RCC_GetLPUARTClockSource>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c94:	d01a      	beq.n	8006ccc <UART_SetConfig+0x1c0>
 8006c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9a:	d81b      	bhi.n	8006cd4 <UART_SetConfig+0x1c8>
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca0:	d00c      	beq.n	8006cbc <UART_SetConfig+0x1b0>
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca6:	d815      	bhi.n	8006cd4 <UART_SetConfig+0x1c8>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <UART_SetConfig+0x1a8>
 8006cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb0:	d008      	beq.n	8006cc4 <UART_SetConfig+0x1b8>
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x1c8>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e012      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e00e      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e00a      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd2:	e006      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e002      	b.n	8006ce2 <UART_SetConfig+0x1d6>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2a      	ldr	r2, [pc, #168]	; (8006d90 <UART_SetConfig+0x284>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	f040 80a4 	bne.w	8006e36 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d823      	bhi.n	8006d3e <UART_SetConfig+0x232>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x1f0>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d3f 	.word	0x08006d3f
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d2f 	.word	0x08006d2f
 8006d10:	08006d3f 	.word	0x08006d3f
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	08006d3f 	.word	0x08006d3f
 8006d1c:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fd ff48 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d26:	e010      	b.n	8006d4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <UART_SetConfig+0x290>)
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d2c:	e00d      	b.n	8006d4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd fe8d 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006d32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d34:	e009      	b.n	8006d4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d3c:	e005      	b.n	8006d4a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8137 	beq.w	8006fc0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <UART_SetConfig+0x294>)
 8006d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d305      	bcc.n	8006d82 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d910      	bls.n	8006da4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d88:	e11a      	b.n	8006fc0 <UART_SetConfig+0x4b4>
 8006d8a:	bf00      	nop
 8006d8c:	cfff69f3 	.word	0xcfff69f3
 8006d90:	40008000 	.word	0x40008000
 8006d94:	40013800 	.word	0x40013800
 8006d98:	40004400 	.word	0x40004400
 8006d9c:	00f42400 	.word	0x00f42400
 8006da0:	080122d0 	.word	0x080122d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	2200      	movs	r2, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	60fa      	str	r2, [r7, #12]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	4a8e      	ldr	r2, [pc, #568]	; (8006fec <UART_SetConfig+0x4e0>)
 8006db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2200      	movs	r2, #0
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dc6:	f7f9 ff37 	bl	8000c38 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	020b      	lsls	r3, r1, #8
 8006ddc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006de0:	0202      	lsls	r2, r0, #8
 8006de2:	6979      	ldr	r1, [r7, #20]
 8006de4:	6849      	ldr	r1, [r1, #4]
 8006de6:	0849      	lsrs	r1, r1, #1
 8006de8:	2000      	movs	r0, #0
 8006dea:	460c      	mov	r4, r1
 8006dec:	4605      	mov	r5, r0
 8006dee:	eb12 0804 	adds.w	r8, r2, r4
 8006df2:	eb43 0905 	adc.w	r9, r3, r5
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	4693      	mov	fp, r2
 8006e00:	4652      	mov	r2, sl
 8006e02:	465b      	mov	r3, fp
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 ff16 	bl	8000c38 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4613      	mov	r3, r2
 8006e12:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1a:	d308      	bcc.n	8006e2e <UART_SetConfig+0x322>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d204      	bcs.n	8006e2e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e0c8      	b.n	8006fc0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e34:	e0c4      	b.n	8006fc0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3e:	d168      	bne.n	8006f12 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d828      	bhi.n	8006e9a <UART_SetConfig+0x38e>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x344>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	08006e9b 	.word	0x08006e9b
 8006e60:	08006e8b 	.word	0x08006e8b
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006e9b 	.word	0x08006e9b
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006e93 	.word	0x08006e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fd fe9e 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8006e78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e7a:	e014      	b.n	8006ea6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7c:	f7fd feac 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e82:	e010      	b.n	8006ea6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e84:	4b5a      	ldr	r3, [pc, #360]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e88:	e00d      	b.n	8006ea6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fd fddf 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e98:	e005      	b.n	8006ea6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8089 	beq.w	8006fc0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	4a4e      	ldr	r2, [pc, #312]	; (8006fec <UART_SetConfig+0x4e0>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2b0f      	cmp	r3, #15
 8006eda:	d916      	bls.n	8006f0a <UART_SetConfig+0x3fe>
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee2:	d212      	bcs.n	8006f0a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f023 030f 	bic.w	r3, r3, #15
 8006eec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	8bfb      	ldrh	r3, [r7, #30]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	8bfa      	ldrh	r2, [r7, #30]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e05a      	b.n	8006fc0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f10:	e056      	b.n	8006fc0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d827      	bhi.n	8006f6a <UART_SetConfig+0x45e>
 8006f1a:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x414>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	08006f6b 	.word	0x08006f6b
 8006f30:	08006f5b 	.word	0x08006f5b
 8006f34:	08006f6b 	.word	0x08006f6b
 8006f38:	08006f6b 	.word	0x08006f6b
 8006f3c:	08006f6b 	.word	0x08006f6b
 8006f40:	08006f63 	.word	0x08006f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fd fe36 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f4a:	e014      	b.n	8006f76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7fd fe44 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f52:	e010      	b.n	8006f76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f54:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <UART_SetConfig+0x4e4>)
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f58:	e00d      	b.n	8006f76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5a:	f7fd fd77 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8006f5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f60:	e009      	b.n	8006f76 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f68:	e005      	b.n	8006f76 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f74:	bf00      	nop
    }

    if (pclk != 0U)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d021      	beq.n	8006fc0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <UART_SetConfig+0x4e0>)
 8006f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	441a      	add	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2b0f      	cmp	r3, #15
 8006fa6:	d908      	bls.n	8006fba <UART_SetConfig+0x4ae>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fae:	d204      	bcs.n	8006fba <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a3a      	ldr	r2, [r7, #32]
 8006fb6:	60da      	str	r2, [r3, #12]
 8006fb8:	e002      	b.n	8006fc0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006fdc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3730      	adds	r7, #48	; 0x30
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	080122d0 	.word	0x080122d0
 8006ff0:	00f42400 	.word	0x00f42400

08006ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01a      	beq.n	800710a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f2:	d10a      	bne.n	800710a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr

08007136 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af02      	add	r7, sp, #8
 800713c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007146:	f7fa fdcd 	bl	8001ce4 <HAL_GetTick>
 800714a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d10e      	bne.n	8007178 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f82f 	bl	80071cc <UART_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e025      	b.n	80071c4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b04      	cmp	r3, #4
 8007184:	d10e      	bne.n	80071a4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007186:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f819 	bl	80071cc <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e00f      	b.n	80071c4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b09c      	sub	sp, #112	; 0x70
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071dc:	e0a9      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e4:	f000 80a5 	beq.w	8007332 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e8:	f7fa fd7c 	bl	8001ce4 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <UART_WaitOnFlagUntilTimeout+0x32>
 80071f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d140      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007212:	667b      	str	r3, [r7, #100]	; 0x64
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800721e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800722a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3308      	adds	r3, #8
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	f023 0301 	bic.w	r3, r3, #1
 8007246:	663b      	str	r3, [r7, #96]	; 0x60
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007250:	64ba      	str	r2, [r7, #72]	; 0x48
 8007252:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800725e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e5      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e069      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d051      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729c:	d149      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
 80072c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072fa:	623a      	str	r2, [r7, #32]
 80072fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	61bb      	str	r3, [r7, #24]
   return(result);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e010      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	bf0c      	ite	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	2300      	movne	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	429a      	cmp	r2, r3
 800734e:	f43f af46 	beq.w	80071de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3770      	adds	r7, #112	; 0x70
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800735c:	b480      	push	{r7}
 800735e:	b0a3      	sub	sp, #140	; 0x8c
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738e:	d10e      	bne.n	80073ae <UART_Start_Receive_IT+0x52>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <UART_Start_Receive_IT+0x48>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800739e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073a2:	e02d      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	22ff      	movs	r2, #255	; 0xff
 80073a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073ac:	e028      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <UART_Start_Receive_IT+0x76>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <UART_Start_Receive_IT+0x6c>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c6:	e01b      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	227f      	movs	r2, #127	; 0x7f
 80073cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073d0:	e016      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073da:	d10d      	bne.n	80073f8 <UART_Start_Receive_IT+0x9c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <UART_Start_Receive_IT+0x92>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	227f      	movs	r2, #127	; 0x7f
 80073e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073ec:	e008      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	223f      	movs	r2, #63	; 0x3f
 80073f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073f6:	e003      	b.n	8007400 <UART_Start_Receive_IT+0xa4>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2222      	movs	r2, #34	; 0x22
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007434:	673a      	str	r2, [r7, #112]	; 0x70
 8007436:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800743a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e3      	bne.n	8007410 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d153      	bne.n	80074fa <UART_Start_Receive_IT+0x19e>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	429a      	cmp	r2, r3
 800745c:	d34d      	bcc.n	80074fa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	d107      	bne.n	8007478 <UART_Start_Receive_IT+0x11c>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a4a      	ldr	r2, [pc, #296]	; (800759c <UART_Start_Receive_IT+0x240>)
 8007474:	671a      	str	r2, [r3, #112]	; 0x70
 8007476:	e002      	b.n	800747e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a49      	ldr	r2, [pc, #292]	; (80075a0 <UART_Start_Receive_IT+0x244>)
 800747c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01a      	beq.n	80074c4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800749c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80074e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80074e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_Start_Receive_IT+0x168>
 80074f8:	e04a      	b.n	8007590 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d107      	bne.n	8007514 <UART_Start_Receive_IT+0x1b8>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a25      	ldr	r2, [pc, #148]	; (80075a4 <UART_Start_Receive_IT+0x248>)
 8007510:	671a      	str	r2, [r3, #112]	; 0x70
 8007512:	e002      	b.n	800751a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <UART_Start_Receive_IT+0x24c>)
 8007518:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d019      	beq.n	800755e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800753e:	677b      	str	r3, [r7, #116]	; 0x74
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
 800754a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800754e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_Start_Receive_IT+0x1ce>
 800755c:	e018      	b.n	8007590 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f043 0320 	orr.w	r3, r3, #32
 8007572:	67bb      	str	r3, [r7, #120]	; 0x78
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69f9      	ldr	r1, [r7, #28]
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	61bb      	str	r3, [r7, #24]
   return(result);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	378c      	adds	r7, #140	; 0x8c
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	08007e69 	.word	0x08007e69
 80075a0:	08007b71 	.word	0x08007b71
 80075a4:	08007a0f 	.word	0x08007a0f
 80075a8:	080078af 	.word	0x080078af

080075ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b08f      	sub	sp, #60	; 0x3c
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e6      	bne.n	80075b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	61ba      	str	r2, [r7, #24]
 8007608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	613b      	str	r3, [r7, #16]
   return(result);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007622:	bf00      	nop
 8007624:	373c      	adds	r7, #60	; 0x3c
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr

0800762c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b095      	sub	sp, #84	; 0x54
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	643b      	str	r3, [r7, #64]	; 0x40
 8007654:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	61fb      	str	r3, [r7, #28]
   return(result);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	64bb      	str	r3, [r7, #72]	; 0x48
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e3      	bne.n	8007666 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d118      	bne.n	80076d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 0310 	bic.w	r3, r3, #16
 80076ba:	647b      	str	r3, [r7, #68]	; 0x44
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	613b      	str	r3, [r7, #16]
   return(result);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 80076ec:	bf00      	nop
 80076ee:	3754      	adds	r7, #84	; 0x54
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr

080076f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b090      	sub	sp, #64	; 0x40
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d137      	bne.n	8007782 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	2200      	movs	r2, #0
 8007716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800771a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	623b      	str	r3, [r7, #32]
   return(result);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
 8007732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773a:	633a      	str	r2, [r7, #48]	; 0x30
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e5      	bne.n	800771a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800774e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	60fb      	str	r3, [r7, #12]
   return(result);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	69b9      	ldr	r1, [r7, #24]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	617b      	str	r3, [r7, #20]
   return(result);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e6      	bne.n	800774e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007780:	e002      	b.n	8007788 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007782:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007784:	f7fb f858 	bl	8002838 <HAL_UART_TxCpltCallback>
}
 8007788:	bf00      	nop
 800778a:	3740      	adds	r7, #64	; 0x40
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff f996 	bl	8006ad0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d109      	bne.n	80077ec <UART_DMAError+0x40>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b21      	cmp	r3, #33	; 0x21
 80077dc:	d106      	bne.n	80077ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff fee0 	bl	80075ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d109      	bne.n	800780e <UART_DMAError+0x62>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b22      	cmp	r3, #34	; 0x22
 80077fe:	d106      	bne.n	800780e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2200      	movs	r2, #0
 8007804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007808:	6978      	ldr	r0, [r7, #20]
 800780a:	f7ff ff0f 	bl	800762c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007814:	f043 0210 	orr.w	r2, r3, #16
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800781e:	6978      	ldr	r0, [r7, #20]
 8007820:	f7ff f95f 	bl	8006ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007824:	bf00      	nop
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff f949 	bl	8006ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	60bb      	str	r3, [r7, #8]
   return(result);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e6      	bne.n	8007860 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fa ffc9 	bl	8002838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a6:	bf00      	nop
 80078a8:	3720      	adds	r7, #32
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b096      	sub	sp, #88	; 0x58
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c6:	2b22      	cmp	r3, #34	; 0x22
 80078c8:	f040 8095 	bne.w	80079f6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80078da:	b2d9      	uxtb	r1, r3
 80078dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	400a      	ands	r2, r1
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d178      	bne.n	8007a06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007932:	647b      	str	r3, [r7, #68]	; 0x44
 8007934:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e6      	bne.n	8007914 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	623b      	str	r3, [r7, #32]
   return(result);
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d12e      	bne.n	80079ee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b4:	61fb      	str	r3, [r7, #28]
 80079b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	69b9      	ldr	r1, [r7, #24]
 80079ba:	69fa      	ldr	r2, [r7, #28]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	617b      	str	r3, [r7, #20]
   return(result);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d103      	bne.n	80079de <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff f884 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ec:	e00b      	b.n	8007a06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa ff38 	bl	8002864 <HAL_UART_RxCpltCallback>
}
 80079f4:	e007      	b.n	8007a06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0208 	orr.w	r2, r2, #8
 8007a04:	619a      	str	r2, [r3, #24]
}
 8007a06:	bf00      	nop
 8007a08:	3758      	adds	r7, #88	; 0x58
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b096      	sub	sp, #88	; 0x58
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	2b22      	cmp	r3, #34	; 0x22
 8007a28:	f040 8095 	bne.w	8007b56 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a3c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a44:	4013      	ands	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	1c9a      	adds	r2, r3, #2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d178      	bne.n	8007b66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
 8007a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d12e      	bne.n	8007b4e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f023 0310 	bic.w	r3, r3, #16
 8007b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	613b      	str	r3, [r7, #16]
   return(result);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d103      	bne.n	8007b3e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe ffd4 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b4c:	e00b      	b.n	8007b66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fa fe88 	bl	8002864 <HAL_UART_RxCpltCallback>
}
 8007b54:	e007      	b.n	8007b66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0208 	orr.w	r2, r2, #8
 8007b64:	619a      	str	r2, [r3, #24]
}
 8007b66:	bf00      	nop
 8007b68:	3758      	adds	r7, #88	; 0x58
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b0a6      	sub	sp, #152	; 0x98
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b7e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	2b22      	cmp	r3, #34	; 0x22
 8007ba8:	f040 814f 	bne.w	8007e4a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bb2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bb6:	e0f6      	b.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bc2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007bc6:	b2d9      	uxtb	r1, r3
 8007bc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	400a      	ands	r2, r1
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d053      	beq.n	8007cb2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d011      	beq.n	8007c3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00b      	beq.n	8007c3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c30:	f043 0201 	orr.w	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d011      	beq.n	8007c6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2202      	movs	r2, #2
 8007c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c60:	f043 0204 	orr.w	r2, r3, #4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d011      	beq.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2204      	movs	r2, #4
 8007c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c90:	f043 0202 	orr.w	r2, r3, #2
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fe ff1c 	bl	8006ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d173      	bne.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ce2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e4      	bne.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d18:	657a      	str	r2, [r7, #84]	; 0x54
 8007d1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e3      	bne.n	8007cf4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d12e      	bne.n	8007da0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f023 0310 	bic.w	r3, r3, #16
 8007d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d66:	643b      	str	r3, [r7, #64]	; 0x40
 8007d68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d103      	bne.n	8007d90 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2210      	movs	r2, #16
 8007d8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe feab 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
 8007d9e:	e002      	b.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fa fd5f 	bl	8002864 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d006      	beq.n	8007dbc <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f47f aefe 	bne.w	8007bb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dc6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d045      	beq.n	8007e5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d23e      	bcs.n	8007e5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3308      	adds	r3, #8
 8007de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df2:	673b      	str	r3, [r7, #112]	; 0x70
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a14      	ldr	r2, [pc, #80]	; (8007e64 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f043 0320 	orr.w	r3, r3, #32
 8007e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	613b      	str	r3, [r7, #16]
   return(result);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e48:	e007      	b.n	8007e5a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0208 	orr.w	r2, r2, #8
 8007e58:	619a      	str	r2, [r3, #24]
}
 8007e5a:	bf00      	nop
 8007e5c:	3798      	adds	r7, #152	; 0x98
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	080078af 	.word	0x080078af

08007e68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b0a8      	sub	sp, #160	; 0xa0
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e76:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9e:	2b22      	cmp	r3, #34	; 0x22
 8007ea0:	f040 8153 	bne.w	800814a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007eaa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eae:	e0fa      	b.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ec2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007ec6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007eca:	4013      	ands	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ed2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed8:	1c9a      	adds	r2, r3, #2
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d053      	beq.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d011      	beq.n	8007f36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2201      	movs	r2, #1
 8007f24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2c:	f043 0201 	orr.w	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2202      	movs	r2, #2
 8007f54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5c:	f043 0204 	orr.w	r2, r3, #4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2204      	movs	r2, #4
 8007f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8c:	f043 0202 	orr.w	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d006      	beq.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fe fd9e 	bl	8006ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d175      	bne.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fde:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e4      	bne.n	8007fba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008018:	65ba      	str	r2, [r7, #88]	; 0x58
 800801a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800801e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e1      	bne.n	8007ff0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d12e      	bne.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	f023 0310 	bic.w	r3, r3, #16
 800805c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008066:	647b      	str	r3, [r7, #68]	; 0x44
 8008068:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800806c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e6      	bne.n	8008048 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d103      	bne.n	8008090 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2210      	movs	r2, #16
 800808e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fe fd2b 	bl	8006af4 <HAL_UARTEx_RxEventCallback>
 800809e:	e002      	b.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fa fbdf 	bl	8002864 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x254>
 80080ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f47f aefa 	bne.w	8007eb0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d045      	beq.n	800815a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080d4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80080d8:	429a      	cmp	r2, r3
 80080da:	d23e      	bcs.n	800815a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3308      	adds	r3, #8
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	623b      	str	r3, [r7, #32]
   return(result);
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f2:	677b      	str	r3, [r7, #116]	; 0x74
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80080fc:	633a      	str	r2, [r7, #48]	; 0x30
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e5      	bne.n	80080dc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a14      	ldr	r2, [pc, #80]	; (8008164 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008114:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60fb      	str	r3, [r7, #12]
   return(result);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f043 0320 	orr.w	r3, r3, #32
 800812a:	673b      	str	r3, [r7, #112]	; 0x70
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008148:	e007      	b.n	800815a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699a      	ldr	r2, [r3, #24]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0208 	orr.w	r2, r2, #8
 8008158:	619a      	str	r2, [r3, #24]
}
 800815a:	bf00      	nop
 800815c:	37a0      	adds	r7, #160	; 0xa0
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	08007a0f 	.word	0x08007a0f

08008168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr

0800817a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr

0800818c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr

0800819e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b088      	sub	sp, #32
 80081a2:	af02      	add	r7, sp, #8
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e046      	b.n	800824c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2224      	movs	r2, #36	; 0x24
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0201 	bic.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80081f8:	1d3b      	adds	r3, r7, #4
 80081fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f911 	bl	8008426 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008214:	f7f9 fd66 	bl	8001ce4 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800821a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2200      	movs	r2, #0
 8008224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7fe ffcf 	bl	80071cc <UART_WaitOnFlagUntilTimeout>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	75fb      	strb	r3, [r7, #23]
 8008238:	e003      	b.n	8008242 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b089      	sub	sp, #36	; 0x24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_UARTEx_EnableStopMode+0x16>
 8008266:	2302      	movs	r3, #2
 8008268:	e021      	b.n	80082ae <HAL_UARTEx_EnableStopMode+0x5a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f043 0302 	orr.w	r3, r3, #2
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3724      	adds	r7, #36	; 0x24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UARTEx_EnableFifoMode+0x16>
 80082ca:	2302      	movs	r3, #2
 80082cc:	e02b      	b.n	8008326 <HAL_UARTEx_EnableFifoMode+0x6e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2224      	movs	r2, #36	; 0x24
 80082da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f8ac 	bl	800846c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008342:	2302      	movs	r3, #2
 8008344:	e02d      	b.n	80083a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2224      	movs	r2, #36	; 0x24
 8008352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f872 	bl	800846c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083be:	2302      	movs	r3, #2
 80083c0:	e02d      	b.n	800841e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2224      	movs	r2, #36	; 0x24
 80083ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0201 	bic.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f834 	bl	800846c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f023 0210 	bic.w	r2, r3, #16
 800843e:	893b      	ldrh	r3, [r7, #8]
 8008440:	4619      	mov	r1, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8008454:	7abb      	ldrb	r3, [r7, #10]
 8008456:	061a      	lsls	r2, r3, #24
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	605a      	str	r2, [r3, #4]
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
	...

0800846c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008478:	2b00      	cmp	r3, #0
 800847a:	d108      	bne.n	800848e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800848c:	e031      	b.n	80084f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800848e:	2308      	movs	r3, #8
 8008490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008492:	2308      	movs	r3, #8
 8008494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	0e5b      	lsrs	r3, r3, #25
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0f5b      	lsrs	r3, r3, #29
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	7b3a      	ldrb	r2, [r7, #12]
 80084ba:	4910      	ldr	r1, [pc, #64]	; (80084fc <UARTEx_SetNbDataToProcess+0x90>)
 80084bc:	5c8a      	ldrb	r2, [r1, r2]
 80084be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084c2:	7b3a      	ldrb	r2, [r7, #12]
 80084c4:	490e      	ldr	r1, [pc, #56]	; (8008500 <UARTEx_SetNbDataToProcess+0x94>)
 80084c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	7b7a      	ldrb	r2, [r7, #13]
 80084d8:	4908      	ldr	r1, [pc, #32]	; (80084fc <UARTEx_SetNbDataToProcess+0x90>)
 80084da:	5c8a      	ldrb	r2, [r1, r2]
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e0:	7b7a      	ldrb	r2, [r7, #13]
 80084e2:	4907      	ldr	r1, [pc, #28]	; (8008500 <UARTEx_SetNbDataToProcess+0x94>)
 80084e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr
 80084fc:	080122e8 	.word	0x080122e8
 8008500:	080122f0 	.word	0x080122f0

08008504 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af02      	add	r7, sp, #8
 800850a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800850c:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <RadioInit+0x9c>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008512:	4b24      	ldr	r3, [pc, #144]	; (80085a4 <RadioInit+0xa0>)
 8008514:	2200      	movs	r2, #0
 8008516:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008518:	4b22      	ldr	r3, [pc, #136]	; (80085a4 <RadioInit+0xa0>)
 800851a:	2200      	movs	r2, #0
 800851c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800851e:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <RadioInit+0xa0>)
 8008520:	2200      	movs	r2, #0
 8008522:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <RadioInit+0xa0>)
 8008526:	2200      	movs	r2, #0
 8008528:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 800852a:	481f      	ldr	r0, [pc, #124]	; (80085a8 <RadioInit+0xa4>)
 800852c:	f001 ff88 	bl	800a440 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008530:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <RadioInit+0xa0>)
 8008532:	2200      	movs	r2, #0
 8008534:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008536:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <RadioInit+0xa0>)
 8008538:	2200      	movs	r2, #0
 800853a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800853c:	f002 fa16 	bl	800a96c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008540:	2100      	movs	r1, #0
 8008542:	2000      	movs	r0, #0
 8008544:	f002 fdde 	bl	800b104 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008548:	2204      	movs	r2, #4
 800854a:	2100      	movs	r1, #0
 800854c:	2001      	movs	r0, #1
 800854e:	f002 fb9b 	bl	800ac88 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800855a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800855e:	f002 facb 	bl	800aaf8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8008562:	f000 fe83 	bl	800926c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008566:	2300      	movs	r3, #0
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <RadioInit+0xa8>)
 800856c:	2200      	movs	r2, #0
 800856e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008572:	480f      	ldr	r0, [pc, #60]	; (80085b0 <RadioInit+0xac>)
 8008574:	f004 fa2a 	bl	800c9cc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <RadioInit+0xb0>)
 800857e:	2200      	movs	r2, #0
 8008580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008584:	480c      	ldr	r0, [pc, #48]	; (80085b8 <RadioInit+0xb4>)
 8008586:	f004 fa21 	bl	800c9cc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800858a:	4809      	ldr	r0, [pc, #36]	; (80085b0 <RadioInit+0xac>)
 800858c:	f004 fac2 	bl	800cb14 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008590:	4809      	ldr	r0, [pc, #36]	; (80085b8 <RadioInit+0xb4>)
 8008592:	f004 fabf 	bl	800cb14 <UTIL_TIMER_Stop>
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20001414 	.word	0x20001414
 80085a4:	20001418 	.word	0x20001418
 80085a8:	08009659 	.word	0x08009659
 80085ac:	080095e1 	.word	0x080095e1
 80085b0:	20001474 	.word	0x20001474
 80085b4:	080095f5 	.word	0x080095f5
 80085b8:	2000148c 	.word	0x2000148c

080085bc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80085c0:	f001 ff80 	bl	800a4c4 <SUBGRF_GetOperatingMode>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	d00a      	beq.n	80085e0 <RadioGetStatus+0x24>
 80085ca:	2b07      	cmp	r3, #7
 80085cc:	dc0a      	bgt.n	80085e4 <RadioGetStatus+0x28>
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d002      	beq.n	80085d8 <RadioGetStatus+0x1c>
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d002      	beq.n	80085dc <RadioGetStatus+0x20>
 80085d6:	e005      	b.n	80085e4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80085d8:	2302      	movs	r3, #2
 80085da:	e004      	b.n	80085e6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80085dc:	2301      	movs	r3, #1
 80085de:	e002      	b.n	80085e6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e000      	b.n	80085e6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80085e4:	2300      	movs	r3, #0
    }
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80085f6:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <RadioSetModem+0xb4>)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	4618      	mov	r0, r3
 8008600:	f003 f943 	bl	800b88a <RFW_SetRadioModem>
    switch( modem )
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b05      	cmp	r3, #5
 8008608:	d80e      	bhi.n	8008628 <RadioSetModem+0x3c>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <RadioSetModem+0x24>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008637 	.word	0x08008637
 8008614:	08008645 	.word	0x08008645
 8008618:	08008629 	.word	0x08008629
 800861c:	0800866b 	.word	0x0800866b
 8008620:	08008679 	.word	0x08008679
 8008624:	08008687 	.word	0x08008687
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008628:	2003      	movs	r0, #3
 800862a:	f002 fb07 	bl	800ac3c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800862e:	4b1c      	ldr	r3, [pc, #112]	; (80086a0 <RadioSetModem+0xb4>)
 8008630:	2200      	movs	r2, #0
 8008632:	735a      	strb	r2, [r3, #13]
        break;
 8008634:	e02f      	b.n	8008696 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008636:	2000      	movs	r0, #0
 8008638:	f002 fb00 	bl	800ac3c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800863c:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <RadioSetModem+0xb4>)
 800863e:	2200      	movs	r2, #0
 8008640:	735a      	strb	r2, [r3, #13]
        break;
 8008642:	e028      	b.n	8008696 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008644:	2001      	movs	r0, #1
 8008646:	f002 faf9 	bl	800ac3c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800864a:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <RadioSetModem+0xb4>)
 800864c:	7b5a      	ldrb	r2, [r3, #13]
 800864e:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <RadioSetModem+0xb4>)
 8008650:	7b1b      	ldrb	r3, [r3, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d01e      	beq.n	8008694 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <RadioSetModem+0xb4>)
 8008658:	7b1a      	ldrb	r2, [r3, #12]
 800865a:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <RadioSetModem+0xb4>)
 800865c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800865e:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <RadioSetModem+0xb4>)
 8008660:	7b5b      	ldrb	r3, [r3, #13]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ff86 	bl	8009574 <RadioSetPublicNetwork>
        }
        break;
 8008668:	e014      	b.n	8008694 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800866a:	2002      	movs	r0, #2
 800866c:	f002 fae6 	bl	800ac3c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <RadioSetModem+0xb4>)
 8008672:	2200      	movs	r2, #0
 8008674:	735a      	strb	r2, [r3, #13]
        break;
 8008676:	e00e      	b.n	8008696 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008678:	2002      	movs	r0, #2
 800867a:	f002 fadf 	bl	800ac3c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <RadioSetModem+0xb4>)
 8008680:	2200      	movs	r2, #0
 8008682:	735a      	strb	r2, [r3, #13]
        break;
 8008684:	e007      	b.n	8008696 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008686:	2000      	movs	r0, #0
 8008688:	f002 fad8 	bl	800ac3c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <RadioSetModem+0xb4>)
 800868e:	2200      	movs	r2, #0
 8008690:	735a      	strb	r2, [r3, #13]
        break;
 8008692:	e000      	b.n	8008696 <RadioSetModem+0xaa>
        break;
 8008694:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001418 	.word	0x20001418

080086a4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 fa7f 	bl	800abb0 <SUBGRF_SetRfFrequency>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b090      	sub	sp, #64	; 0x40
 80086be:	af0a      	add	r7, sp, #40	; 0x28
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80086ca:	2301      	movs	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80086d6:	f000 fddc 	bl	8009292 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80086da:	2000      	movs	r0, #0
 80086dc:	f7ff ff86 	bl	80085ec <RadioSetModem>

    RadioSetChannel( freq );
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff ffdf 	bl	80086a4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80086e6:	2301      	movs	r3, #1
 80086e8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ea:	2300      	movs	r3, #0
 80086ec:	9308      	str	r3, [sp, #32]
 80086ee:	2300      	movs	r3, #0
 80086f0:	9307      	str	r3, [sp, #28]
 80086f2:	2300      	movs	r3, #0
 80086f4:	9306      	str	r3, [sp, #24]
 80086f6:	2300      	movs	r3, #0
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	2300      	movs	r3, #0
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	2300      	movs	r3, #0
 8008704:	9302      	str	r3, [sp, #8]
 8008706:	2303      	movs	r3, #3
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	2000      	movs	r0, #0
 8008718:	f000 f83c 	bl	8008794 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800871c:	2000      	movs	r0, #0
 800871e:	f000 fdbf 	bl	80092a0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008722:	f000 ff55 	bl	80095d0 <RadioGetWakeupTime>
 8008726:	4603      	mov	r3, r0
 8008728:	4618      	mov	r0, r3
 800872a:	f7f9 faef 	bl	8001d0c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800872e:	f004 fb0b 	bl	800cd48 <UTIL_TIMER_GetCurrentTime>
 8008732:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008734:	e00d      	b.n	8008752 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008736:	2000      	movs	r0, #0
 8008738:	f000 fe9a 	bl	8009470 <RadioRssi>
 800873c:	4603      	mov	r3, r0
 800873e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008740:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008748:	429a      	cmp	r2, r3
 800874a:	dd02      	ble.n	8008752 <RadioIsChannelFree+0x98>
        {
            status = false;
 800874c:	2300      	movs	r3, #0
 800874e:	75fb      	strb	r3, [r7, #23]
            break;
 8008750:	e006      	b.n	8008760 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f004 fb0a 	bl	800cd6c <UTIL_TIMER_GetElapsedTime>
 8008758:	4602      	mov	r2, r0
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	4293      	cmp	r3, r2
 800875e:	d8ea      	bhi.n	8008736 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8008760:	f000 fd97 	bl	8009292 <RadioStandby>

    return status;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	2000      	movs	r0, #0
 8008780:	f002 f9ba 	bl	800aaf8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008784:	f001 ff6f 	bl	800a666 <SUBGRF_GetRandom>
 8008788:	6078      	str	r0, [r7, #4]

    return rnd;
 800878a:	687b      	ldr	r3, [r7, #4]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	461a      	mov	r2, r3
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
 80087a4:	4613      	mov	r3, r2
 80087a6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80087a8:	4ab9      	ldr	r2, [pc, #740]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80087aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80087ae:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80087b0:	f003 f829 	bl	800b806 <RFW_DeInit>
    if( rxContinuous == true )
 80087b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80087c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80087c8:	4ab2      	ldr	r2, [pc, #712]	; (8008a94 <RadioSetRxConfig+0x300>)
 80087ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80087ce:	7013      	strb	r3, [r2, #0]
 80087d0:	e002      	b.n	80087d8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80087d2:	4bb0      	ldr	r3, [pc, #704]	; (8008a94 <RadioSetRxConfig+0x300>)
 80087d4:	22ff      	movs	r2, #255	; 0xff
 80087d6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b05      	cmp	r3, #5
 80087dc:	d009      	beq.n	80087f2 <RadioSetRxConfig+0x5e>
 80087de:	2b05      	cmp	r3, #5
 80087e0:	f300 81ca 	bgt.w	8008b78 <RadioSetRxConfig+0x3e4>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80bf 	beq.w	8008968 <RadioSetRxConfig+0x1d4>
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	f000 8124 	beq.w	8008a38 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80087f0:	e1c2      	b.n	8008b78 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80087f2:	2001      	movs	r0, #1
 80087f4:	f002 f87c 	bl	800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80087f8:	4ba5      	ldr	r3, [pc, #660]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008800:	4aa3      	ldr	r2, [pc, #652]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008806:	4ba2      	ldr	r3, [pc, #648]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008808:	2209      	movs	r2, #9
 800880a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800880e:	4ba0      	ldr	r3, [pc, #640]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008810:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008816:	68b8      	ldr	r0, [r7, #8]
 8008818:	f002 ff28 	bl	800b66c <SUBGRF_GetFskBandwidthRegValue>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	4b9b      	ldr	r3, [pc, #620]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008826:	4b9a      	ldr	r3, [pc, #616]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008828:	2200      	movs	r2, #0
 800882a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800882c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	b29a      	uxth	r2, r3
 8008832:	4b97      	ldr	r3, [pc, #604]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008834:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008836:	4b96      	ldr	r3, [pc, #600]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008838:	2200      	movs	r2, #0
 800883a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800883c:	4b94      	ldr	r3, [pc, #592]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 800883e:	2210      	movs	r2, #16
 8008840:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008842:	4b93      	ldr	r3, [pc, #588]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008844:	2200      	movs	r2, #0
 8008846:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008848:	4b91      	ldr	r3, [pc, #580]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 800884a:	2200      	movs	r2, #0
 800884c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800884e:	4b91      	ldr	r3, [pc, #580]	; (8008a94 <RadioSetRxConfig+0x300>)
 8008850:	781a      	ldrb	r2, [r3, #0]
 8008852:	4b8f      	ldr	r3, [pc, #572]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008854:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008856:	4b8e      	ldr	r3, [pc, #568]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008858:	2201      	movs	r2, #1
 800885a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800885c:	4b8c      	ldr	r3, [pc, #560]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 800885e:	2200      	movs	r2, #0
 8008860:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008862:	2005      	movs	r0, #5
 8008864:	f7ff fec2 	bl	80085ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008868:	488b      	ldr	r0, [pc, #556]	; (8008a98 <RadioSetRxConfig+0x304>)
 800886a:	f002 fadb 	bl	800ae24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800886e:	488b      	ldr	r0, [pc, #556]	; (8008a9c <RadioSetRxConfig+0x308>)
 8008870:	f002 fbaa 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008874:	4a8a      	ldr	r2, [pc, #552]	; (8008aa0 <RadioSetRxConfig+0x30c>)
 8008876:	f107 031c 	add.w	r3, r7, #28
 800887a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800887e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008882:	f107 031c 	add.w	r3, r7, #28
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fe6b 	bl	800a562 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800888c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008890:	f001 feb6 	bl	800a600 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008894:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008898:	f000 fe09 	bl	80094ae <RadioRead>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80088a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a6:	f023 0310 	bic.w	r3, r3, #16
 80088aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80088ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b2:	4619      	mov	r1, r3
 80088b4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80088b8:	f000 fde7 	bl	800948a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80088bc:	2104      	movs	r1, #4
 80088be:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80088c2:	f000 fde2 	bl	800948a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80088c6:	f640 009b 	movw	r0, #2203	; 0x89b
 80088ca:	f000 fdf0 	bl	80094ae <RadioRead>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	f023 031c 	bic.w	r3, r3, #28
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80088e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e4:	f043 0308 	orr.w	r3, r3, #8
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	f640 009b 	movw	r0, #2203	; 0x89b
 80088f0:	f000 fdcb 	bl	800948a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80088f4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80088f8:	f000 fdd9 	bl	80094ae <RadioRead>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008906:	f023 0318 	bic.w	r3, r3, #24
 800890a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800890e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008912:	f043 0318 	orr.w	r3, r3, #24
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4619      	mov	r1, r3
 800891a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800891e:	f000 fdb4 	bl	800948a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008922:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008926:	f000 fdc2 	bl	80094ae <RadioRead>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800893c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008940:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008944:	b2db      	uxtb	r3, r3
 8008946:	4619      	mov	r1, r3
 8008948:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800894c:	f000 fd9d 	bl	800948a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008950:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008952:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008956:	fb02 f303 	mul.w	r3, r2, r3
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	4a4b      	ldr	r2, [pc, #300]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008964:	6093      	str	r3, [r2, #8]
            break;
 8008966:	e108      	b.n	8008b7a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008968:	2000      	movs	r0, #0
 800896a:	f001 ffc1 	bl	800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800896e:	4b48      	ldr	r3, [pc, #288]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008976:	4a46      	ldr	r2, [pc, #280]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800897c:	4b44      	ldr	r3, [pc, #272]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 800897e:	220b      	movs	r2, #11
 8008980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008984:	68b8      	ldr	r0, [r7, #8]
 8008986:	f002 fe71 	bl	800b66c <SUBGRF_GetFskBandwidthRegValue>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	4b40      	ldr	r3, [pc, #256]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008994:	4b3e      	ldr	r3, [pc, #248]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008996:	2200      	movs	r2, #0
 8008998:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800899a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	b29a      	uxth	r2, r3
 80089a0:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089a2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80089a4:	4b3a      	ldr	r3, [pc, #232]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089a6:	2204      	movs	r2, #4
 80089a8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80089aa:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089ac:	2218      	movs	r2, #24
 80089ae:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80089b0:	4b37      	ldr	r3, [pc, #220]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80089b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80089ba:	f083 0301 	eor.w	r3, r3, #1
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	4b33      	ldr	r3, [pc, #204]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80089c6:	4b33      	ldr	r3, [pc, #204]	; (8008a94 <RadioSetRxConfig+0x300>)
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089cc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80089ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089d8:	22f2      	movs	r2, #242	; 0xf2
 80089da:	75da      	strb	r2, [r3, #23]
 80089dc:	e002      	b.n	80089e4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80089de:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80089e4:	4b2a      	ldr	r3, [pc, #168]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80089ea:	f000 fc52 	bl	8009292 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80089ee:	2000      	movs	r0, #0
 80089f0:	f7ff fdfc 	bl	80085ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80089f4:	4828      	ldr	r0, [pc, #160]	; (8008a98 <RadioSetRxConfig+0x304>)
 80089f6:	f002 fa15 	bl	800ae24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80089fa:	4828      	ldr	r0, [pc, #160]	; (8008a9c <RadioSetRxConfig+0x308>)
 80089fc:	f002 fae4 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008a00:	4a28      	ldr	r2, [pc, #160]	; (8008aa4 <RadioSetRxConfig+0x310>)
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a0e:	f107 0314 	add.w	r3, r7, #20
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 fda5 	bl	800a562 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008a18:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a1c:	f001 fdf0 	bl	800a600 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008a20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008a26:	fb02 f303 	mul.w	r3, r2, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a32:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a34:	6093      	str	r3, [r2, #8]
            break;
 8008a36:	e0a0      	b.n	8008b7a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f001 ff59 	bl	800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008a3e:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008a50:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <RadioSetRxConfig+0x314>)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008a5e:	4a0c      	ldr	r2, [pc, #48]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d105      	bne.n	8008a78 <RadioSetRxConfig+0x2e4>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b0b      	cmp	r3, #11
 8008a70:	d008      	beq.n	8008a84 <RadioSetRxConfig+0x2f0>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b0c      	cmp	r3, #12
 8008a76:	d005      	beq.n	8008a84 <RadioSetRxConfig+0x2f0>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d116      	bne.n	8008aac <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b0c      	cmp	r3, #12
 8008a82:	d113      	bne.n	8008aac <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <RadioSetRxConfig+0x2fc>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008a8c:	e012      	b.n	8008ab4 <RadioSetRxConfig+0x320>
 8008a8e:	bf00      	nop
 8008a90:	20001418 	.word	0x20001418
 8008a94:	20000fac 	.word	0x20000fac
 8008a98:	20001450 	.word	0x20001450
 8008a9c:	20001426 	.word	0x20001426
 8008aa0:	08011f0c 	.word	0x08011f0c
 8008aa4:	08011f14 	.word	0x08011f14
 8008aa8:	0801237c 	.word	0x0801237c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008aac:	4b35      	ldr	r3, [pc, #212]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008ab4:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008aba:	4b32      	ldr	r3, [pc, #200]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	d004      	beq.n	8008ace <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008ac4:	4b2f      	ldr	r3, [pc, #188]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008aca:	2b06      	cmp	r3, #6
 8008acc:	d10a      	bne.n	8008ae4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008ace:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ad0:	2b0b      	cmp	r3, #11
 8008ad2:	d803      	bhi.n	8008adc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008ad6:	220c      	movs	r2, #12
 8008ad8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008ada:	e006      	b.n	8008aea <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008adc:	4a29      	ldr	r2, [pc, #164]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008ade:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ae0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008ae2:	e002      	b.n	8008aea <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008ae4:	4a27      	ldr	r2, [pc, #156]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008ae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ae8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008aea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008aee:	4b25      	ldr	r3, [pc, #148]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008af0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008af2:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <RadioSetRxConfig+0x3f4>)
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008af8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008afa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8008afe:	4b21      	ldr	r3, [pc, #132]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008b00:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008b04:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008b08:	4b1e      	ldr	r3, [pc, #120]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8008b0e:	f000 fbc0 	bl	8009292 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008b12:	2001      	movs	r0, #1
 8008b14:	f7ff fd6a 	bl	80085ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b18:	481c      	ldr	r0, [pc, #112]	; (8008b8c <RadioSetRxConfig+0x3f8>)
 8008b1a:	f002 f983 	bl	800ae24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b1e:	481c      	ldr	r0, [pc, #112]	; (8008b90 <RadioSetRxConfig+0x3fc>)
 8008b20:	f002 fa52 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008b24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 fef0 	bl	800a90e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008b2e:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d10d      	bne.n	8008b54 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008b38:	f240 7036 	movw	r0, #1846	; 0x736
 8008b3c:	f002 fba0 	bl	800b280 <SUBGRF_ReadRegister>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f023 0304 	bic.w	r3, r3, #4
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f240 7036 	movw	r0, #1846	; 0x736
 8008b4e:	f002 fb83 	bl	800b258 <SUBGRF_WriteRegister>
 8008b52:	e00c      	b.n	8008b6e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008b54:	f240 7036 	movw	r0, #1846	; 0x736
 8008b58:	f002 fb92 	bl	800b280 <SUBGRF_ReadRegister>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f043 0304 	orr.w	r3, r3, #4
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	f240 7036 	movw	r0, #1846	; 0x736
 8008b6a:	f002 fb75 	bl	800b258 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <RadioSetRxConfig+0x3f0>)
 8008b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b74:	609a      	str	r2, [r3, #8]
            break;
 8008b76:	e000      	b.n	8008b7a <RadioSetRxConfig+0x3e6>
            break;
 8008b78:	bf00      	nop
    }
}
 8008b7a:	bf00      	nop
 8008b7c:	3728      	adds	r7, #40	; 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20001418 	.word	0x20001418
 8008b88:	20000fac 	.word	0x20000fac
 8008b8c:	20001450 	.word	0x20001450
 8008b90:	20001426 	.word	0x20001426

08008b94 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60ba      	str	r2, [r7, #8]
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8008ba6:	f002 fe2e 	bl	800b806 <RFW_DeInit>
    switch( modem )
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	f000 80c7 	beq.w	8008d40 <RadioSetTxConfig+0x1ac>
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	f300 80d6 	bgt.w	8008d64 <RadioSetTxConfig+0x1d0>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <RadioSetTxConfig+0x2e>
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d059      	beq.n	8008c74 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008bc0:	e0d0      	b.n	8008d64 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008bc2:	4b74      	ldr	r3, [pc, #464]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008bca:	4a72      	ldr	r2, [pc, #456]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008bd0:	4b70      	ldr	r3, [pc, #448]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bd2:	220b      	movs	r2, #11
 8008bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f002 fd47 	bl	800b66c <SUBGRF_GetFskBandwidthRegValue>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	4b6c      	ldr	r3, [pc, #432]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008be8:	4a6a      	ldr	r2, [pc, #424]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008bee:	4b69      	ldr	r3, [pc, #420]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008bf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	4b66      	ldr	r3, [pc, #408]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008bfc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008bfe:	4b65      	ldr	r3, [pc, #404]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c00:	2204      	movs	r2, #4
 8008c02:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008c04:	4b63      	ldr	r3, [pc, #396]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c06:	2218      	movs	r2, #24
 8008c08:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008c0a:	4b62      	ldr	r3, [pc, #392]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008c10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c14:	f083 0301 	eor.w	r3, r3, #1
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4b5d      	ldr	r3, [pc, #372]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c1e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008c20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008c28:	4b5a      	ldr	r3, [pc, #360]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c2a:	22f2      	movs	r2, #242	; 0xf2
 8008c2c:	75da      	strb	r2, [r3, #23]
 8008c2e:	e002      	b.n	8008c36 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008c30:	4b58      	ldr	r3, [pc, #352]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008c36:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008c3c:	f000 fb29 	bl	8009292 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7ff fcd3 	bl	80085ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c46:	4854      	ldr	r0, [pc, #336]	; (8008d98 <RadioSetTxConfig+0x204>)
 8008c48:	f002 f8ec 	bl	800ae24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c4c:	4853      	ldr	r0, [pc, #332]	; (8008d9c <RadioSetTxConfig+0x208>)
 8008c4e:	f002 f9bb 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008c52:	4a53      	ldr	r2, [pc, #332]	; (8008da0 <RadioSetTxConfig+0x20c>)
 8008c54:	f107 0310 	add.w	r3, r7, #16
 8008c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c60:	f107 0310 	add.w	r3, r7, #16
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 fc7c 	bl	800a562 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c6e:	f001 fcc7 	bl	800a600 <SUBGRF_SetWhiteningSeed>
            break;
 8008c72:	e078      	b.n	8008d66 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008c74:	4b47      	ldr	r3, [pc, #284]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	4b44      	ldr	r3, [pc, #272]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008c86:	4a47      	ldr	r2, [pc, #284]	; (8008da4 <RadioSetTxConfig+0x210>)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	4b41      	ldr	r3, [pc, #260]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008c94:	4a3f      	ldr	r2, [pc, #252]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008c96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c9a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <RadioSetTxConfig+0x11c>
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	2b0b      	cmp	r3, #11
 8008ca8:	d008      	beq.n	8008cbc <RadioSetTxConfig+0x128>
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	2b0c      	cmp	r3, #12
 8008cae:	d005      	beq.n	8008cbc <RadioSetTxConfig+0x128>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d107      	bne.n	8008cc6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	2b0c      	cmp	r3, #12
 8008cba:	d104      	bne.n	8008cc6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008cbc:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008cc4:	e003      	b.n	8008cce <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008cce:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008cd4:	4b2f      	ldr	r3, [pc, #188]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	d004      	beq.n	8008ce8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008cde:	4b2d      	ldr	r3, [pc, #180]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008ce4:	2b06      	cmp	r3, #6
 8008ce6:	d10a      	bne.n	8008cfe <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cea:	2b0b      	cmp	r3, #11
 8008cec:	d803      	bhi.n	8008cf6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008cee:	4b29      	ldr	r3, [pc, #164]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cf0:	220c      	movs	r2, #12
 8008cf2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008cf4:	e006      	b.n	8008d04 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008cf6:	4a27      	ldr	r2, [pc, #156]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008cf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cfa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008cfc:	e002      	b.n	8008d04 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008cfe:	4a25      	ldr	r2, [pc, #148]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d02:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008d04:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d0a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008d0c:	4b26      	ldr	r3, [pc, #152]	; (8008da8 <RadioSetTxConfig+0x214>)
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	4b20      	ldr	r3, [pc, #128]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d12:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008d14:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008d18:	4b1e      	ldr	r3, [pc, #120]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d1a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008d1e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008d22:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8008d28:	f000 fab3 	bl	8009292 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	f7ff fc5d 	bl	80085ec <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d32:	4819      	ldr	r0, [pc, #100]	; (8008d98 <RadioSetTxConfig+0x204>)
 8008d34:	f002 f876 	bl	800ae24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d38:	4818      	ldr	r0, [pc, #96]	; (8008d9c <RadioSetTxConfig+0x208>)
 8008d3a:	f002 f945 	bl	800afc8 <SUBGRF_SetPacketParams>
            break;
 8008d3e:	e012      	b.n	8008d66 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008d40:	2004      	movs	r0, #4
 8008d42:	f7ff fc53 	bl	80085ec <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008d46:	4b13      	ldr	r3, [pc, #76]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008d4e:	4a11      	ldr	r2, [pc, #68]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d56:	2216      	movs	r2, #22
 8008d58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d5c:	480e      	ldr	r0, [pc, #56]	; (8008d98 <RadioSetTxConfig+0x204>)
 8008d5e:	f002 f861 	bl	800ae24 <SUBGRF_SetModulationParams>
            break;
 8008d62:	e000      	b.n	8008d66 <RadioSetTxConfig+0x1d2>
            break;
 8008d64:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fb90 	bl	800b490 <SUBGRF_SetRfTxPower>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d76:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8008d7a:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008d80:	4618      	mov	r0, r3
 8008d82:	f002 fd54 	bl	800b82e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008d86:	4a03      	ldr	r2, [pc, #12]	; (8008d94 <RadioSetTxConfig+0x200>)
 8008d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8a:	6053      	str	r3, [r2, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20001418 	.word	0x20001418
 8008d98:	20001450 	.word	0x20001450
 8008d9c:	20001426 	.word	0x20001426
 8008da0:	08011f14 	.word	0x08011f14
 8008da4:	0801237c 	.word	0x0801237c
 8008da8:	20000fac 	.word	0x20000fac

08008dac <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
    return true;
 8008db4:	2301      	movs	r3, #1
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr

08008dc0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	2b0a      	cmp	r3, #10
 8008dd2:	d83e      	bhi.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
 8008dd4:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <RadioGetLoRaBandwidthInHz+0x1c>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	08008e19 	.word	0x08008e19
 8008de4:	08008e29 	.word	0x08008e29
 8008de8:	08008e39 	.word	0x08008e39
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008e47 	.word	0x08008e47
 8008df4:	08008e4d 	.word	0x08008e4d
 8008df8:	08008e53 	.word	0x08008e53
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e21 	.word	0x08008e21
 8008e04:	08008e31 	.word	0x08008e31
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008e08:	f641 6384 	movw	r3, #7812	; 0x1e84
 8008e0c:	60fb      	str	r3, [r7, #12]
        break;
 8008e0e:	e020      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008e10:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008e14:	60fb      	str	r3, [r7, #12]
        break;
 8008e16:	e01c      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008e18:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008e1c:	60fb      	str	r3, [r7, #12]
        break;
 8008e1e:	e018      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008e20:	f245 1361 	movw	r3, #20833	; 0x5161
 8008e24:	60fb      	str	r3, [r7, #12]
        break;
 8008e26:	e014      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008e28:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008e2c:	60fb      	str	r3, [r7, #12]
        break;
 8008e2e:	e010      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008e30:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008e34:	60fb      	str	r3, [r7, #12]
        break;
 8008e36:	e00c      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008e38:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008e3c:	60fb      	str	r3, [r7, #12]
        break;
 8008e3e:	e008      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008e42:	60fb      	str	r3, [r7, #12]
        break;
 8008e44:	e005      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008e48:	60fb      	str	r3, [r7, #12]
        break;
 8008e4a:	e002      	b.n	8008e52 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <RadioGetLoRaBandwidthInHz+0xa8>)
 8008e4e:	60fb      	str	r3, [r7, #12]
        break;
 8008e50:	bf00      	nop
    }

    return bandwidthInHz;
 8008e52:	68fb      	ldr	r3, [r7, #12]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	0001e848 	.word	0x0001e848
 8008e64:	0003d090 	.word	0x0003d090
 8008e68:	0007a120 	.word	0x0007a120

08008e6c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	70fb      	strb	r3, [r7, #3]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	803b      	strh	r3, [r7, #0]
 8008e82:	4613      	mov	r3, r2
 8008e84:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8008e86:	883b      	ldrh	r3, [r7, #0]
 8008e88:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e8a:	78ba      	ldrb	r2, [r7, #2]
 8008e8c:	f082 0201 	eor.w	r2, r2, #1
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d001      	beq.n	8008e9a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008e96:	2208      	movs	r2, #8
 8008e98:	e000      	b.n	8008e9c <RadioGetGfskTimeOnAirNumerator+0x30>
 8008e9a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008e9c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e9e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008ea2:	7c3b      	ldrb	r3, [r7, #16]
 8008ea4:	7d39      	ldrb	r1, [r7, #20]
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d001      	beq.n	8008eae <RadioGetGfskTimeOnAirNumerator+0x42>
 8008eaa:	2102      	movs	r1, #2
 8008eac:	e000      	b.n	8008eb0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008eae:	2100      	movs	r1, #0
 8008eb0:	440b      	add	r3, r1
 8008eb2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008eb4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b08b      	sub	sp, #44	; 0x2c
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	460b      	mov	r3, r1
 8008ed0:	71fb      	strb	r3, [r7, #7]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b05      	cmp	r3, #5
 8008ee6:	d002      	beq.n	8008eee <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b06      	cmp	r3, #6
 8008eec:	d104      	bne.n	8008ef8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008eee:	88bb      	ldrh	r3, [r7, #4]
 8008ef0:	2b0b      	cmp	r3, #11
 8008ef2:	d801      	bhi.n	8008ef8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b0b      	cmp	r3, #11
 8008f02:	d008      	beq.n	8008f16 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b0c      	cmp	r3, #12
 8008f08:	d005      	beq.n	8008f16 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b0c      	cmp	r3, #12
 8008f14:	d102      	bne.n	8008f1c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008f1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008f20:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008f22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f26:	2a00      	cmp	r2, #0
 8008f28:	d001      	beq.n	8008f2e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	e000      	b.n	8008f30 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008f2e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008f30:	4413      	add	r3, r2
 8008f32:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008f38:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008f3a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d001      	beq.n	8008f46 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008f42:	2200      	movs	r2, #0
 8008f44:	e000      	b.n	8008f48 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008f46:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008f48:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008f4a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d803      	bhi.n	8008f5a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	623b      	str	r3, [r7, #32]
 8008f58:	e00e      	b.n	8008f78 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	3b02      	subs	r3, #2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	623b      	str	r3, [r7, #32]
 8008f70:	e002      	b.n	8008f78 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da01      	bge.n	8008f82 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	4413      	add	r3, r2
 8008f88:	1e5a      	subs	r2, r3, #1
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	fb03 f202 	mul.w	r2, r3, r2
 8008f96:	88bb      	ldrh	r3, [r7, #4]
 8008f98:	4413      	add	r3, r2
    int32_t intermediate =
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d802      	bhi.n	8008faa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3b02      	subs	r3, #2
 8008fb4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	372c      	adds	r7, #44	; 0x2c
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
	...

08008fc4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af04      	add	r7, sp, #16
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <RadioTimeOnAir+0x28>
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d017      	beq.n	800901a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008fea:	e035      	b.n	8009058 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008fec:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008ff0:	8c3a      	ldrh	r2, [r7, #32]
 8008ff2:	7bb9      	ldrb	r1, [r7, #14]
 8008ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4603      	mov	r3, r0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff ff32 	bl	8008e6c <RadioGetGfskTimeOnAirNumerator>
 8009008:	4603      	mov	r3, r0
 800900a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	613b      	str	r3, [r7, #16]
        break;
 8009018:	e01e      	b.n	8009058 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800901a:	8c39      	ldrh	r1, [r7, #32]
 800901c:	7bba      	ldrb	r2, [r7, #14]
 800901e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009022:	9302      	str	r3, [sp, #8]
 8009024:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	460b      	mov	r3, r1
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	68b8      	ldr	r0, [r7, #8]
 8009036:	f7ff ff43 	bl	8008ec0 <RadioGetLoRaTimeOnAirNumerator>
 800903a:	4603      	mov	r3, r0
 800903c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009046:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <RadioTimeOnAir+0xac>)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4413      	add	r3, r2
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff feb6 	bl	8008dc0 <RadioGetLoRaBandwidthInHz>
 8009054:	6138      	str	r0, [r7, #16]
        break;
 8009056:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	4413      	add	r3, r2
 800905e:	1e5a      	subs	r2, r3, #1
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	0801237c 	.word	0x0801237c

08009074 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	f240 2101 	movw	r1, #513	; 0x201
 8009088:	f240 2001 	movw	r0, #513	; 0x201
 800908c:	f001 fd34 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009090:	4b71      	ldr	r3, [pc, #452]	; (8009258 <RadioSend+0x1e4>)
 8009092:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009096:	2101      	movs	r1, #1
 8009098:	4618      	mov	r0, r3
 800909a:	f002 f9d1 	bl	800b440 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800909e:	4b6e      	ldr	r3, [pc, #440]	; (8009258 <RadioSend+0x1e4>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d112      	bne.n	80090cc <RadioSend+0x58>
 80090a6:	4b6c      	ldr	r3, [pc, #432]	; (8009258 <RadioSend+0x1e4>)
 80090a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	d10d      	bne.n	80090cc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80090b0:	f640 0089 	movw	r0, #2185	; 0x889
 80090b4:	f002 f8e4 	bl	800b280 <SUBGRF_ReadRegister>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f023 0304 	bic.w	r3, r3, #4
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4619      	mov	r1, r3
 80090c2:	f640 0089 	movw	r0, #2185	; 0x889
 80090c6:	f002 f8c7 	bl	800b258 <SUBGRF_WriteRegister>
 80090ca:	e00c      	b.n	80090e6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80090cc:	f640 0089 	movw	r0, #2185	; 0x889
 80090d0:	f002 f8d6 	bl	800b280 <SUBGRF_ReadRegister>
 80090d4:	4603      	mov	r3, r0
 80090d6:	f043 0304 	orr.w	r3, r3, #4
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	f640 0089 	movw	r0, #2185	; 0x889
 80090e2:	f002 f8b9 	bl	800b258 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80090e6:	4b5c      	ldr	r3, [pc, #368]	; (8009258 <RadioSend+0x1e4>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	f200 80a7 	bhi.w	800923e <RadioSend+0x1ca>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <RadioSend+0x84>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	08009127 	.word	0x08009127
 80090fc:	0800910d 	.word	0x0800910d
 8009100:	08009127 	.word	0x08009127
 8009104:	08009187 	.word	0x08009187
 8009108:	080091a7 	.word	0x080091a7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800910c:	4a52      	ldr	r2, [pc, #328]	; (8009258 <RadioSend+0x1e4>)
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009112:	4852      	ldr	r0, [pc, #328]	; (800925c <RadioSend+0x1e8>)
 8009114:	f001 ff58 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	2200      	movs	r2, #0
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fa0c 	bl	800a53c <SUBGRF_SendPayload>
            break;
 8009124:	e08c      	b.n	8009240 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009126:	f002 fb74 	bl	800b812 <RFW_Is_Init>
 800912a:	4603      	mov	r3, r0
 800912c:	2b01      	cmp	r3, #1
 800912e:	d11d      	bne.n	800916c <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009130:	f107 020d 	add.w	r2, r7, #13
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f002 fb82 	bl	800b842 <RFW_TransmitInit>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10c      	bne.n	800915e <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009144:	7b7a      	ldrb	r2, [r7, #13]
 8009146:	4b44      	ldr	r3, [pc, #272]	; (8009258 <RadioSend+0x1e4>)
 8009148:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800914a:	4844      	ldr	r0, [pc, #272]	; (800925c <RadioSend+0x1e8>)
 800914c:	f001 ff3c 	bl	800afc8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8009150:	7b7b      	ldrb	r3, [r7, #13]
 8009152:	2200      	movs	r2, #0
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 f9f0 	bl	800a53c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800915c:	e070      	b.n	8009240 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800915e:	4b40      	ldr	r3, [pc, #256]	; (8009260 <RadioSend+0x1ec>)
 8009160:	2201      	movs	r2, #1
 8009162:	2100      	movs	r1, #0
 8009164:	2002      	movs	r0, #2
 8009166:	f003 fecd 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
 800916a:	e072      	b.n	8009252 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800916c:	4a3a      	ldr	r2, [pc, #232]	; (8009258 <RadioSend+0x1e4>)
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009172:	483a      	ldr	r0, [pc, #232]	; (800925c <RadioSend+0x1e8>)
 8009174:	f001 ff28 	bl	800afc8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	2200      	movs	r2, #0
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 f9dc 	bl	800a53c <SUBGRF_SendPayload>
            break;
 8009184:	e05c      	b.n	8009240 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009186:	4b34      	ldr	r3, [pc, #208]	; (8009258 <RadioSend+0x1e4>)
 8009188:	2202      	movs	r2, #2
 800918a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800918c:	4a32      	ldr	r2, [pc, #200]	; (8009258 <RadioSend+0x1e4>)
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009192:	4832      	ldr	r0, [pc, #200]	; (800925c <RadioSend+0x1e8>)
 8009194:	f001 ff18 	bl	800afc8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	2200      	movs	r2, #0
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 f9cc 	bl	800a53c <SUBGRF_SendPayload>
            break;
 80091a4:	e04c      	b.n	8009240 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	482d      	ldr	r0, [pc, #180]	; (8009264 <RadioSend+0x1f0>)
 80091ae:	f000 fcbc 	bl	8009b2a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80091b2:	4b29      	ldr	r3, [pc, #164]	; (8009258 <RadioSend+0x1e4>)
 80091b4:	2202      	movs	r2, #2
 80091b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	3301      	adds	r3, #1
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <RadioSend+0x1e4>)
 80091c0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80091c2:	4826      	ldr	r0, [pc, #152]	; (800925c <RadioSend+0x1e8>)
 80091c4:	f001 ff00 	bl	800afc8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80091c8:	2100      	movs	r1, #0
 80091ca:	20f1      	movs	r0, #241	; 0xf1
 80091cc:	f000 f95d 	bl	800948a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80091d0:	2100      	movs	r1, #0
 80091d2:	20f0      	movs	r0, #240	; 0xf0
 80091d4:	f000 f959 	bl	800948a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80091d8:	4b1f      	ldr	r3, [pc, #124]	; (8009258 <RadioSend+0x1e4>)
 80091da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091dc:	2b64      	cmp	r3, #100	; 0x64
 80091de:	d108      	bne.n	80091f2 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80091e0:	2170      	movs	r1, #112	; 0x70
 80091e2:	20f3      	movs	r0, #243	; 0xf3
 80091e4:	f000 f951 	bl	800948a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80091e8:	211d      	movs	r1, #29
 80091ea:	20f2      	movs	r0, #242	; 0xf2
 80091ec:	f000 f94d 	bl	800948a <RadioWrite>
 80091f0:	e007      	b.n	8009202 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80091f2:	21e1      	movs	r1, #225	; 0xe1
 80091f4:	20f3      	movs	r0, #243	; 0xf3
 80091f6:	f000 f948 	bl	800948a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80091fa:	2104      	movs	r1, #4
 80091fc:	20f2      	movs	r0, #242	; 0xf2
 80091fe:	f000 f944 	bl	800948a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	b29b      	uxth	r3, r3
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	b29b      	uxth	r3, r3
 800920a:	3302      	adds	r3, #2
 800920c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800920e:	89fb      	ldrh	r3, [r7, #14]
 8009210:	0a1b      	lsrs	r3, r3, #8
 8009212:	b29b      	uxth	r3, r3
 8009214:	b2db      	uxtb	r3, r3
 8009216:	4619      	mov	r1, r3
 8009218:	20f4      	movs	r0, #244	; 0xf4
 800921a:	f000 f936 	bl	800948a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800921e:	89fb      	ldrh	r3, [r7, #14]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	4619      	mov	r1, r3
 8009224:	20f5      	movs	r0, #245	; 0xf5
 8009226:	f000 f930 	bl	800948a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	3301      	adds	r3, #1
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009234:	4619      	mov	r1, r3
 8009236:	480b      	ldr	r0, [pc, #44]	; (8009264 <RadioSend+0x1f0>)
 8009238:	f001 f980 	bl	800a53c <SUBGRF_SendPayload>
            break;
 800923c:	e000      	b.n	8009240 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800923e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009240:	4b05      	ldr	r3, [pc, #20]	; (8009258 <RadioSend+0x1e4>)
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4619      	mov	r1, r3
 8009246:	4808      	ldr	r0, [pc, #32]	; (8009268 <RadioSend+0x1f4>)
 8009248:	f003 fcd4 	bl	800cbf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800924c:	4806      	ldr	r0, [pc, #24]	; (8009268 <RadioSend+0x1f4>)
 800924e:	f003 fbf3 	bl	800ca38 <UTIL_TIMER_Start>
}
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20001418 	.word	0x20001418
 800925c:	20001426 	.word	0x20001426
 8009260:	08011f1c 	.word	0x08011f1c
 8009264:	20001314 	.word	0x20001314
 8009268:	20001474 	.word	0x20001474

0800926c <RadioSleep>:

static void RadioSleep( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009272:	2300      	movs	r3, #0
 8009274:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009276:	793b      	ldrb	r3, [r7, #4]
 8009278:	f043 0304 	orr.w	r3, r3, #4
 800927c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800927e:	7938      	ldrb	r0, [r7, #4]
 8009280:	f001 fa38 	bl	800a6f4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009284:	2002      	movs	r0, #2
 8009286:	f7f8 fd41 	bl	8001d0c <HAL_Delay>
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <RadioStandby>:

static void RadioStandby( void )
{
 8009292:	b580      	push	{r7, lr}
 8009294:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009296:	2000      	movs	r0, #0
 8009298:	f001 fa5e 	bl	800a758 <SUBGRF_SetStandby>
}
 800929c:	bf00      	nop
 800929e:	bd80      	pop	{r7, pc}

080092a0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80092a8:	f002 fab3 	bl	800b812 <RFW_Is_Init>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d102      	bne.n	80092b8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80092b2:	f002 fad6 	bl	800b862 <RFW_ReceiveInit>
 80092b6:	e007      	b.n	80092c8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80092b8:	2300      	movs	r3, #0
 80092ba:	2200      	movs	r2, #0
 80092bc:	f240 2162 	movw	r1, #610	; 0x262
 80092c0:	f240 2062 	movw	r0, #610	; 0x262
 80092c4:	f001 fc18 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4811      	ldr	r0, [pc, #68]	; (8009318 <RadioRx+0x78>)
 80092d2:	f003 fc8f 	bl	800cbf4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80092d6:	4810      	ldr	r0, [pc, #64]	; (8009318 <RadioRx+0x78>)
 80092d8:	f003 fbae 	bl	800ca38 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80092dc:	4b0f      	ldr	r3, [pc, #60]	; (800931c <RadioRx+0x7c>)
 80092de:	2200      	movs	r2, #0
 80092e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80092e2:	4b0e      	ldr	r3, [pc, #56]	; (800931c <RadioRx+0x7c>)
 80092e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80092e8:	2100      	movs	r1, #0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f002 f8a8 	bl	800b440 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80092f0:	4b0a      	ldr	r3, [pc, #40]	; (800931c <RadioRx+0x7c>)
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80092f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80092fc:	f001 fa68 	bl	800a7d0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8009300:	e005      	b.n	800930e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009302:	4b06      	ldr	r3, [pc, #24]	; (800931c <RadioRx+0x7c>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	4618      	mov	r0, r3
 800930a:	f001 fa61 	bl	800a7d0 <SUBGRF_SetRx>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	2000148c 	.word	0x2000148c
 800931c:	20001418 	.word	0x20001418

08009320 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8009328:	f002 fa73 	bl	800b812 <RFW_Is_Init>
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d102      	bne.n	8009338 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8009332:	f002 fa96 	bl	800b862 <RFW_ReceiveInit>
 8009336:	e007      	b.n	8009348 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009338:	2300      	movs	r3, #0
 800933a:	2200      	movs	r2, #0
 800933c:	f240 2162 	movw	r1, #610	; 0x262
 8009340:	f240 2062 	movw	r0, #610	; 0x262
 8009344:	f001 fbd8 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4811      	ldr	r0, [pc, #68]	; (8009398 <RadioRxBoosted+0x78>)
 8009352:	f003 fc4f 	bl	800cbf4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009356:	4810      	ldr	r0, [pc, #64]	; (8009398 <RadioRxBoosted+0x78>)
 8009358:	f003 fb6e 	bl	800ca38 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800935c:	4b0f      	ldr	r3, [pc, #60]	; (800939c <RadioRxBoosted+0x7c>)
 800935e:	2200      	movs	r2, #0
 8009360:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009362:	4b0e      	ldr	r3, [pc, #56]	; (800939c <RadioRxBoosted+0x7c>)
 8009364:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009368:	2100      	movs	r1, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f002 f868 	bl	800b440 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <RadioRxBoosted+0x7c>)
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009378:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800937c:	f001 fa48 	bl	800a810 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009380:	e005      	b.n	800938e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009382:	4b06      	ldr	r3, [pc, #24]	; (800939c <RadioRxBoosted+0x7c>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	019b      	lsls	r3, r3, #6
 8009388:	4618      	mov	r0, r3
 800938a:	f001 fa41 	bl	800a810 <SUBGRF_SetRxBoosted>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000148c 	.word	0x2000148c
 800939c:	20001418 	.word	0x20001418

080093a0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	005a      	lsls	r2, r3, #1
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	4413      	add	r3, r2
 80093b2:	4a0c      	ldr	r2, [pc, #48]	; (80093e4 <RadioSetRxDutyCycle+0x44>)
 80093b4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80093b6:	2300      	movs	r3, #0
 80093b8:	2200      	movs	r2, #0
 80093ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80093c2:	f001 fb99 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <RadioSetRxDutyCycle+0x44>)
 80093c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 f836 	bl	800b440 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fa3e 	bl	800a858 <SUBGRF_SetRxDutyCycle>
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20001418 	.word	0x20001418

080093e8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <RadioStartCad+0x2c>)
 80093ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 f823 	bl	800b440 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80093fa:	2300      	movs	r3, #0
 80093fc:	2200      	movs	r2, #0
 80093fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009402:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8009406:	f001 fb77 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800940a:	f001 fa51 	bl	800a8b0 <SUBGRF_SetCad>
}
 800940e:	bf00      	nop
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20001418 	.word	0x20001418

08009418 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	4613      	mov	r3, r2
 8009426:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8009428:	883b      	ldrh	r3, [r7, #0]
 800942a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 fbbb 	bl	800abb0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800943a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800943e:	4618      	mov	r0, r3
 8009440:	f002 f826 	bl	800b490 <SUBGRF_SetRfTxPower>
 8009444:	4603      	mov	r3, r0
 8009446:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8009448:	7afb      	ldrb	r3, [r7, #11]
 800944a:	2101      	movs	r1, #1
 800944c:	4618      	mov	r0, r3
 800944e:	f001 fff7 	bl	800b440 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009452:	f001 fa3b 	bl	800a8cc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <RadioSetTxContinuousWave+0x54>)
 800945a:	f003 fbcb 	bl	800cbf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800945e:	4803      	ldr	r0, [pc, #12]	; (800946c <RadioSetTxContinuousWave+0x54>)
 8009460:	f003 faea 	bl	800ca38 <UTIL_TIMER_Start>
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20001474 	.word	0x20001474

08009470 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800947a:	f001 fe5a 	bl	800b132 <SUBGRF_GetRssiInst>
 800947e:	4603      	mov	r3, r0
 8009480:	b21b      	sxth	r3, r3
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	4603      	mov	r3, r0
 8009492:	460a      	mov	r2, r1
 8009494:	80fb      	strh	r3, [r7, #6]
 8009496:	4613      	mov	r3, r2
 8009498:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800949a:	797a      	ldrb	r2, [r7, #5]
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f001 fed9 	bl	800b258 <SUBGRF_WriteRegister>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	4603      	mov	r3, r0
 80094b6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fee0 	bl	800b280 <SUBGRF_ReadRegister>
 80094c0:	4603      	mov	r3, r0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	4603      	mov	r3, r0
 80094d2:	6039      	str	r1, [r7, #0]
 80094d4:	80fb      	strh	r3, [r7, #6]
 80094d6:	4613      	mov	r3, r2
 80094d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80094da:	797b      	ldrb	r3, [r7, #5]
 80094dc:	b29a      	uxth	r2, r3
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 fee0 	bl	800b2a8 <SUBGRF_WriteRegisters>
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	80fb      	strh	r3, [r7, #6]
 80094fc:	4613      	mov	r3, r2
 80094fe:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009500:	797b      	ldrb	r3, [r7, #5]
 8009502:	b29a      	uxth	r2, r3
 8009504:	88fb      	ldrh	r3, [r7, #6]
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	4618      	mov	r0, r3
 800950a:	f001 feef 	bl	800b2ec <SUBGRF_ReadRegisters>
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	460a      	mov	r2, r1
 8009522:	71fb      	strb	r3, [r7, #7]
 8009524:	4613      	mov	r3, r2
 8009526:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d10a      	bne.n	8009544 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800952e:	4a0e      	ldr	r2, [pc, #56]	; (8009568 <RadioSetMaxPayloadLength+0x50>)
 8009530:	79bb      	ldrb	r3, [r7, #6]
 8009532:	7013      	strb	r3, [r2, #0]
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <RadioSetMaxPayloadLength+0x50>)
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <RadioSetMaxPayloadLength+0x54>)
 800953a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800953c:	480c      	ldr	r0, [pc, #48]	; (8009570 <RadioSetMaxPayloadLength+0x58>)
 800953e:	f001 fd43 	bl	800afc8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009542:	e00d      	b.n	8009560 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <RadioSetMaxPayloadLength+0x54>)
 8009546:	7d5b      	ldrb	r3, [r3, #21]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d109      	bne.n	8009560 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800954c:	4a06      	ldr	r2, [pc, #24]	; (8009568 <RadioSetMaxPayloadLength+0x50>)
 800954e:	79bb      	ldrb	r3, [r7, #6]
 8009550:	7013      	strb	r3, [r2, #0]
 8009552:	4b05      	ldr	r3, [pc, #20]	; (8009568 <RadioSetMaxPayloadLength+0x50>)
 8009554:	781a      	ldrb	r2, [r3, #0]
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <RadioSetMaxPayloadLength+0x54>)
 8009558:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800955a:	4805      	ldr	r0, [pc, #20]	; (8009570 <RadioSetMaxPayloadLength+0x58>)
 800955c:	f001 fd34 	bl	800afc8 <SUBGRF_SetPacketParams>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000fac 	.word	0x20000fac
 800956c:	20001418 	.word	0x20001418
 8009570:	20001426 	.word	0x20001426

08009574 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800957e:	4a13      	ldr	r2, [pc, #76]	; (80095cc <RadioSetPublicNetwork+0x58>)
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	7313      	strb	r3, [r2, #12]
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <RadioSetPublicNetwork+0x58>)
 8009586:	7b1a      	ldrb	r2, [r3, #12]
 8009588:	4b10      	ldr	r3, [pc, #64]	; (80095cc <RadioSetPublicNetwork+0x58>)
 800958a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800958c:	2001      	movs	r0, #1
 800958e:	f7ff f82d 	bl	80085ec <RadioSetModem>
    if( enable == true )
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00a      	beq.n	80095ae <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009598:	2134      	movs	r1, #52	; 0x34
 800959a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800959e:	f001 fe5b 	bl	800b258 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80095a2:	2144      	movs	r1, #68	; 0x44
 80095a4:	f240 7041 	movw	r0, #1857	; 0x741
 80095a8:	f001 fe56 	bl	800b258 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80095ac:	e009      	b.n	80095c2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80095ae:	2114      	movs	r1, #20
 80095b0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80095b4:	f001 fe50 	bl	800b258 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80095b8:	2124      	movs	r1, #36	; 0x24
 80095ba:	f240 7041 	movw	r0, #1857	; 0x741
 80095be:	f001 fe4b 	bl	800b258 <SUBGRF_WriteRegister>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20001418 	.word	0x20001418

080095d0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80095d4:	f001 ff90 	bl	800b4f8 <SUBGRF_GetRadioWakeUpTime>
 80095d8:	4603      	mov	r3, r0
 80095da:	3303      	adds	r3, #3
}
 80095dc:	4618      	mov	r0, r3
 80095de:	bd80      	pop	{r7, pc}

080095e0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80095e8:	f000 f80e 	bl	8009608 <RadioOnTxTimeoutProcess>
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80095fc:	f000 f818 	bl	8009630 <RadioOnRxTimeoutProcess>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <RadioOnTxTimeoutProcess+0x24>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <RadioOnTxTimeoutProcess+0x1e>
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <RadioOnTxTimeoutProcess+0x24>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <RadioOnTxTimeoutProcess+0x24>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4798      	blx	r3
    }
}
 8009626:	bf00      	nop
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20001414 	.word	0x20001414

08009630 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <RadioOnRxTimeoutProcess+0x24>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d008      	beq.n	800964e <RadioOnRxTimeoutProcess+0x1e>
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <RadioOnRxTimeoutProcess+0x24>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009646:	4b03      	ldr	r3, [pc, #12]	; (8009654 <RadioOnRxTimeoutProcess+0x24>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	4798      	blx	r3
    }
}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20001414 	.word	0x20001414

08009658 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009662:	4a05      	ldr	r2, [pc, #20]	; (8009678 <RadioOnDioIrq+0x20>)
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800966a:	f000 f807 	bl	800967c <RadioIrqProcess>
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20001418 	.word	0x20001418

0800967c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800968a:	4ba8      	ldr	r3, [pc, #672]	; (800992c <RadioIrqProcess+0x2b0>)
 800968c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009694:	f000 810c 	beq.w	80098b0 <RadioIrqProcess+0x234>
 8009698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969c:	f300 81e8 	bgt.w	8009a70 <RadioIrqProcess+0x3f4>
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a4:	f000 80f0 	beq.w	8009888 <RadioIrqProcess+0x20c>
 80096a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ac:	f300 81e0 	bgt.w	8009a70 <RadioIrqProcess+0x3f4>
 80096b0:	2b80      	cmp	r3, #128	; 0x80
 80096b2:	f000 80d5 	beq.w	8009860 <RadioIrqProcess+0x1e4>
 80096b6:	2b80      	cmp	r3, #128	; 0x80
 80096b8:	f300 81da 	bgt.w	8009a70 <RadioIrqProcess+0x3f4>
 80096bc:	2b20      	cmp	r3, #32
 80096be:	dc49      	bgt.n	8009754 <RadioIrqProcess+0xd8>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f340 81d5 	ble.w	8009a70 <RadioIrqProcess+0x3f4>
 80096c6:	3b01      	subs	r3, #1
 80096c8:	2b1f      	cmp	r3, #31
 80096ca:	f200 81d1 	bhi.w	8009a70 <RadioIrqProcess+0x3f4>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <RadioIrqProcess+0x58>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	0800975d 	.word	0x0800975d
 80096d8:	08009797 	.word	0x08009797
 80096dc:	08009a71 	.word	0x08009a71
 80096e0:	0800994d 	.word	0x0800994d
 80096e4:	08009a71 	.word	0x08009a71
 80096e8:	08009a71 	.word	0x08009a71
 80096ec:	08009a71 	.word	0x08009a71
 80096f0:	080099c9 	.word	0x080099c9
 80096f4:	08009a71 	.word	0x08009a71
 80096f8:	08009a71 	.word	0x08009a71
 80096fc:	08009a71 	.word	0x08009a71
 8009700:	08009a71 	.word	0x08009a71
 8009704:	08009a71 	.word	0x08009a71
 8009708:	08009a71 	.word	0x08009a71
 800970c:	08009a71 	.word	0x08009a71
 8009710:	080099e5 	.word	0x080099e5
 8009714:	08009a71 	.word	0x08009a71
 8009718:	08009a71 	.word	0x08009a71
 800971c:	08009a71 	.word	0x08009a71
 8009720:	08009a71 	.word	0x08009a71
 8009724:	08009a71 	.word	0x08009a71
 8009728:	08009a71 	.word	0x08009a71
 800972c:	08009a71 	.word	0x08009a71
 8009730:	08009a71 	.word	0x08009a71
 8009734:	08009a71 	.word	0x08009a71
 8009738:	08009a71 	.word	0x08009a71
 800973c:	08009a71 	.word	0x08009a71
 8009740:	08009a71 	.word	0x08009a71
 8009744:	08009a71 	.word	0x08009a71
 8009748:	08009a71 	.word	0x08009a71
 800974c:	08009a71 	.word	0x08009a71
 8009750:	080099f3 	.word	0x080099f3
 8009754:	2b40      	cmp	r3, #64	; 0x40
 8009756:	f000 816d 	beq.w	8009a34 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800975a:	e189      	b.n	8009a70 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 800975c:	4874      	ldr	r0, [pc, #464]	; (8009930 <RadioIrqProcess+0x2b4>)
 800975e:	f003 f9d9 	bl	800cb14 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009762:	2000      	movs	r0, #0
 8009764:	f000 fff8 	bl	800a758 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009768:	f002 f85a 	bl	800b820 <RFW_Is_LongPacketModeEnabled>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009772:	f002 f87e 	bl	800b872 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009776:	4b6f      	ldr	r3, [pc, #444]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 817a 	beq.w	8009a74 <RadioIrqProcess+0x3f8>
 8009780:	4b6c      	ldr	r3, [pc, #432]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8174 	beq.w	8009a74 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 800978c:	4b69      	ldr	r3, [pc, #420]	; (8009934 <RadioIrqProcess+0x2b8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4798      	blx	r3
        break;
 8009794:	e16e      	b.n	8009a74 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8009796:	4868      	ldr	r0, [pc, #416]	; (8009938 <RadioIrqProcess+0x2bc>)
 8009798:	f003 f9bc 	bl	800cb14 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800979c:	4b63      	ldr	r3, [pc, #396]	; (800992c <RadioIrqProcess+0x2b0>)
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	f083 0301 	eor.w	r3, r3, #1
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d014      	beq.n	80097d4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80097aa:	2000      	movs	r0, #0
 80097ac:	f000 ffd4 	bl	800a758 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80097b0:	2100      	movs	r1, #0
 80097b2:	f640 1002 	movw	r0, #2306	; 0x902
 80097b6:	f001 fd4f 	bl	800b258 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80097ba:	f640 1044 	movw	r0, #2372	; 0x944
 80097be:	f001 fd5f 	bl	800b280 <SUBGRF_ReadRegister>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f043 0302 	orr.w	r3, r3, #2
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	4619      	mov	r1, r3
 80097cc:	f640 1044 	movw	r0, #2372	; 0x944
 80097d0:	f001 fd42 	bl	800b258 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80097d4:	1dfb      	adds	r3, r7, #7
 80097d6:	22ff      	movs	r2, #255	; 0xff
 80097d8:	4619      	mov	r1, r3
 80097da:	4858      	ldr	r0, [pc, #352]	; (800993c <RadioIrqProcess+0x2c0>)
 80097dc:	f000 fe8c 	bl	800a4f8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80097e0:	4857      	ldr	r0, [pc, #348]	; (8009940 <RadioIrqProcess+0x2c4>)
 80097e2:	f001 fce7 	bl	800b1b4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80097e6:	4b53      	ldr	r3, [pc, #332]	; (8009934 <RadioIrqProcess+0x2b8>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d036      	beq.n	800985c <RadioIrqProcess+0x1e0>
 80097ee:	4b51      	ldr	r3, [pc, #324]	; (8009934 <RadioIrqProcess+0x2b8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d031      	beq.n	800985c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80097f8:	4b4c      	ldr	r3, [pc, #304]	; (800992c <RadioIrqProcess+0x2b0>)
 80097fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d10e      	bne.n	8009820 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8009802:	4b4c      	ldr	r3, [pc, #304]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689c      	ldr	r4, [r3, #8]
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	b299      	uxth	r1, r3
 800980c:	4b47      	ldr	r3, [pc, #284]	; (800992c <RadioIrqProcess+0x2b0>)
 800980e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8009812:	b21a      	sxth	r2, r3
 8009814:	4b45      	ldr	r3, [pc, #276]	; (800992c <RadioIrqProcess+0x2b0>)
 8009816:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800981a:	4848      	ldr	r0, [pc, #288]	; (800993c <RadioIrqProcess+0x2c0>)
 800981c:	47a0      	blx	r4
                break;
 800981e:	e01e      	b.n	800985e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009820:	4b42      	ldr	r3, [pc, #264]	; (800992c <RadioIrqProcess+0x2b0>)
 8009822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009824:	463a      	mov	r2, r7
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f001 ff47 	bl	800b6bc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800982e:	4b41      	ldr	r3, [pc, #260]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689c      	ldr	r4, [r3, #8]
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	b299      	uxth	r1, r3
 8009838:	4b3c      	ldr	r3, [pc, #240]	; (800992c <RadioIrqProcess+0x2b0>)
 800983a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800983e:	b218      	sxth	r0, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009846:	4a3f      	ldr	r2, [pc, #252]	; (8009944 <RadioIrqProcess+0x2c8>)
 8009848:	fb82 c203 	smull	ip, r2, r2, r3
 800984c:	1192      	asrs	r2, r2, #6
 800984e:	17db      	asrs	r3, r3, #31
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	b25b      	sxtb	r3, r3
 8009854:	4602      	mov	r2, r0
 8009856:	4839      	ldr	r0, [pc, #228]	; (800993c <RadioIrqProcess+0x2c0>)
 8009858:	47a0      	blx	r4
                break;
 800985a:	e000      	b.n	800985e <RadioIrqProcess+0x1e2>
        }
 800985c:	bf00      	nop
        break;
 800985e:	e118      	b.n	8009a92 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8009860:	2000      	movs	r0, #0
 8009862:	f000 ff79 	bl	800a758 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009866:	4b33      	ldr	r3, [pc, #204]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 8104 	beq.w	8009a78 <RadioIrqProcess+0x3fc>
 8009870:	4b30      	ldr	r3, [pc, #192]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 80fe 	beq.w	8009a78 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 800987c:	4b2d      	ldr	r3, [pc, #180]	; (8009934 <RadioIrqProcess+0x2b8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	2000      	movs	r0, #0
 8009884:	4798      	blx	r3
        break;
 8009886:	e0f7      	b.n	8009a78 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8009888:	2000      	movs	r0, #0
 800988a:	f000 ff65 	bl	800a758 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800988e:	4b29      	ldr	r3, [pc, #164]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80f2 	beq.w	8009a7c <RadioIrqProcess+0x400>
 8009898:	4b26      	ldr	r3, [pc, #152]	; (8009934 <RadioIrqProcess+0x2b8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 80ec 	beq.w	8009a7c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 80098a4:	4b23      	ldr	r3, [pc, #140]	; (8009934 <RadioIrqProcess+0x2b8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	2001      	movs	r0, #1
 80098ac:	4798      	blx	r3
        break;
 80098ae:	e0e5      	b.n	8009a7c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80098b0:	4b25      	ldr	r3, [pc, #148]	; (8009948 <RadioIrqProcess+0x2cc>)
 80098b2:	2201      	movs	r2, #1
 80098b4:	2100      	movs	r1, #0
 80098b6:	2002      	movs	r0, #2
 80098b8:	f003 fb24 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80098bc:	f000 fe02 	bl	800a4c4 <SUBGRF_GetOperatingMode>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d115      	bne.n	80098f2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80098c6:	481a      	ldr	r0, [pc, #104]	; (8009930 <RadioIrqProcess+0x2b4>)
 80098c8:	f003 f924 	bl	800cb14 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80098cc:	2000      	movs	r0, #0
 80098ce:	f000 ff43 	bl	800a758 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80098d2:	4b18      	ldr	r3, [pc, #96]	; (8009934 <RadioIrqProcess+0x2b8>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80d2 	beq.w	8009a80 <RadioIrqProcess+0x404>
 80098dc:	4b15      	ldr	r3, [pc, #84]	; (8009934 <RadioIrqProcess+0x2b8>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80cc 	beq.w	8009a80 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 80098e8:	4b12      	ldr	r3, [pc, #72]	; (8009934 <RadioIrqProcess+0x2b8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	4798      	blx	r3
        break;
 80098f0:	e0c6      	b.n	8009a80 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80098f2:	f000 fde7 	bl	800a4c4 <SUBGRF_GetOperatingMode>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	f040 80c1 	bne.w	8009a80 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 80098fe:	480e      	ldr	r0, [pc, #56]	; (8009938 <RadioIrqProcess+0x2bc>)
 8009900:	f003 f908 	bl	800cb14 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009904:	2000      	movs	r0, #0
 8009906:	f000 ff27 	bl	800a758 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <RadioIrqProcess+0x2b8>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 80b6 	beq.w	8009a80 <RadioIrqProcess+0x404>
 8009914:	4b07      	ldr	r3, [pc, #28]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 80b0 	beq.w	8009a80 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8009920:	4b04      	ldr	r3, [pc, #16]	; (8009934 <RadioIrqProcess+0x2b8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	4798      	blx	r3
        break;
 8009928:	e0aa      	b.n	8009a80 <RadioIrqProcess+0x404>
 800992a:	bf00      	nop
 800992c:	20001418 	.word	0x20001418
 8009930:	20001474 	.word	0x20001474
 8009934:	20001414 	.word	0x20001414
 8009938:	2000148c 	.word	0x2000148c
 800993c:	20001314 	.word	0x20001314
 8009940:	2000143c 	.word	0x2000143c
 8009944:	10624dd3 	.word	0x10624dd3
 8009948:	08011f34 	.word	0x08011f34
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800994c:	4b53      	ldr	r3, [pc, #332]	; (8009a9c <RadioIrqProcess+0x420>)
 800994e:	2201      	movs	r2, #1
 8009950:	2100      	movs	r1, #0
 8009952:	2002      	movs	r0, #2
 8009954:	f003 fad6 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009958:	4b51      	ldr	r3, [pc, #324]	; (8009aa0 <RadioIrqProcess+0x424>)
 800995a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 8091 	beq.w	8009a84 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8009962:	4a50      	ldr	r2, [pc, #320]	; (8009aa4 <RadioIrqProcess+0x428>)
 8009964:	4b4e      	ldr	r3, [pc, #312]	; (8009aa0 <RadioIrqProcess+0x424>)
 8009966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4619      	mov	r1, r3
 800996e:	f640 1003 	movw	r0, #2307	; 0x903
 8009972:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8009974:	4a4b      	ldr	r2, [pc, #300]	; (8009aa4 <RadioIrqProcess+0x428>)
 8009976:	4b4a      	ldr	r3, [pc, #296]	; (8009aa0 <RadioIrqProcess+0x424>)
 8009978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997a:	0a1b      	lsrs	r3, r3, #8
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4619      	mov	r1, r3
 8009980:	f640 1004 	movw	r0, #2308	; 0x904
 8009984:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8009986:	4a47      	ldr	r2, [pc, #284]	; (8009aa4 <RadioIrqProcess+0x428>)
 8009988:	4b45      	ldr	r3, [pc, #276]	; (8009aa0 <RadioIrqProcess+0x424>)
 800998a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998c:	b2db      	uxtb	r3, r3
 800998e:	4619      	mov	r1, r3
 8009990:	f640 1005 	movw	r0, #2309	; 0x905
 8009994:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8009996:	4c43      	ldr	r4, [pc, #268]	; (8009aa4 <RadioIrqProcess+0x428>)
 8009998:	4b43      	ldr	r3, [pc, #268]	; (8009aa8 <RadioIrqProcess+0x42c>)
 800999a:	f640 1002 	movw	r0, #2306	; 0x902
 800999e:	4798      	blx	r3
 80099a0:	4603      	mov	r3, r0
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	4619      	mov	r1, r3
 80099aa:	f640 1002 	movw	r0, #2306	; 0x902
 80099ae:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80099b0:	4b3b      	ldr	r3, [pc, #236]	; (8009aa0 <RadioIrqProcess+0x424>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	f240 2162 	movw	r1, #610	; 0x262
 80099be:	f240 2062 	movw	r0, #610	; 0x262
 80099c2:	f001 f899 	bl	800aaf8 <SUBGRF_SetDioIrqParams>
        break;
 80099c6:	e05d      	b.n	8009a84 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80099c8:	4b38      	ldr	r3, [pc, #224]	; (8009aac <RadioIrqProcess+0x430>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	2100      	movs	r1, #0
 80099ce:	2002      	movs	r0, #2
 80099d0:	f003 fa98 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80099d4:	f001 ff1d 	bl	800b812 <RFW_Is_Init>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d154      	bne.n	8009a88 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80099de:	f001 ff4e 	bl	800b87e <RFW_ReceivePayload>
        break;
 80099e2:	e051      	b.n	8009a88 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80099e4:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <RadioIrqProcess+0x434>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	2100      	movs	r1, #0
 80099ea:	2002      	movs	r0, #2
 80099ec:	f003 fa8a 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80099f0:	e04f      	b.n	8009a92 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80099f2:	4830      	ldr	r0, [pc, #192]	; (8009ab4 <RadioIrqProcess+0x438>)
 80099f4:	f003 f88e 	bl	800cb14 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80099f8:	4b29      	ldr	r3, [pc, #164]	; (8009aa0 <RadioIrqProcess+0x424>)
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	f083 0301 	eor.w	r3, r3, #1
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8009a06:	2000      	movs	r0, #0
 8009a08:	f000 fea6 	bl	800a758 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03b      	beq.n	8009a8c <RadioIrqProcess+0x410>
 8009a14:	4b28      	ldr	r3, [pc, #160]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d036      	beq.n	8009a8c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8009a1e:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8009a26:	4b25      	ldr	r3, [pc, #148]	; (8009abc <RadioIrqProcess+0x440>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	2002      	movs	r0, #2
 8009a2e:	f003 fa69 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009a32:	e02b      	b.n	8009a8c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8009a34:	4b22      	ldr	r3, [pc, #136]	; (8009ac0 <RadioIrqProcess+0x444>)
 8009a36:	2201      	movs	r2, #1
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2002      	movs	r0, #2
 8009a3c:	f003 fa62 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8009a40:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <RadioIrqProcess+0x424>)
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	f083 0301 	eor.w	r3, r3, #1
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f000 fe82 	bl	800a758 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009a54:	4b18      	ldr	r3, [pc, #96]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d019      	beq.n	8009a90 <RadioIrqProcess+0x414>
 8009a5c:	4b16      	ldr	r3, [pc, #88]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d014      	beq.n	8009a90 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <RadioIrqProcess+0x43c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4798      	blx	r3
        break;
 8009a6e:	e00f      	b.n	8009a90 <RadioIrqProcess+0x414>
        break;
 8009a70:	bf00      	nop
 8009a72:	e00e      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a74:	bf00      	nop
 8009a76:	e00c      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a78:	bf00      	nop
 8009a7a:	e00a      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a7c:	bf00      	nop
 8009a7e:	e008      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a80:	bf00      	nop
 8009a82:	e006      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a84:	bf00      	nop
 8009a86:	e004      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a88:	bf00      	nop
 8009a8a:	e002      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a8c:	bf00      	nop
 8009a8e:	e000      	b.n	8009a92 <RadioIrqProcess+0x416>
        break;
 8009a90:	bf00      	nop
    }
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd90      	pop	{r4, r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	08011f48 	.word	0x08011f48
 8009aa0:	20001418 	.word	0x20001418
 8009aa4:	0800948b 	.word	0x0800948b
 8009aa8:	080094af 	.word	0x080094af
 8009aac:	08011f54 	.word	0x08011f54
 8009ab0:	08011f60 	.word	0x08011f60
 8009ab4:	2000148c 	.word	0x2000148c
 8009ab8:	20001414 	.word	0x20001414
 8009abc:	08011f6c 	.word	0x08011f6c
 8009ac0:	08011f78 	.word	0x08011f78

08009ac4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009ac8:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <RadioTxPrbs+0x2c>)
 8009aca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009ace:	2101      	movs	r1, #1
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 fcb5 	bl	800b440 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <RadioTxPrbs+0x30>)
 8009ad8:	212d      	movs	r1, #45	; 0x2d
 8009ada:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009ade:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009ae0:	f000 fefd 	bl	800a8de <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009ae4:	4804      	ldr	r0, [pc, #16]	; (8009af8 <RadioTxPrbs+0x34>)
 8009ae6:	f000 fe53 	bl	800a790 <SUBGRF_SetTx>
}
 8009aea:	bf00      	nop
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001418 	.word	0x20001418
 8009af4:	0800948b 	.word	0x0800948b
 8009af8:	000fffff 	.word	0x000fffff

08009afc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 fcc0 	bl	800b490 <SUBGRF_SetRfTxPower>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	2101      	movs	r1, #1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fc91 	bl	800b440 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009b1e:	f000 fed5 	bl	800a8cc <SUBGRF_SetTxContinuousWave>
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b089      	sub	sp, #36	; 0x24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	4613      	mov	r3, r2
 8009b36:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009b40:	2300      	movs	r3, #0
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e011      	b.n	8009b6a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	440b      	add	r3, r1
 8009b54:	43d2      	mvns	r2, r2
 8009b56:	b2d2      	uxtb	r2, r2
 8009b58:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	3301      	adds	r3, #1
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	dbe9      	blt.n	8009b46 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009b72:	2300      	movs	r3, #0
 8009b74:	61bb      	str	r3, [r7, #24]
 8009b76:	e049      	b.n	8009c0c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	425a      	negs	r2, r3
 8009b7c:	f003 0307 	and.w	r3, r3, #7
 8009b80:	f002 0207 	and.w	r2, r2, #7
 8009b84:	bf58      	it	pl
 8009b86:	4253      	negpl	r3, r2
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f1c3 0307 	rsb	r3, r3, #7
 8009b8e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da00      	bge.n	8009b98 <payload_integration+0x6e>
 8009b96:	3307      	adds	r3, #7
 8009b98:	10db      	asrs	r3, r3, #3
 8009b9a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	425a      	negs	r2, r3
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	f002 0207 	and.w	r2, r2, #7
 8009baa:	bf58      	it	pl
 8009bac:	4253      	negpl	r3, r2
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f1c3 0307 	rsb	r3, r3, #7
 8009bb4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da00      	bge.n	8009bc0 <payload_integration+0x96>
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	10db      	asrs	r3, r3, #3
 8009bc2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009bc4:	7dbb      	ldrb	r3, [r7, #22]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	fa42 f303 	asr.w	r3, r2, r3
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009bdc:	7ffa      	ldrb	r2, [r7, #31]
 8009bde:	7cfb      	ldrb	r3, [r7, #19]
 8009be0:	4053      	eors	r3, r2
 8009be2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009be4:	7d3b      	ldrb	r3, [r7, #20]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b25a      	sxtb	r2, r3
 8009bee:	7ff9      	ldrb	r1, [r7, #31]
 8009bf0:	7d7b      	ldrb	r3, [r7, #21]
 8009bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b259      	sxtb	r1, r3
 8009bfc:	7d3b      	ldrb	r3, [r7, #20]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	b2ca      	uxtb	r2, r1
 8009c04:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	61bb      	str	r3, [r7, #24]
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	dbb0      	blt.n	8009b78 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009c16:	7ffb      	ldrb	r3, [r7, #31]
 8009c18:	01db      	lsls	r3, r3, #7
 8009c1a:	b25a      	sxtb	r2, r3
 8009c1c:	7ffb      	ldrb	r3, [r7, #31]
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	4313      	orrs	r3, r2
 8009c24:	b25b      	sxtb	r3, r3
 8009c26:	7ffa      	ldrb	r2, [r7, #31]
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	d101      	bne.n	8009c30 <payload_integration+0x106>
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	e000      	b.n	8009c32 <payload_integration+0x108>
 8009c30:	2200      	movs	r2, #0
 8009c32:	4313      	orrs	r3, r2
 8009c34:	b259      	sxtb	r1, r3
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	b2ca      	uxtb	r2, r1
 8009c3e:	701a      	strb	r2, [r3, #0]
}
 8009c40:	bf00      	nop
 8009c42:	3724      	adds	r7, #36	; 0x24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr
	...

08009c4c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08c      	sub	sp, #48	; 0x30
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8009c60:	2300      	movs	r3, #0
 8009c62:	623b      	str	r3, [r7, #32]
 8009c64:	2300      	movs	r3, #0
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009c68:	f001 fdcd 	bl	800b806 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf14      	ite	ne
 8009c7c:	2301      	movne	r3, #1
 8009c7e:	2300      	moveq	r3, #0
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4ba3      	ldr	r3, [pc, #652]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009c84:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <RadioSetRxGenericConfig+0x48>
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f000 80dc 	beq.w	8009e4a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009c92:	e194      	b.n	8009fbe <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <RadioSetRxGenericConfig+0x58>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca8:	e18a      	b.n	8009fc0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	7f9b      	ldrb	r3, [r3, #30]
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	d902      	bls.n	8009cb8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cb6:	e183      	b.n	8009fc0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6919      	ldr	r1, [r3, #16]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	7f9b      	ldrb	r3, [r3, #30]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	f107 0320 	add.w	r3, r7, #32
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f002 f9ca 	bl	800c060 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fe08 	bl	800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009ce0:	4b8b      	ldr	r3, [pc, #556]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	4a88      	ldr	r2, [pc, #544]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009cee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009cf6:	4b86      	ldr	r3, [pc, #536]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 fcb3 	bl	800b66c <SUBGRF_GetFskBandwidthRegValue>
 8009d06:	4603      	mov	r3, r0
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4b81      	ldr	r3, [pc, #516]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009d10:	4b7f      	ldr	r3, [pc, #508]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	4b7b      	ldr	r3, [pc, #492]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d22:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	7fda      	ldrb	r2, [r3, #31]
 8009d28:	4b79      	ldr	r3, [pc, #484]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	7f9b      	ldrb	r3, [r3, #30]
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	4b76      	ldr	r3, [pc, #472]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8009d3e:	4b74      	ldr	r3, [pc, #464]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d40:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4b6f      	ldr	r3, [pc, #444]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d54:	759a      	strb	r2, [r3, #22]
 8009d56:	e00b      	b.n	8009d70 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d103      	bne.n	8009d6a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009d62:	4b6b      	ldr	r3, [pc, #428]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d64:	22ff      	movs	r2, #255	; 0xff
 8009d66:	759a      	strb	r2, [r3, #22]
 8009d68:	e002      	b.n	8009d70 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009d6a:	4b69      	ldr	r3, [pc, #420]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009d6c:	22ff      	movs	r2, #255	; 0xff
 8009d6e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d004      	beq.n	8009d84 <RadioSetRxGenericConfig+0x138>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d12d      	bne.n	8009de0 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009d8a:	2bf1      	cmp	r3, #241	; 0xf1
 8009d8c:	d00c      	beq.n	8009da8 <RadioSetRxGenericConfig+0x15c>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009d94:	2bf2      	cmp	r3, #242	; 0xf2
 8009d96:	d007      	beq.n	8009da8 <RadioSetRxGenericConfig+0x15c>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d002      	beq.n	8009da8 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da6:	e10b      	b.n	8009fc0 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8009da8:	2300      	movs	r3, #0
 8009daa:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009db0:	4b58      	ldr	r3, [pc, #352]	; (8009f14 <RadioSetRxGenericConfig+0x2c8>)
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	f107 0314 	add.w	r3, r7, #20
 8009db8:	4a57      	ldr	r2, [pc, #348]	; (8009f18 <RadioSetRxGenericConfig+0x2cc>)
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 fd16 	bl	800b7ec <RFW_Init>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <RadioSetRxGenericConfig+0x180>
            return -1;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dca:	e0f9      	b.n	8009fc0 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009dcc:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009dd2:	4b4f      	ldr	r3, [pc, #316]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009dd8:	4b4d      	ldr	r3, [pc, #308]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	755a      	strb	r2, [r3, #21]
        {
 8009dde:	e00e      	b.n	8009dfe <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009de6:	4b4a      	ldr	r3, [pc, #296]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009de8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009df0:	4b47      	ldr	r3, [pc, #284]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009df2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009dfa:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009dfc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009dfe:	f7ff fa48 	bl	8009292 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009e02:	2000      	movs	r0, #0
 8009e04:	f7fe fbf2 	bl	80085ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e08:	4844      	ldr	r0, [pc, #272]	; (8009f1c <RadioSetRxGenericConfig+0x2d0>)
 8009e0a:	f001 f80b 	bl	800ae24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e0e:	4844      	ldr	r0, [pc, #272]	; (8009f20 <RadioSetRxGenericConfig+0x2d4>)
 8009e10:	f001 f8da 	bl	800afc8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009e14:	f107 0320 	add.w	r3, r7, #32
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fba2 	bl	800a562 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	8b9b      	ldrh	r3, [r3, #28]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fbec 	bl	800a600 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	8b1b      	ldrh	r3, [r3, #24]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fbc7 	bl	800a5c0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009e38:	fb03 f202 	mul.w	r2, r3, r2
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e44:	4a32      	ldr	r2, [pc, #200]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009e46:	6093      	str	r3, [r2, #8]
        break;
 8009e48:	e0b9      	b.n	8009fbe <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8009e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e56:	e0b3      	b.n	8009fc0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d104      	bne.n	8009e6c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009e6a:	e002      	b.n	8009e72 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009e6c:	23ff      	movs	r3, #255	; 0xff
 8009e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bf14      	ite	ne
 8009e7a:	2301      	movne	r3, #1
 8009e7c:	2300      	moveq	r3, #0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fd35 	bl	800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fd3f 	bl	800a90e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009e90:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009e9e:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009eaa:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009eb6:	4b16      	ldr	r3, [pc, #88]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009eb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d010      	beq.n	8009ee8 <RadioSetRxGenericConfig+0x29c>
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	dc2c      	bgt.n	8009f24 <RadioSetRxGenericConfig+0x2d8>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <RadioSetRxGenericConfig+0x288>
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d005      	beq.n	8009ede <RadioSetRxGenericConfig+0x292>
            break;
 8009ed2:	e027      	b.n	8009f24 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009edc:	e023      	b.n	8009f26 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ee6:	e01e      	b.n	8009f26 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	d004      	beq.n	8009efc <RadioSetRxGenericConfig+0x2b0>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ef8:	2b0c      	cmp	r3, #12
 8009efa:	d104      	bne.n	8009f06 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009f04:	e00f      	b.n	8009f26 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009f06:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <RadioSetRxGenericConfig+0x2c4>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009f0e:	e00a      	b.n	8009f26 <RadioSetRxGenericConfig+0x2da>
 8009f10:	20001418 	.word	0x20001418
 8009f14:	20001414 	.word	0x20001414
 8009f18:	2000148c 	.word	0x2000148c
 8009f1c:	20001450 	.word	0x20001450
 8009f20:	20001426 	.word	0x20001426
            break;
 8009f24:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009f26:	4b28      	ldr	r3, [pc, #160]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f28:	2201      	movs	r2, #1
 8009f2a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f32:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f3c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009f3e:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f44:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f4e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009f58:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8009f5e:	f7ff f998 	bl	8009292 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009f62:	2001      	movs	r0, #1
 8009f64:	f7fe fb42 	bl	80085ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f68:	4818      	ldr	r0, [pc, #96]	; (8009fcc <RadioSetRxGenericConfig+0x380>)
 8009f6a:	f000 ff5b 	bl	800ae24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f6e:	4818      	ldr	r0, [pc, #96]	; (8009fd0 <RadioSetRxGenericConfig+0x384>)
 8009f70:	f001 f82a 	bl	800afc8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009f74:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10d      	bne.n	8009f9a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009f7e:	f240 7036 	movw	r0, #1846	; 0x736
 8009f82:	f001 f97d 	bl	800b280 <SUBGRF_ReadRegister>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f023 0304 	bic.w	r3, r3, #4
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f240 7036 	movw	r0, #1846	; 0x736
 8009f94:	f001 f960 	bl	800b258 <SUBGRF_WriteRegister>
 8009f98:	e00c      	b.n	8009fb4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009f9a:	f240 7036 	movw	r0, #1846	; 0x736
 8009f9e:	f001 f96f 	bl	800b280 <SUBGRF_ReadRegister>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f043 0304 	orr.w	r3, r3, #4
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	4619      	mov	r1, r3
 8009fac:	f240 7036 	movw	r0, #1846	; 0x736
 8009fb0:	f001 f952 	bl	800b258 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <RadioSetRxGenericConfig+0x37c>)
 8009fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fba:	609a      	str	r2, [r3, #8]
        break;
 8009fbc:	bf00      	nop
    }
    return status;
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3730      	adds	r7, #48	; 0x30
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001418 	.word	0x20001418
 8009fcc:	20001450 	.word	0x20001450
 8009fd0:	20001426 	.word	0x20001426

08009fd4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fea:	2300      	movs	r3, #0
 8009fec:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009fee:	f001 fc0a 	bl	800b806 <RFW_DeInit>
    switch( modem )
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	f200 8204 	bhi.w	800a402 <RadioSetTxGenericConfig+0x42e>
 8009ffa:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <RadioSetTxGenericConfig+0x2c>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a185 	.word	0x0800a185
 800a004:	0800a2cd 	.word	0x0800a2cd
 800a008:	0800a3c5 	.word	0x0800a3c5
 800a00c:	0800a011 	.word	0x0800a011
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	7c9b      	ldrb	r3, [r3, #18]
 800a014:	2b08      	cmp	r3, #8
 800a016:	d902      	bls.n	800a01e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800a018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a01c:	e206      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6899      	ldr	r1, [r3, #8]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7c9b      	ldrb	r3, [r3, #18]
 800a026:	b29a      	uxth	r2, r3
 800a028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a02c:	4618      	mov	r0, r3
 800a02e:	f002 f817 	bl	800c060 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a03e:	e1f5      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f242 7210 	movw	r2, #10000	; 0x2710
 800a048:	4293      	cmp	r3, r2
 800a04a:	d813      	bhi.n	800a074 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a052:	4b99      	ldr	r3, [pc, #612]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a054:	2203      	movs	r2, #3
 800a056:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a058:	4b97      	ldr	r3, [pc, #604]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a05a:	2203      	movs	r2, #3
 800a05c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a94      	ldr	r2, [pc, #592]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a066:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	7cda      	ldrb	r2, [r3, #19]
 800a06c:	4b92      	ldr	r3, [pc, #584]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a072:	e017      	b.n	800a0a4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 800a074:	2300      	movs	r3, #0
 800a076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a07a:	4b8f      	ldr	r3, [pc, #572]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a080:	4b8d      	ldr	r3, [pc, #564]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a8a      	ldr	r2, [pc, #552]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a08e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	7cda      	ldrb	r2, [r3, #19]
 800a094:	4b88      	ldr	r3, [pc, #544]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	089b      	lsrs	r3, r3, #2
 800a0a0:	4a85      	ldr	r2, [pc, #532]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a0a2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	4b82      	ldr	r3, [pc, #520]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a0b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a0b2:	4b81      	ldr	r3, [pc, #516]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	7c9b      	ldrb	r3, [r3, #18]
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	4b7d      	ldr	r3, [pc, #500]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a0c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a0c4:	4b7c      	ldr	r3, [pc, #496]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	7d9b      	ldrb	r3, [r3, #22]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d003      	beq.n	800a0da <RadioSetTxGenericConfig+0x106>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	7d1b      	ldrb	r3, [r3, #20]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d12b      	bne.n	800a132 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	7d5b      	ldrb	r3, [r3, #21]
 800a0de:	2bf1      	cmp	r3, #241	; 0xf1
 800a0e0:	d00a      	beq.n	800a0f8 <RadioSetTxGenericConfig+0x124>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	7d5b      	ldrb	r3, [r3, #21]
 800a0e6:	2bf2      	cmp	r3, #242	; 0xf2
 800a0e8:	d006      	beq.n	800a0f8 <RadioSetTxGenericConfig+0x124>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	7d5b      	ldrb	r3, [r3, #21]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d002      	beq.n	800a0f8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a0f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0f6:	e199      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a102:	4b6e      	ldr	r3, [pc, #440]	; (800a2bc <RadioSetTxGenericConfig+0x2e8>)
 800a104:	6819      	ldr	r1, [r3, #0]
 800a106:	f107 0320 	add.w	r3, r7, #32
 800a10a:	4a6d      	ldr	r2, [pc, #436]	; (800a2c0 <RadioSetTxGenericConfig+0x2ec>)
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fb6d 	bl	800b7ec <RFW_Init>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a11c:	e186      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a11e:	4b66      	ldr	r3, [pc, #408]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a120:	2200      	movs	r2, #0
 800a122:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800a124:	4b64      	ldr	r3, [pc, #400]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a126:	2201      	movs	r2, #1
 800a128:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a12a:	4b63      	ldr	r3, [pc, #396]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	755a      	strb	r2, [r3, #21]
        {
 800a130:	e00b      	b.n	800a14a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	7d5a      	ldrb	r2, [r3, #21]
 800a136:	4b60      	ldr	r3, [pc, #384]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a138:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	7d9a      	ldrb	r2, [r3, #22]
 800a13e:	4b5e      	ldr	r3, [pc, #376]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a140:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	7d1a      	ldrb	r2, [r3, #20]
 800a146:	4b5c      	ldr	r3, [pc, #368]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a148:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a14a:	f7ff f8a2 	bl	8009292 <RadioStandby>
        RadioSetModem( radio_modem );
 800a14e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fa4a 	bl	80085ec <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a158:	485a      	ldr	r0, [pc, #360]	; (800a2c4 <RadioSetTxGenericConfig+0x2f0>)
 800a15a:	f000 fe63 	bl	800ae24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a15e:	485a      	ldr	r0, [pc, #360]	; (800a2c8 <RadioSetTxGenericConfig+0x2f4>)
 800a160:	f000 ff32 	bl	800afc8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 f9fa 	bl	800a562 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	8a1b      	ldrh	r3, [r3, #16]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 fa44 	bl	800a600 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 fa1f 	bl	800a5c0 <SUBGRF_SetCrcPolynomial>
        break;
 800a182:	e13f      	b.n	800a404 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d102      	bne.n	800a192 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a190:	e14c      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	7c9b      	ldrb	r3, [r3, #18]
 800a196:	2b08      	cmp	r3, #8
 800a198:	d902      	bls.n	800a1a0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a19e:	e145      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6899      	ldr	r1, [r3, #8]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	7c9b      	ldrb	r3, [r3, #18]
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 ff56 	bl	800c060 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a1b4:	4b40      	ldr	r3, [pc, #256]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a3d      	ldr	r2, [pc, #244]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1c2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	7cda      	ldrb	r2, [r3, #19]
 800a1c8:	4b3b      	ldr	r3, [pc, #236]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	4a39      	ldr	r2, [pc, #228]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1d4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a1d6:	4b38      	ldr	r3, [pc, #224]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	4b34      	ldr	r3, [pc, #208]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1e8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a1ea:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	7c9b      	ldrb	r3, [r3, #18]
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1fa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a1fc:	4b2e      	ldr	r3, [pc, #184]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	7d9b      	ldrb	r3, [r3, #22]
 800a206:	2b02      	cmp	r3, #2
 800a208:	d003      	beq.n	800a212 <RadioSetTxGenericConfig+0x23e>
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	7d1b      	ldrb	r3, [r3, #20]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d12a      	bne.n	800a268 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	7d5b      	ldrb	r3, [r3, #21]
 800a216:	2bf1      	cmp	r3, #241	; 0xf1
 800a218:	d00a      	beq.n	800a230 <RadioSetTxGenericConfig+0x25c>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	7d5b      	ldrb	r3, [r3, #21]
 800a21e:	2bf2      	cmp	r3, #242	; 0xf2
 800a220:	d006      	beq.n	800a230 <RadioSetTxGenericConfig+0x25c>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	7d5b      	ldrb	r3, [r3, #21]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d002      	beq.n	800a230 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22e:	e0fd      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a230:	2301      	movs	r3, #1
 800a232:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <RadioSetTxGenericConfig+0x2e8>)
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <RadioSetTxGenericConfig+0x2ec>)
 800a242:	4618      	mov	r0, r3
 800a244:	f001 fad2 	bl	800b7ec <RFW_Init>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 800a24e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a252:	e0eb      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a254:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a256:	2200      	movs	r2, #0
 800a258:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a260:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a262:	2200      	movs	r2, #0
 800a264:	755a      	strb	r2, [r3, #21]
        {
 800a266:	e00b      	b.n	800a280 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	7d5a      	ldrb	r2, [r3, #21]
 800a26c:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a26e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	7d9a      	ldrb	r2, [r3, #22]
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a276:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	7d1a      	ldrb	r2, [r3, #20]
 800a27c:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <RadioSetTxGenericConfig+0x2e4>)
 800a27e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a280:	f7ff f807 	bl	8009292 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a284:	2000      	movs	r0, #0
 800a286:	f7fe f9b1 	bl	80085ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a28a:	480e      	ldr	r0, [pc, #56]	; (800a2c4 <RadioSetTxGenericConfig+0x2f0>)
 800a28c:	f000 fdca 	bl	800ae24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a290:	480d      	ldr	r0, [pc, #52]	; (800a2c8 <RadioSetTxGenericConfig+0x2f4>)
 800a292:	f000 fe99 	bl	800afc8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 f961 	bl	800a562 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	8a1b      	ldrh	r3, [r3, #16]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f9ab 	bl	800a600 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	899b      	ldrh	r3, [r3, #12]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f986 	bl	800a5c0 <SUBGRF_SetCrcPolynomial>
        break;
 800a2b4:	e0a6      	b.n	800a404 <RadioSetTxGenericConfig+0x430>
 800a2b6:	bf00      	nop
 800a2b8:	20001418 	.word	0x20001418
 800a2bc:	20001414 	.word	0x20001414
 800a2c0:	20001474 	.word	0x20001474
 800a2c4:	20001450 	.word	0x20001450
 800a2c8:	20001426 	.word	0x20001426
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a2cc:	4b59      	ldr	r3, [pc, #356]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	4b56      	ldr	r3, [pc, #344]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a2da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785a      	ldrb	r2, [r3, #1]
 800a2e2:	4b54      	ldr	r3, [pc, #336]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	789a      	ldrb	r2, [r3, #2]
 800a2ec:	4b51      	ldr	r3, [pc, #324]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a2ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	78db      	ldrb	r3, [r3, #3]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d010      	beq.n	800a31c <RadioSetTxGenericConfig+0x348>
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	dc20      	bgt.n	800a340 <RadioSetTxGenericConfig+0x36c>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <RadioSetTxGenericConfig+0x334>
 800a302:	2b01      	cmp	r3, #1
 800a304:	d005      	beq.n	800a312 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 800a306:	e01b      	b.n	800a340 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a308:	4b4a      	ldr	r3, [pc, #296]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a310:	e017      	b.n	800a342 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a312:	4b48      	ldr	r3, [pc, #288]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a31a:	e012      	b.n	800a342 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b0b      	cmp	r3, #11
 800a322:	d003      	beq.n	800a32c <RadioSetTxGenericConfig+0x358>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b0c      	cmp	r3, #12
 800a32a:	d104      	bne.n	800a336 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a32c:	4b41      	ldr	r3, [pc, #260]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a334:	e005      	b.n	800a342 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a336:	4b3f      	ldr	r3, [pc, #252]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800a33e:	e000      	b.n	800a342 <RadioSetTxGenericConfig+0x36e>
            break;
 800a340:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a342:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a344:	2201      	movs	r2, #1
 800a346:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	889a      	ldrh	r2, [r3, #4]
 800a34c:	4b39      	ldr	r3, [pc, #228]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a34e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	799a      	ldrb	r2, [r3, #6]
 800a354:	4b37      	ldr	r3, [pc, #220]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a356:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	79da      	ldrb	r2, [r3, #7]
 800a35c:	4b35      	ldr	r3, [pc, #212]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a35e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	7a1a      	ldrb	r2, [r3, #8]
 800a366:	4b33      	ldr	r3, [pc, #204]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800a36c:	f7fe ff91 	bl	8009292 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a370:	2001      	movs	r0, #1
 800a372:	f7fe f93b 	bl	80085ec <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a376:	4830      	ldr	r0, [pc, #192]	; (800a438 <RadioSetTxGenericConfig+0x464>)
 800a378:	f000 fd54 	bl	800ae24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a37c:	482f      	ldr	r0, [pc, #188]	; (800a43c <RadioSetTxGenericConfig+0x468>)
 800a37e:	f000 fe23 	bl	800afc8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a382:	4b2c      	ldr	r3, [pc, #176]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a388:	2b06      	cmp	r3, #6
 800a38a:	d10d      	bne.n	800a3a8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a38c:	f640 0089 	movw	r0, #2185	; 0x889
 800a390:	f000 ff76 	bl	800b280 <SUBGRF_ReadRegister>
 800a394:	4603      	mov	r3, r0
 800a396:	f023 0304 	bic.w	r3, r3, #4
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	4619      	mov	r1, r3
 800a39e:	f640 0089 	movw	r0, #2185	; 0x889
 800a3a2:	f000 ff59 	bl	800b258 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 800a3a6:	e02d      	b.n	800a404 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a3a8:	f640 0089 	movw	r0, #2185	; 0x889
 800a3ac:	f000 ff68 	bl	800b280 <SUBGRF_ReadRegister>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f043 0304 	orr.w	r3, r3, #4
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	f640 0089 	movw	r0, #2185	; 0x889
 800a3be:	f000 ff4b 	bl	800b258 <SUBGRF_WriteRegister>
        break;
 800a3c2:	e01f      	b.n	800a404 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <RadioSetTxGenericConfig+0x402>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3d4:	d902      	bls.n	800a3dc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3da:	e027      	b.n	800a42c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800a3dc:	2003      	movs	r0, #3
 800a3de:	f7fe f905 	bl	80085ec <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a11      	ldr	r2, [pc, #68]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a3f0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a3f4:	2216      	movs	r2, #22
 800a3f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a3fa:	480f      	ldr	r0, [pc, #60]	; (800a438 <RadioSetTxGenericConfig+0x464>)
 800a3fc:	f000 fd12 	bl	800ae24 <SUBGRF_SetModulationParams>
        break;
 800a400:	e000      	b.n	800a404 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800a402:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 f841 	bl	800b490 <SUBGRF_SetRfTxPower>
 800a40e:	4603      	mov	r3, r0
 800a410:	461a      	mov	r2, r3
 800a412:	4b08      	ldr	r3, [pc, #32]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a414:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a41a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fa05 	bl	800b82e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a424:	4a03      	ldr	r2, [pc, #12]	; (800a434 <RadioSetTxGenericConfig+0x460>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6053      	str	r3, [r2, #4]
    return 0;
 800a42a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3738      	adds	r7, #56	; 0x38
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20001418 	.word	0x20001418
 800a438:	20001450 	.word	0x20001450
 800a43c:	20001426 	.word	0x20001426

0800a440 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a44e:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <SUBGRF_Init+0x78>)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a454:	f7f7 fb94 	bl	8001b80 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a458:	2002      	movs	r0, #2
 800a45a:	f001 f8e5 	bl	800b628 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a45e:	4b17      	ldr	r3, [pc, #92]	; (800a4bc <SUBGRF_Init+0x7c>)
 800a460:	2200      	movs	r2, #0
 800a462:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a464:	2000      	movs	r0, #0
 800a466:	f000 f977 	bl	800a758 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a46a:	f001 fd37 	bl	800bedc <RBI_IsTCXO>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b01      	cmp	r3, #1
 800a472:	d10e      	bne.n	800a492 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a474:	2140      	movs	r1, #64	; 0x40
 800a476:	2001      	movs	r0, #1
 800a478:	f000 fb78 	bl	800ab6c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a47c:	2100      	movs	r1, #0
 800a47e:	f640 1011 	movw	r0, #2321	; 0x911
 800a482:	f000 fee9 	bl	800b258 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a486:	237f      	movs	r3, #127	; 0x7f
 800a488:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a48a:	7b38      	ldrb	r0, [r7, #12]
 800a48c:	f000 fa85 	bl	800a99a <SUBGRF_Calibrate>
 800a490:	e009      	b.n	800a4a6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a492:	2120      	movs	r1, #32
 800a494:	f640 1011 	movw	r0, #2321	; 0x911
 800a498:	f000 fede 	bl	800b258 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a49c:	2120      	movs	r1, #32
 800a49e:	f640 1012 	movw	r0, #2322	; 0x912
 800a4a2:	f000 fed9 	bl	800b258 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800a4a6:	f001 fcfd 	bl	800bea4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a4aa:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <SUBGRF_Init+0x80>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	701a      	strb	r2, [r3, #0]
}
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	200014b0 	.word	0x200014b0
 800a4bc:	200014ac 	.word	0x200014ac
 800a4c0:	200014a4 	.word	0x200014a4

0800a4c4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <SUBGRF_GetOperatingMode+0x10>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bc80      	pop	{r7}
 800a4d2:	4770      	bx	lr
 800a4d4:	200014a4 	.word	0x200014a4

0800a4d8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	f000 ff20 	bl	800b330 <SUBGRF_WriteBuffer>
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4613      	mov	r3, r2
 800a504:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a50a:	f107 0317 	add.w	r3, r7, #23
 800a50e:	4619      	mov	r1, r3
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f000 fe23 	bl	800b15c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	79fa      	ldrb	r2, [r7, #7]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d201      	bcs.n	800a524 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a520:	2301      	movs	r3, #1
 800a522:	e007      	b.n	800a534 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a524:	7df8      	ldrb	r0, [r7, #23]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	68f9      	ldr	r1, [r7, #12]
 800a52e:	f000 ff21 	bl	800b374 <SUBGRF_ReadBuffer>

    return 0;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	460b      	mov	r3, r1
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a54a:	7afb      	ldrb	r3, [r7, #11]
 800a54c:	4619      	mov	r1, r3
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff ffc2 	bl	800a4d8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f91b 	bl	800a790 <SUBGRF_SetTx>
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a56a:	2208      	movs	r2, #8
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a572:	f000 fe99 	bl	800b2a8 <SUBGRF_WriteRegisters>
    return 0;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	b29b      	uxth	r3, r3
 800a590:	b2db      	uxtb	r3, r3
 800a592:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a59a:	f000 fb6b 	bl	800ac74 <SUBGRF_GetPacketType>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d108      	bne.n	800a5b6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a5a4:	f107 030c 	add.w	r3, r7, #12
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a5b0:	f000 fe7a 	bl	800b2a8 <SUBGRF_WriteRegisters>
            break;
 800a5b4:	e000      	b.n	800a5b8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a5b6:	bf00      	nop
    }
}
 800a5b8:	bf00      	nop
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a5da:	f000 fb4b 	bl	800ac74 <SUBGRF_GetPacketType>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d108      	bne.n	800a5f6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a5e4:	f107 030c 	add.w	r3, r7, #12
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	f240 60be 	movw	r0, #1726	; 0x6be
 800a5f0:	f000 fe5a 	bl	800b2a8 <SUBGRF_WriteRegisters>
            break;
 800a5f4:	e000      	b.n	800a5f8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a5f6:	bf00      	nop
    }
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a60e:	f000 fb31 	bl	800ac74 <SUBGRF_GetPacketType>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d121      	bne.n	800a65c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a618:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a61c:	f000 fe30 	bl	800b280 <SUBGRF_ReadRegister>
 800a620:	4603      	mov	r3, r0
 800a622:	f023 0301 	bic.w	r3, r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a628:	88fb      	ldrh	r3, [r7, #6]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b25b      	sxtb	r3, r3
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	b25a      	sxtb	r2, r3
 800a636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	b25b      	sxtb	r3, r3
 800a63e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	4619      	mov	r1, r3
 800a644:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a648:	f000 fe06 	bl	800b258 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a64c:	88fb      	ldrh	r3, [r7, #6]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	4619      	mov	r1, r3
 800a652:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a656:	f000 fdff 	bl	800b258 <SUBGRF_WriteRegister>
            break;
 800a65a:	e000      	b.n	800a65e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a65c:	bf00      	nop
    }
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b082      	sub	sp, #8
 800a66a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a678:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a67c:	f000 fe00 	bl	800b280 <SUBGRF_ReadRegister>
 800a680:	4603      	mov	r3, r0
 800a682:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	f023 0301 	bic.w	r3, r3, #1
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	4619      	mov	r1, r3
 800a68e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a692:	f000 fde1 	bl	800b258 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a696:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a69a:	f000 fdf1 	bl	800b280 <SUBGRF_ReadRegister>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a6a2:	79bb      	ldrb	r3, [r7, #6]
 800a6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a6b0:	f000 fdd2 	bl	800b258 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a6b4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a6b8:	f000 f88a 	bl	800a7d0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a6bc:	463b      	mov	r3, r7
 800a6be:	2204      	movs	r2, #4
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f640 0019 	movw	r0, #2073	; 0x819
 800a6c6:	f000 fe11 	bl	800b2ec <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f000 f844 	bl	800a758 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a6d8:	f000 fdbe 	bl	800b258 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a6dc:	79bb      	ldrb	r3, [r7, #6]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a6e4:	f000 fdb8 	bl	800b258 <SUBGRF_WriteRegister>

    return number;
 800a6e8:	683b      	ldr	r3, [r7, #0]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f001 fbd8 	bl	800beb2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a702:	2002      	movs	r0, #2
 800a704:	f000 ff90 	bl	800b628 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a708:	793b      	ldrb	r3, [r7, #4]
 800a70a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a714:	793b      	ldrb	r3, [r7, #4]
 800a716:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a724:	793b      	ldrb	r3, [r7, #4]
 800a726:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a72e:	4313      	orrs	r3, r2
 800a730:	b25b      	sxtb	r3, r3
 800a732:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a734:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a736:	f107 030f 	add.w	r3, r7, #15
 800a73a:	2201      	movs	r2, #1
 800a73c:	4619      	mov	r1, r3
 800a73e:	2084      	movs	r0, #132	; 0x84
 800a740:	f000 fe3a 	bl	800b3b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a744:	4b03      	ldr	r3, [pc, #12]	; (800a754 <SUBGRF_SetSleep+0x60>)
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	200014a4 	.word	0x200014a4

0800a758 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a762:	1dfb      	adds	r3, r7, #7
 800a764:	2201      	movs	r2, #1
 800a766:	4619      	mov	r1, r3
 800a768:	2080      	movs	r0, #128	; 0x80
 800a76a:	f000 fe25 	bl	800b3b8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <SUBGRF_SetStandby+0x34>)
 800a776:	2201      	movs	r2, #1
 800a778:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a77a:	e002      	b.n	800a782 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a77c:	4b03      	ldr	r3, [pc, #12]	; (800a78c <SUBGRF_SetStandby+0x34>)
 800a77e:	2202      	movs	r2, #2
 800a780:	701a      	strb	r2, [r3, #0]
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	200014a4 	.word	0x200014a4

0800a790 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a798:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <SUBGRF_SetTx+0x3c>)
 800a79a:	2204      	movs	r2, #4
 800a79c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	0c1b      	lsrs	r3, r3, #16
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	0a1b      	lsrs	r3, r3, #8
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a7b4:	f107 030c 	add.w	r3, r7, #12
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	2083      	movs	r0, #131	; 0x83
 800a7be:	f000 fdfb 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	200014a4 	.word	0x200014a4

0800a7d0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <SUBGRF_SetRx+0x3c>)
 800a7da:	2205      	movs	r2, #5
 800a7dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	0c1b      	lsrs	r3, r3, #16
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	0a1b      	lsrs	r3, r3, #8
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a7f4:	f107 030c 	add.w	r3, r7, #12
 800a7f8:	2203      	movs	r2, #3
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	2082      	movs	r0, #130	; 0x82
 800a7fe:	f000 fddb 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a802:	bf00      	nop
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200014a4 	.word	0x200014a4

0800a810 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a818:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <SUBGRF_SetRxBoosted+0x44>)
 800a81a:	2205      	movs	r2, #5
 800a81c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a81e:	2197      	movs	r1, #151	; 0x97
 800a820:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a824:	f000 fd18 	bl	800b258 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	b2db      	uxtb	r3, r3
 800a836:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	2203      	movs	r2, #3
 800a844:	4619      	mov	r1, r3
 800a846:	2082      	movs	r0, #130	; 0x82
 800a848:	f000 fdb6 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	200014a4 	.word	0x200014a4

0800a858 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	0c1b      	lsrs	r3, r3, #16
 800a866:	b2db      	uxtb	r3, r3
 800a868:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	0a1b      	lsrs	r3, r3, #8
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	0c1b      	lsrs	r3, r3, #16
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b2db      	uxtb	r3, r3
 800a886:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	2206      	movs	r2, #6
 800a894:	4619      	mov	r1, r3
 800a896:	2094      	movs	r0, #148	; 0x94
 800a898:	f000 fd8e 	bl	800b3b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a89c:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <SUBGRF_SetRxDutyCycle+0x54>)
 800a89e:	2206      	movs	r2, #6
 800a8a0:	701a      	strb	r2, [r3, #0]
}
 800a8a2:	bf00      	nop
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200014a4 	.word	0x200014a4

0800a8b0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	20c5      	movs	r0, #197	; 0xc5
 800a8ba:	f000 fd7d 	bl	800b3b8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a8be:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <SUBGRF_SetCad+0x18>)
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	701a      	strb	r2, [r3, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	200014a4 	.word	0x200014a4

0800a8cc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	20d1      	movs	r0, #209	; 0xd1
 800a8d6:	f000 fd6f 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a8da:	bf00      	nop
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	20d2      	movs	r0, #210	; 0xd2
 800a8e8:	f000 fd66 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a8ec:	bf00      	nop
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a8fa:	1dfb      	adds	r3, r7, #7
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	4619      	mov	r1, r3
 800a900:	209f      	movs	r0, #159	; 0x9f
 800a902:	f000 fd59 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a906:	bf00      	nop
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	4603      	mov	r3, r0
 800a916:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a918:	1dfb      	adds	r3, r7, #7
 800a91a:	2201      	movs	r2, #1
 800a91c:	4619      	mov	r1, r3
 800a91e:	20a0      	movs	r0, #160	; 0xa0
 800a920:	f000 fd4a 	bl	800b3b8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b3f      	cmp	r3, #63	; 0x3f
 800a928:	d91c      	bls.n	800a964 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	085b      	lsrs	r3, r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a938:	e005      	b.n	800a946 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	089b      	lsrs	r3, r3, #2
 800a93e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	3301      	adds	r3, #1
 800a944:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	2b1f      	cmp	r3, #31
 800a94a:	d8f6      	bhi.n	800a93a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	b2da      	uxtb	r2, r3
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	4413      	add	r3, r2
 800a956:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a958:	7b7b      	ldrb	r3, [r7, #13]
 800a95a:	4619      	mov	r1, r3
 800a95c:	f240 7006 	movw	r0, #1798	; 0x706
 800a960:	f000 fc7a 	bl	800b258 <SUBGRF_WriteRegister>
    }
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a972:	f001 faba 	bl	800beea <RBI_IsDCDC>
 800a976:	4603      	mov	r3, r0
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d102      	bne.n	800a982 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a97c:	2301      	movs	r3, #1
 800a97e:	71fb      	strb	r3, [r7, #7]
 800a980:	e001      	b.n	800a986 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a982:	2300      	movs	r3, #0
 800a984:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a986:	1dfb      	adds	r3, r7, #7
 800a988:	2201      	movs	r2, #1
 800a98a:	4619      	mov	r1, r3
 800a98c:	2096      	movs	r0, #150	; 0x96
 800a98e:	f000 fd13 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a9a2:	793b      	ldrb	r3, [r7, #4]
 800a9a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	019b      	lsls	r3, r3, #6
 800a9ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a9ae:	793b      	ldrb	r3, [r7, #4]
 800a9b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a9be:	793b      	ldrb	r3, [r7, #4]
 800a9c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a9c8:	b25b      	sxtb	r3, r3
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a9ce:	793b      	ldrb	r3, [r7, #4]
 800a9d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a9de:	793b      	ldrb	r3, [r7, #4]
 800a9e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a9ee:	793b      	ldrb	r3, [r7, #4]
 800a9f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a9f8:	b25b      	sxtb	r3, r3
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a9fe:	793b      	ldrb	r3, [r7, #4]
 800aa00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b25b      	sxtb	r3, r3
 800aa0c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800aa0e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800aa10:	f107 030f 	add.w	r3, r7, #15
 800aa14:	2201      	movs	r2, #1
 800aa16:	4619      	mov	r1, r3
 800aa18:	2089      	movs	r0, #137	; 0x89
 800aa1a:	f000 fccd 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1b      	ldr	r2, [pc, #108]	; (800aaa0 <SUBGRF_CalibrateImage+0x78>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d904      	bls.n	800aa42 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800aa38:	23e1      	movs	r3, #225	; 0xe1
 800aa3a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800aa3c:	23e9      	movs	r3, #233	; 0xe9
 800aa3e:	737b      	strb	r3, [r7, #13]
 800aa40:	e022      	b.n	800aa88 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a17      	ldr	r2, [pc, #92]	; (800aaa4 <SUBGRF_CalibrateImage+0x7c>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d904      	bls.n	800aa54 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800aa4a:	23d7      	movs	r3, #215	; 0xd7
 800aa4c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800aa4e:	23db      	movs	r3, #219	; 0xdb
 800aa50:	737b      	strb	r3, [r7, #13]
 800aa52:	e019      	b.n	800aa88 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <SUBGRF_CalibrateImage+0x80>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d904      	bls.n	800aa66 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800aa5c:	23c1      	movs	r3, #193	; 0xc1
 800aa5e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800aa60:	23c5      	movs	r3, #197	; 0xc5
 800aa62:	737b      	strb	r3, [r7, #13]
 800aa64:	e010      	b.n	800aa88 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a10      	ldr	r2, [pc, #64]	; (800aaac <SUBGRF_CalibrateImage+0x84>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d904      	bls.n	800aa78 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800aa6e:	2375      	movs	r3, #117	; 0x75
 800aa70:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800aa72:	2381      	movs	r3, #129	; 0x81
 800aa74:	737b      	strb	r3, [r7, #13]
 800aa76:	e007      	b.n	800aa88 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a0d      	ldr	r2, [pc, #52]	; (800aab0 <SUBGRF_CalibrateImage+0x88>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d903      	bls.n	800aa88 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800aa80:	236b      	movs	r3, #107	; 0x6b
 800aa82:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800aa84:	236f      	movs	r3, #111	; 0x6f
 800aa86:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	4619      	mov	r1, r3
 800aa90:	2098      	movs	r0, #152	; 0x98
 800aa92:	f000 fc91 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	35a4e900 	.word	0x35a4e900
 800aaa4:	32a9f880 	.word	0x32a9f880
 800aaa8:	2de54480 	.word	0x2de54480
 800aaac:	1b6b0b00 	.word	0x1b6b0b00
 800aab0:	1954fc40 	.word	0x1954fc40

0800aab4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	4608      	mov	r0, r1
 800aabe:	4611      	mov	r1, r2
 800aac0:	461a      	mov	r2, r3
 800aac2:	4623      	mov	r3, r4
 800aac4:	71fb      	strb	r3, [r7, #7]
 800aac6:	4603      	mov	r3, r0
 800aac8:	71bb      	strb	r3, [r7, #6]
 800aaca:	460b      	mov	r3, r1
 800aacc:	717b      	strb	r3, [r7, #5]
 800aace:	4613      	mov	r3, r2
 800aad0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800aad2:	79fb      	ldrb	r3, [r7, #7]
 800aad4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800aad6:	79bb      	ldrb	r3, [r7, #6]
 800aad8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800aada:	797b      	ldrb	r3, [r7, #5]
 800aadc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800aade:	793b      	ldrb	r3, [r7, #4]
 800aae0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800aae2:	f107 030c 	add.w	r3, r7, #12
 800aae6:	2204      	movs	r2, #4
 800aae8:	4619      	mov	r1, r3
 800aaea:	2095      	movs	r0, #149	; 0x95
 800aaec:	f000 fc64 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800aaf0:	bf00      	nop
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd90      	pop	{r4, r7, pc}

0800aaf8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800aaf8:	b590      	push	{r4, r7, lr}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4623      	mov	r3, r4
 800ab08:	80fb      	strh	r3, [r7, #6]
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	80bb      	strh	r3, [r7, #4]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	807b      	strh	r3, [r7, #2]
 800ab12:	4613      	mov	r3, r2
 800ab14:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ab16:	88fb      	ldrh	r3, [r7, #6]
 800ab18:	0a1b      	lsrs	r3, r3, #8
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ab26:	88bb      	ldrh	r3, [r7, #4]
 800ab28:	0a1b      	lsrs	r3, r3, #8
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ab30:	88bb      	ldrh	r3, [r7, #4]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ab36:	887b      	ldrh	r3, [r7, #2]
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ab40:	887b      	ldrh	r3, [r7, #2]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ab46:	883b      	ldrh	r3, [r7, #0]
 800ab48:	0a1b      	lsrs	r3, r3, #8
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800ab50:	883b      	ldrh	r3, [r7, #0]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	2008      	movs	r0, #8
 800ab60:	f000 fc2a 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd90      	pop	{r4, r7, pc}

0800ab6c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	0c1b      	lsrs	r3, r3, #16
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	0a1b      	lsrs	r3, r3, #8
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ab98:	f107 030c 	add.w	r3, r7, #12
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	4619      	mov	r1, r3
 800aba0:	2097      	movs	r0, #151	; 0x97
 800aba2:	f000 fc09 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800abb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800abbe:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <SUBGRF_SetRfFrequency+0x84>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f083 0301 	eor.w	r3, r3, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d005      	beq.n	800abd8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff ff2b 	bl	800aa28 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800abd2:	4b18      	ldr	r3, [pc, #96]	; (800ac34 <SUBGRF_SetRfFrequency+0x84>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	461c      	mov	r4, r3
 800abde:	4615      	mov	r5, r2
 800abe0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800abe4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800abe8:	4a13      	ldr	r2, [pc, #76]	; (800ac38 <SUBGRF_SetRfFrequency+0x88>)
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f7f6 f821 	bl	8000c38 <__aeabi_uldivmod>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4613      	mov	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0e1b      	lsrs	r3, r3, #24
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	0c1b      	lsrs	r3, r3, #16
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	0a1b      	lsrs	r3, r3, #8
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	2204      	movs	r2, #4
 800ac22:	4619      	mov	r1, r3
 800ac24:	2086      	movs	r0, #134	; 0x86
 800ac26:	f000 fbc7 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ac34:	200014ac 	.word	0x200014ac
 800ac38:	01e84800 	.word	0x01e84800

0800ac3c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800ac46:	79fa      	ldrb	r2, [r7, #7]
 800ac48:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <SUBGRF_SetPacketType+0x34>)
 800ac4a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d104      	bne.n	800ac5c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800ac52:	2100      	movs	r1, #0
 800ac54:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800ac58:	f000 fafe 	bl	800b258 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800ac5c:	1dfb      	adds	r3, r7, #7
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4619      	mov	r1, r3
 800ac62:	208a      	movs	r0, #138	; 0x8a
 800ac64:	f000 fba8 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200014a5 	.word	0x200014a5

0800ac74 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0
    return PacketType;
 800ac78:	4b02      	ldr	r3, [pc, #8]	; (800ac84 <SUBGRF_GetPacketType+0x10>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr
 800ac84:	200014a5 	.word	0x200014a5

0800ac88 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	71fb      	strb	r3, [r7, #7]
 800ac92:	460b      	mov	r3, r1
 800ac94:	71bb      	strb	r3, [r7, #6]
 800ac96:	4613      	mov	r3, r2
 800ac98:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d149      	bne.n	800ad34 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800aca0:	2000      	movs	r0, #0
 800aca2:	f001 f929 	bl	800bef8 <RBI_GetRFOMaxPowerConfig>
 800aca6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800aca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	429a      	cmp	r2, r3
 800acb0:	da01      	bge.n	800acb6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b0e      	cmp	r3, #14
 800acba:	d10e      	bne.n	800acda <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800acbc:	2301      	movs	r3, #1
 800acbe:	2201      	movs	r2, #1
 800acc0:	2100      	movs	r1, #0
 800acc2:	2004      	movs	r0, #4
 800acc4:	f7ff fef6 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800acc8:	79ba      	ldrb	r2, [r7, #6]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	b2db      	uxtb	r3, r3
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	330e      	adds	r3, #14
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	71bb      	strb	r3, [r7, #6]
 800acd8:	e01f      	b.n	800ad1a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b0a      	cmp	r3, #10
 800acde:	d10e      	bne.n	800acfe <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800ace0:	2301      	movs	r3, #1
 800ace2:	2201      	movs	r2, #1
 800ace4:	2100      	movs	r1, #0
 800ace6:	2001      	movs	r0, #1
 800ace8:	f7ff fee4 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800acec:	79ba      	ldrb	r2, [r7, #6]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	330d      	adds	r3, #13
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	71bb      	strb	r3, [r7, #6]
 800acfc:	e00d      	b.n	800ad1a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800acfe:	2301      	movs	r3, #1
 800ad00:	2201      	movs	r2, #1
 800ad02:	2100      	movs	r1, #0
 800ad04:	2006      	movs	r0, #6
 800ad06:	f7ff fed5 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ad0a:	79ba      	ldrb	r2, [r7, #6]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	330e      	adds	r3, #14
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800ad1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad1e:	f113 0f11 	cmn.w	r3, #17
 800ad22:	da01      	bge.n	800ad28 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800ad24:	23ef      	movs	r3, #239	; 0xef
 800ad26:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800ad28:	2118      	movs	r1, #24
 800ad2a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ad2e:	f000 fa93 	bl	800b258 <SUBGRF_WriteRegister>
 800ad32:	e067      	b.n	800ae04 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800ad34:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ad38:	f000 faa2 	bl	800b280 <SUBGRF_ReadRegister>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f043 031e 	orr.w	r3, r3, #30
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	4619      	mov	r1, r3
 800ad46:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ad4a:	f000 fa85 	bl	800b258 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800ad4e:	2001      	movs	r0, #1
 800ad50:	f001 f8d2 	bl	800bef8 <RBI_GetRFOMaxPowerConfig>
 800ad54:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800ad56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	da01      	bge.n	800ad64 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b14      	cmp	r3, #20
 800ad68:	d10e      	bne.n	800ad88 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2105      	movs	r1, #5
 800ad70:	2003      	movs	r0, #3
 800ad72:	f7ff fe9f 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad76:	79ba      	ldrb	r2, [r7, #6]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	3316      	adds	r3, #22
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	71bb      	strb	r3, [r7, #6]
 800ad86:	e031      	b.n	800adec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b11      	cmp	r3, #17
 800ad8c:	d10e      	bne.n	800adac <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800ad8e:	2301      	movs	r3, #1
 800ad90:	2200      	movs	r2, #0
 800ad92:	2103      	movs	r1, #3
 800ad94:	2002      	movs	r0, #2
 800ad96:	f7ff fe8d 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad9a:	79ba      	ldrb	r2, [r7, #6]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	3316      	adds	r3, #22
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	71bb      	strb	r3, [r7, #6]
 800adaa:	e01f      	b.n	800adec <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b0e      	cmp	r3, #14
 800adb0:	d10e      	bne.n	800add0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800adb2:	2301      	movs	r3, #1
 800adb4:	2200      	movs	r2, #0
 800adb6:	2102      	movs	r1, #2
 800adb8:	2002      	movs	r0, #2
 800adba:	f7ff fe7b 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800adbe:	79ba      	ldrb	r2, [r7, #6]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	330e      	adds	r3, #14
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	71bb      	strb	r3, [r7, #6]
 800adce:	e00d      	b.n	800adec <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800add0:	2301      	movs	r3, #1
 800add2:	2200      	movs	r2, #0
 800add4:	2107      	movs	r1, #7
 800add6:	2004      	movs	r0, #4
 800add8:	f7ff fe6c 	bl	800aab4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800addc:	79ba      	ldrb	r2, [r7, #6]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	3316      	adds	r3, #22
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800adec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800adf0:	f113 0f09 	cmn.w	r3, #9
 800adf4:	da01      	bge.n	800adfa <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800adf6:	23f7      	movs	r3, #247	; 0xf7
 800adf8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800adfa:	2138      	movs	r1, #56	; 0x38
 800adfc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ae00:	f000 fa2a 	bl	800b258 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ae04:	79bb      	ldrb	r3, [r7, #6]
 800ae06:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800ae08:	797b      	ldrb	r3, [r7, #5]
 800ae0a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800ae0c:	f107 0308 	add.w	r3, r7, #8
 800ae10:	2202      	movs	r2, #2
 800ae12:	4619      	mov	r1, r3
 800ae14:	208e      	movs	r0, #142	; 0x8e
 800ae16:	f000 facf 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800ae24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae28:	b086      	sub	sp, #24
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ae32:	4a61      	ldr	r2, [pc, #388]	; (800afb8 <SUBGRF_SetModulationParams+0x194>)
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae3c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	781a      	ldrb	r2, [r3, #0]
 800ae44:	4b5d      	ldr	r3, [pc, #372]	; (800afbc <SUBGRF_SetModulationParams+0x198>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d004      	beq.n	800ae56 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff fef3 	bl	800ac3c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	f200 80a5 	bhi.w	800afaa <SUBGRF_SetModulationParams+0x186>
 800ae60:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <SUBGRF_SetModulationParams+0x44>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800ae79 	.word	0x0800ae79
 800ae6c:	0800af39 	.word	0x0800af39
 800ae70:	0800aefb 	.word	0x0800aefb
 800ae74:	0800af67 	.word	0x0800af67
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800ae78:	2308      	movs	r3, #8
 800ae7a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	4a4f      	ldr	r2, [pc, #316]	; (800afc0 <SUBGRF_SetModulationParams+0x19c>)
 800ae82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae86:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	0c1b      	lsrs	r3, r3, #16
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7b1b      	ldrb	r3, [r3, #12]
 800aea2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	7b5b      	ldrb	r3, [r3, #13]
 800aea8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	461c      	mov	r4, r3
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800aeb8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800aebc:	4a41      	ldr	r2, [pc, #260]	; (800afc4 <SUBGRF_SetModulationParams+0x1a0>)
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	4640      	mov	r0, r8
 800aec4:	4649      	mov	r1, r9
 800aec6:	f7f5 feb7 	bl	8000c38 <__aeabi_uldivmod>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4613      	mov	r3, r2
 800aed0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	0a1b      	lsrs	r3, r3, #8
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aee8:	7cfb      	ldrb	r3, [r7, #19]
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	4619      	mov	r1, r3
 800aef2:	208b      	movs	r0, #139	; 0x8b
 800aef4:	f000 fa60 	bl	800b3b8 <SUBGRF_WriteCommand>
        break;
 800aef8:	e058      	b.n	800afac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800aefa:	2304      	movs	r3, #4
 800aefc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	4a2f      	ldr	r2, [pc, #188]	; (800afc0 <SUBGRF_SetModulationParams+0x19c>)
 800af04:	fbb2 f3f3 	udiv	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	0c1b      	lsrs	r3, r3, #16
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	0a1b      	lsrs	r3, r3, #8
 800af16:	b2db      	uxtb	r3, r3
 800af18:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7d1b      	ldrb	r3, [r3, #20]
 800af24:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800af26:	7cfb      	ldrb	r3, [r7, #19]
 800af28:	b29a      	uxth	r2, r3
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	4619      	mov	r1, r3
 800af30:	208b      	movs	r0, #139	; 0x8b
 800af32:	f000 fa41 	bl	800b3b8 <SUBGRF_WriteCommand>
        break;
 800af36:	e039      	b.n	800afac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800af38:	2304      	movs	r3, #4
 800af3a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7e1b      	ldrb	r3, [r3, #24]
 800af40:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7e5b      	ldrb	r3, [r3, #25]
 800af46:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7e9b      	ldrb	r3, [r3, #26]
 800af4c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7edb      	ldrb	r3, [r3, #27]
 800af52:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800af54:	7cfb      	ldrb	r3, [r7, #19]
 800af56:	b29a      	uxth	r2, r3
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	4619      	mov	r1, r3
 800af5e:	208b      	movs	r0, #139	; 0x8b
 800af60:	f000 fa2a 	bl	800b3b8 <SUBGRF_WriteCommand>

        break;
 800af64:	e022      	b.n	800afac <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800af66:	2305      	movs	r3, #5
 800af68:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	4a14      	ldr	r2, [pc, #80]	; (800afc0 <SUBGRF_SetModulationParams+0x19c>)
 800af70:	fbb2 f3f3 	udiv	r3, r2, r3
 800af74:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	0a1b      	lsrs	r3, r3, #8
 800af82:	b2db      	uxtb	r3, r3
 800af84:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7b1b      	ldrb	r3, [r3, #12]
 800af90:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	7b5b      	ldrb	r3, [r3, #13]
 800af96:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800af98:	7cfb      	ldrb	r3, [r7, #19]
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	4619      	mov	r1, r3
 800afa2:	208b      	movs	r0, #139	; 0x8b
 800afa4:	f000 fa08 	bl	800b3b8 <SUBGRF_WriteCommand>
        break;
 800afa8:	e000      	b.n	800afac <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800afaa:	bf00      	nop
    }
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800afb6:	bf00      	nop
 800afb8:	08011f88 	.word	0x08011f88
 800afbc:	200014a5 	.word	0x200014a5
 800afc0:	3d090000 	.word	0x3d090000
 800afc4:	01e84800 	.word	0x01e84800

0800afc8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800afd4:	4a48      	ldr	r2, [pc, #288]	; (800b0f8 <SUBGRF_SetPacketParams+0x130>)
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	ca07      	ldmia	r2, {r0, r1, r2}
 800afdc:	c303      	stmia	r3!, {r0, r1}
 800afde:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	4b45      	ldr	r3, [pc, #276]	; (800b0fc <SUBGRF_SetPacketParams+0x134>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d004      	beq.n	800aff6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fe23 	bl	800ac3c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b03      	cmp	r3, #3
 800affc:	d878      	bhi.n	800b0f0 <SUBGRF_SetPacketParams+0x128>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <SUBGRF_SetPacketParams+0x3c>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b015 	.word	0x0800b015
 800b008:	0800b0a5 	.word	0x0800b0a5
 800b00c:	0800b099 	.word	0x0800b099
 800b010:	0800b015 	.word	0x0800b015
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7a5b      	ldrb	r3, [r3, #9]
 800b018:	2bf1      	cmp	r3, #241	; 0xf1
 800b01a:	d10a      	bne.n	800b032 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b01c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b020:	f7ff faae 	bl	800a580 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b024:	f248 0005 	movw	r0, #32773	; 0x8005
 800b028:	f7ff faca 	bl	800a5c0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b02c:	2302      	movs	r3, #2
 800b02e:	75bb      	strb	r3, [r7, #22]
 800b030:	e011      	b.n	800b056 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7a5b      	ldrb	r3, [r3, #9]
 800b036:	2bf2      	cmp	r3, #242	; 0xf2
 800b038:	d10a      	bne.n	800b050 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b03a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800b03e:	f7ff fa9f 	bl	800a580 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b042:	f241 0021 	movw	r0, #4129	; 0x1021
 800b046:	f7ff fabb 	bl	800a5c0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b04a:	2306      	movs	r3, #6
 800b04c:	75bb      	strb	r3, [r7, #22]
 800b04e:	e002      	b.n	800b056 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7a5b      	ldrb	r3, [r3, #9]
 800b054:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b056:	2309      	movs	r3, #9
 800b058:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	885b      	ldrh	r3, [r3, #2]
 800b05e:	0a1b      	lsrs	r3, r3, #8
 800b060:	b29b      	uxth	r3, r3
 800b062:	b2db      	uxtb	r3, r3
 800b064:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	791b      	ldrb	r3, [r3, #4]
 800b072:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	795b      	ldrb	r3, [r3, #5]
 800b078:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	799b      	ldrb	r3, [r3, #6]
 800b07e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	79db      	ldrb	r3, [r3, #7]
 800b084:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	7a1b      	ldrb	r3, [r3, #8]
 800b08a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b08c:	7dbb      	ldrb	r3, [r7, #22]
 800b08e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7a9b      	ldrb	r3, [r3, #10]
 800b094:	753b      	strb	r3, [r7, #20]
        break;
 800b096:	e022      	b.n	800b0de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b098:	2301      	movs	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	7b1b      	ldrb	r3, [r3, #12]
 800b0a0:	733b      	strb	r3, [r7, #12]
        break;
 800b0a2:	e01c      	b.n	800b0de <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b0a4:	2306      	movs	r3, #6
 800b0a6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	89db      	ldrh	r3, [r3, #14]
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	89db      	ldrh	r3, [r3, #14]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7c1a      	ldrb	r2, [r3, #16]
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <SUBGRF_SetPacketParams+0x138>)
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	7019      	strb	r1, [r3, #0]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	7c5b      	ldrb	r3, [r3, #17]
 800b0ce:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7c9b      	ldrb	r3, [r3, #18]
 800b0d4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7cdb      	ldrb	r3, [r3, #19]
 800b0da:	747b      	strb	r3, [r7, #17]
        break;
 800b0dc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	208c      	movs	r0, #140	; 0x8c
 800b0ea:	f000 f965 	bl	800b3b8 <SUBGRF_WriteCommand>
 800b0ee:	e000      	b.n	800b0f2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800b0f0:	bf00      	nop
}
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	08011f90 	.word	0x08011f90
 800b0fc:	200014a5 	.word	0x200014a5
 800b100:	200014a6 	.word	0x200014a6

0800b104 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	460a      	mov	r2, r1
 800b10e:	71fb      	strb	r3, [r7, #7]
 800b110:	4613      	mov	r3, r2
 800b112:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b118:	79bb      	ldrb	r3, [r7, #6]
 800b11a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b11c:	f107 030c 	add.w	r3, r7, #12
 800b120:	2202      	movs	r2, #2
 800b122:	4619      	mov	r1, r3
 800b124:	208f      	movs	r0, #143	; 0x8f
 800b126:	f000 f947 	bl	800b3b8 <SUBGRF_WriteCommand>
}
 800b12a:	bf00      	nop
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b13c:	1d3b      	adds	r3, r7, #4
 800b13e:	2201      	movs	r2, #1
 800b140:	4619      	mov	r1, r3
 800b142:	2015      	movs	r0, #21
 800b144:	f000 f95a 	bl	800b3fc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b148:	793b      	ldrb	r3, [r7, #4]
 800b14a:	425b      	negs	r3, r3
 800b14c:	105b      	asrs	r3, r3, #1
 800b14e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b150:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b166:	f107 030c 	add.w	r3, r7, #12
 800b16a:	2202      	movs	r2, #2
 800b16c:	4619      	mov	r1, r3
 800b16e:	2013      	movs	r0, #19
 800b170:	f000 f944 	bl	800b3fc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b174:	f7ff fd7e 	bl	800ac74 <SUBGRF_GetPacketType>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d10d      	bne.n	800b19a <SUBGRF_GetRxBufferStatus+0x3e>
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <SUBGRF_GetRxBufferStatus+0x54>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b01      	cmp	r3, #1
 800b186:	d108      	bne.n	800b19a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b188:	f240 7002 	movw	r0, #1794	; 0x702
 800b18c:	f000 f878 	bl	800b280 <SUBGRF_ReadRegister>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	e002      	b.n	800b1a0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b19a:	7b3a      	ldrb	r2, [r7, #12]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b1a0:	7b7a      	ldrb	r2, [r7, #13]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	701a      	strb	r2, [r3, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	200014a6 	.word	0x200014a6

0800b1b4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b1bc:	f107 030c 	add.w	r3, r7, #12
 800b1c0:	2203      	movs	r2, #3
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	2014      	movs	r0, #20
 800b1c6:	f000 f919 	bl	800b3fc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b1ca:	f7ff fd53 	bl	800ac74 <SUBGRF_GetPacketType>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <SUBGRF_GetPacketStatus+0x30>
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d013      	beq.n	800b20a <SUBGRF_GetPacketStatus+0x56>
 800b1e2:	e02a      	b.n	800b23a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b1e4:	7b3a      	ldrb	r2, [r7, #12]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b1ea:	7b7b      	ldrb	r3, [r7, #13]
 800b1ec:	425b      	negs	r3, r3
 800b1ee:	105b      	asrs	r3, r3, #1
 800b1f0:	b25a      	sxtb	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	425b      	negs	r3, r3
 800b1fa:	105b      	asrs	r3, r3, #1
 800b1fc:	b25a      	sxtb	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	609a      	str	r2, [r3, #8]
            break;
 800b208:	e020      	b.n	800b24c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b20a:	7b3b      	ldrb	r3, [r7, #12]
 800b20c:	425b      	negs	r3, r3
 800b20e:	105b      	asrs	r3, r3, #1
 800b210:	b25a      	sxtb	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b216:	7b7b      	ldrb	r3, [r7, #13]
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	3302      	adds	r3, #2
 800b21c:	109b      	asrs	r3, r3, #2
 800b21e:	b25a      	sxtb	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	425b      	negs	r3, r3
 800b228:	105b      	asrs	r3, r3, #1
 800b22a:	b25a      	sxtb	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b230:	4b08      	ldr	r3, [pc, #32]	; (800b254 <SUBGRF_GetPacketStatus+0xa0>)
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	611a      	str	r2, [r3, #16]
            break;
 800b238:	e008      	b.n	800b24c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b23a:	2214      	movs	r2, #20
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 ff2d 	bl	800c09e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	220f      	movs	r2, #15
 800b248:	701a      	strb	r2, [r3, #0]
            break;
 800b24a:	bf00      	nop
    }
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200014a8 	.word	0x200014a8

0800b258 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	460a      	mov	r2, r1
 800b262:	80fb      	strh	r3, [r7, #6]
 800b264:	4613      	mov	r3, r2
 800b266:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b268:	1d7a      	adds	r2, r7, #5
 800b26a:	88f9      	ldrh	r1, [r7, #6]
 800b26c:	2301      	movs	r3, #1
 800b26e:	4803      	ldr	r0, [pc, #12]	; (800b27c <SUBGRF_WriteRegister+0x24>)
 800b270:	f7fa fc00 	bl	8005a74 <HAL_SUBGHZ_WriteRegisters>
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200011fc 	.word	0x200011fc

0800b280 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b28a:	f107 020f 	add.w	r2, r7, #15
 800b28e:	88f9      	ldrh	r1, [r7, #6]
 800b290:	2301      	movs	r3, #1
 800b292:	4804      	ldr	r0, [pc, #16]	; (800b2a4 <SUBGRF_ReadRegister+0x24>)
 800b294:	f7fa fc4d 	bl	8005b32 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b298:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	200011fc 	.word	0x200011fc

0800b2a8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	80fb      	strh	r3, [r7, #6]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b2c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2c2:	b672      	cpsid	i
}
 800b2c4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b2c6:	88bb      	ldrh	r3, [r7, #4]
 800b2c8:	88f9      	ldrh	r1, [r7, #6]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	4806      	ldr	r0, [pc, #24]	; (800b2e8 <SUBGRF_WriteRegisters+0x40>)
 800b2ce:	f7fa fbd1 	bl	8005a74 <HAL_SUBGHZ_WriteRegisters>
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f383 8810 	msr	PRIMASK, r3
}
 800b2dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b2de:	bf00      	nop
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	200011fc 	.word	0x200011fc

0800b2ec <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	6039      	str	r1, [r7, #0]
 800b2f6:	80fb      	strh	r3, [r7, #6]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b300:	60fb      	str	r3, [r7, #12]
  return(result);
 800b302:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b306:	b672      	cpsid	i
}
 800b308:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b30a:	88bb      	ldrh	r3, [r7, #4]
 800b30c:	88f9      	ldrh	r1, [r7, #6]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4806      	ldr	r0, [pc, #24]	; (800b32c <SUBGRF_ReadRegisters+0x40>)
 800b312:	f7fa fc0e 	bl	8005b32 <HAL_SUBGHZ_ReadRegisters>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f383 8810 	msr	PRIMASK, r3
}
 800b320:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b322:	bf00      	nop
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	200011fc 	.word	0x200011fc

0800b330 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	6039      	str	r1, [r7, #0]
 800b33a:	71fb      	strb	r3, [r7, #7]
 800b33c:	4613      	mov	r3, r2
 800b33e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b340:	f3ef 8310 	mrs	r3, PRIMASK
 800b344:	60fb      	str	r3, [r7, #12]
  return(result);
 800b346:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b34a:	b672      	cpsid	i
}
 800b34c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b34e:	79bb      	ldrb	r3, [r7, #6]
 800b350:	b29b      	uxth	r3, r3
 800b352:	79f9      	ldrb	r1, [r7, #7]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	4806      	ldr	r0, [pc, #24]	; (800b370 <SUBGRF_WriteBuffer+0x40>)
 800b358:	f7fa fcff 	bl	8005d5a <HAL_SUBGHZ_WriteBuffer>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	f383 8810 	msr	PRIMASK, r3
}
 800b366:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	200011fc 	.word	0x200011fc

0800b374 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
 800b380:	4613      	mov	r3, r2
 800b382:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b384:	f3ef 8310 	mrs	r3, PRIMASK
 800b388:	60fb      	str	r3, [r7, #12]
  return(result);
 800b38a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b38c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b38e:	b672      	cpsid	i
}
 800b390:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b392:	79bb      	ldrb	r3, [r7, #6]
 800b394:	b29b      	uxth	r3, r3
 800b396:	79f9      	ldrb	r1, [r7, #7]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	4806      	ldr	r0, [pc, #24]	; (800b3b4 <SUBGRF_ReadBuffer+0x40>)
 800b39c:	f7fa fd30 	bl	8005e00 <HAL_SUBGHZ_ReadBuffer>
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f383 8810 	msr	PRIMASK, r3
}
 800b3aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b3ac:	bf00      	nop
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	200011fc 	.word	0x200011fc

0800b3b8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	6039      	str	r1, [r7, #0]
 800b3c2:	71fb      	strb	r3, [r7, #7]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b3d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3d2:	b672      	cpsid	i
}
 800b3d4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b3d6:	88bb      	ldrh	r3, [r7, #4]
 800b3d8:	79f9      	ldrb	r1, [r7, #7]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	4806      	ldr	r0, [pc, #24]	; (800b3f8 <SUBGRF_WriteCommand+0x40>)
 800b3de:	f7fa fc09 	bl	8005bf4 <HAL_SUBGHZ_ExecSetCmd>
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f383 8810 	msr	PRIMASK, r3
}
 800b3ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b3ee:	bf00      	nop
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	200011fc 	.word	0x200011fc

0800b3fc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
 800b408:	4613      	mov	r3, r2
 800b40a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b40c:	f3ef 8310 	mrs	r3, PRIMASK
 800b410:	60fb      	str	r3, [r7, #12]
  return(result);
 800b412:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b416:	b672      	cpsid	i
}
 800b418:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b41a:	88bb      	ldrh	r3, [r7, #4]
 800b41c:	79f9      	ldrb	r1, [r7, #7]
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	4806      	ldr	r0, [pc, #24]	; (800b43c <SUBGRF_ReadCommand+0x40>)
 800b422:	f7fa fc46 	bl	8005cb2 <HAL_SUBGHZ_ExecGetCmd>
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f383 8810 	msr	PRIMASK, r3
}
 800b430:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b432:	bf00      	nop
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	200011fc 	.word	0x200011fc

0800b440 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	460a      	mov	r2, r1
 800b44a:	71fb      	strb	r3, [r7, #7]
 800b44c:	4613      	mov	r3, r2
 800b44e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b450:	2301      	movs	r3, #1
 800b452:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b454:	79bb      	ldrb	r3, [r7, #6]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d10d      	bne.n	800b476 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d104      	bne.n	800b46a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b460:	2302      	movs	r3, #2
 800b462:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b464:	2004      	movs	r0, #4
 800b466:	f000 f8df 	bl	800b628 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b46a:	79fb      	ldrb	r3, [r7, #7]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d107      	bne.n	800b480 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b470:	2303      	movs	r3, #3
 800b472:	73fb      	strb	r3, [r7, #15]
 800b474:	e004      	b.n	800b480 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b476:	79bb      	ldrb	r3, [r7, #6]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fd15 	bl	800beb2 <RBI_ConfigRFSwitch>
}
 800b488:	bf00      	nop
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b49a:	2301      	movs	r3, #1
 800b49c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b49e:	f000 fd16 	bl	800bece <RBI_GetTxConfig>
 800b4a2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d016      	beq.n	800b4d8 <SUBGRF_SetRfTxPower+0x48>
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	dc16      	bgt.n	800b4de <SUBGRF_SetRfTxPower+0x4e>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <SUBGRF_SetRfTxPower+0x2e>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d00a      	beq.n	800b4d2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b4bc:	e00f      	b.n	800b4de <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	dd02      	ble.n	800b4cc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	73fb      	strb	r3, [r7, #15]
            break;
 800b4ca:	e009      	b.n	800b4e0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
            break;
 800b4d0:	e006      	b.n	800b4e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]
            break;
 800b4d6:	e003      	b.n	800b4e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	73fb      	strb	r3, [r7, #15]
            break;
 800b4dc:	e000      	b.n	800b4e0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b4de:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b4e0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff fbcd 	bl	800ac88 <SUBGRF_SetTxParams>

    return paSelect;
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b4fc:	2301      	movs	r3, #1
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	46bd      	mov	sp, r7
 800b502:	bc80      	pop	{r7}
 800b504:	4770      	bx	lr
	...

0800b508 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2001      	movs	r0, #1
 800b516:	4798      	blx	r3
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	200014b0 	.word	0x200014b0

0800b524 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b52c:	4b03      	ldr	r3, [pc, #12]	; (800b53c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2002      	movs	r0, #2
 800b532:	4798      	blx	r3
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	200014b0 	.word	0x200014b0

0800b540 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b548:	4b03      	ldr	r3, [pc, #12]	; (800b558 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2040      	movs	r0, #64	; 0x40
 800b54e:	4798      	blx	r3
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200014b0 	.word	0x200014b0

0800b55c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d005      	beq.n	800b57e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b572:	e00a      	b.n	800b58a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b574:	4b07      	ldr	r3, [pc, #28]	; (800b594 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2080      	movs	r0, #128	; 0x80
 800b57a:	4798      	blx	r3
            break;
 800b57c:	e005      	b.n	800b58a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b586:	4798      	blx	r3
            break;
 800b588:	bf00      	nop
    }
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	200014b0 	.word	0x200014b0

0800b598 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b5a0:	4b04      	ldr	r3, [pc, #16]	; (800b5b4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b5a8:	4798      	blx	r3
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200014b0 	.word	0x200014b0

0800b5b8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b5c0:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2020      	movs	r0, #32
 800b5c6:	4798      	blx	r3
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	200014b0 	.word	0x200014b0

0800b5d4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b5dc:	4b03      	ldr	r3, [pc, #12]	; (800b5ec <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2004      	movs	r0, #4
 800b5e2:	4798      	blx	r3
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	200014b0 	.word	0x200014b0

0800b5f0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b5f8:	4b03      	ldr	r3, [pc, #12]	; (800b608 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2008      	movs	r0, #8
 800b5fe:	4798      	blx	r3
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	200014b0 	.word	0x200014b0

0800b60c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b614:	4b03      	ldr	r3, [pc, #12]	; (800b624 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2010      	movs	r0, #16
 800b61a:	4798      	blx	r3
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	200014b0 	.word	0x200014b0

0800b628 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b632:	f000 fc5a 	bl	800beea <RBI_IsDCDC>
 800b636:	4603      	mov	r3, r0
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d112      	bne.n	800b662 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b63c:	f640 1023 	movw	r0, #2339	; 0x923
 800b640:	f7ff fe1e 	bl	800b280 <SUBGRF_ReadRegister>
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	f023 0306 	bic.w	r3, r3, #6
 800b64e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b650:	7bfa      	ldrb	r2, [r7, #15]
 800b652:	79fb      	ldrb	r3, [r7, #7]
 800b654:	4313      	orrs	r3, r2
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4619      	mov	r1, r3
 800b65a:	f640 1023 	movw	r0, #2339	; 0x923
 800b65e:	f7ff fdfb 	bl	800b258 <SUBGRF_WriteRegister>
  }
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b67a:	231f      	movs	r3, #31
 800b67c:	e016      	b.n	800b6ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
 800b682:	e00f      	b.n	800b6a4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	4a0c      	ldr	r2, [pc, #48]	; (800b6b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b688:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d205      	bcs.n	800b69e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	4a08      	ldr	r2, [pc, #32]	; (800b6b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	791b      	ldrb	r3, [r3, #4]
 800b69c:	e006      	b.n	800b6ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	73fb      	strb	r3, [r7, #15]
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
 800b6a6:	2b15      	cmp	r3, #21
 800b6a8:	d9ec      	bls.n	800b684 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800b6aa:	e7fe      	b.n	800b6aa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bc80      	pop	{r7}
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	08012380 	.word	0x08012380

0800b6bc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08a      	sub	sp, #40	; 0x28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b6c6:	4b35      	ldr	r3, [pc, #212]	; (800b79c <SUBGRF_GetCFO+0xe0>)
 800b6c8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b6ca:	f640 0007 	movw	r0, #2055	; 0x807
 800b6ce:	f7ff fdd7 	bl	800b280 <SUBGRF_ReadRegister>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b6d6:	7ffb      	ldrb	r3, [r7, #31]
 800b6d8:	08db      	lsrs	r3, r3, #3
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f003 0303 	and.w	r3, r3, #3
 800b6e0:	3328      	adds	r3, #40	; 0x28
 800b6e2:	443b      	add	r3, r7
 800b6e4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b6e8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b6ea:	7ffb      	ldrb	r3, [r7, #31]
 800b6ec:	f003 0307 	and.w	r3, r3, #7
 800b6f0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800b6f2:	7fba      	ldrb	r2, [r7, #30]
 800b6f4:	7f7b      	ldrb	r3, [r7, #29]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4b28      	ldr	r3, [pc, #160]	; (800b7a0 <SUBGRF_GetCFO+0xe4>)
 800b700:	fbb3 f3f2 	udiv	r3, r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	fb02 f303 	mul.w	r3, r2, r3
 800b720:	2b07      	cmp	r3, #7
 800b722:	d802      	bhi.n	800b72a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b724:	2302      	movs	r3, #2
 800b726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b72a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	2b03      	cmp	r3, #3
 800b736:	d802      	bhi.n	800b73e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b738:	2304      	movs	r3, #4
 800b73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b73e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	fb02 f303 	mul.w	r3, r2, r3
 800b748:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b74a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b74e:	f7ff fd97 	bl	800b280 <SUBGRF_ReadRegister>
 800b752:	4603      	mov	r3, r0
 800b754:	021b      	lsls	r3, r3, #8
 800b756:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b75a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b75c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b760:	f7ff fd8e 	bl	800b280 <SUBGRF_ReadRegister>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b77e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b782:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	095b      	lsrs	r3, r3, #5
 800b788:	6a3a      	ldr	r2, [r7, #32]
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	11da      	asrs	r2, r3, #7
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	601a      	str	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	3728      	adds	r7, #40	; 0x28
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	0c0a0804 	.word	0x0c0a0804
 800b7a0:	01e84800 	.word	0x01e84800

0800b7a4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
 800b7b0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800b7bc:	697b      	ldr	r3, [r7, #20]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	371c      	adds	r7, #28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7de:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800b7e0:	697b      	ldr	r3, [r7, #20]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr

0800b7ec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	bc80      	pop	{r7}
 800b804:	4770      	bx	lr

0800b806 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800b806:	b480      	push	{r7}
 800b808:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800b80a:	bf00      	nop
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr

0800b812 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800b812:	b480      	push	{r7}
 800b814:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800b816:	2300      	movs	r3, #0
#endif
}
 800b818:	4618      	mov	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bc80      	pop	{r7}
 800b81e:	4770      	bx	lr

0800b820 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800b824:	2300      	movs	r3, #0
#endif
}
 800b826:	4618      	mov	r0, r3
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr

0800b82e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	4603      	mov	r3, r0
 800b836:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bc80      	pop	{r7}
 800b840:	4770      	bx	lr

0800b842 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800b842:	b480      	push	{r7}
 800b844:	b087      	sub	sp, #28
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	460b      	mov	r3, r1
 800b84c:	607a      	str	r2, [r7, #4]
 800b84e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800b850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b854:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800b856:	697b      	ldr	r3, [r7, #20]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	371c      	adds	r7, #28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bc80      	pop	{r7}
 800b860:	4770      	bx	lr

0800b862 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b862:	b480      	push	{r7}
 800b864:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr

0800b872 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800b872:	b480      	push	{r7}
 800b874:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800b876:	bf00      	nop
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr

0800b87e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b87e:	b480      	push	{r7}
 800b880:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800b882:	bf00      	nop
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr

0800b88a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	4603      	mov	r3, r0
 800b892:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	bc80      	pop	{r7}
 800b89c:	4770      	bx	lr

0800b89e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b8a2:	f7f6 f9a5 	bl	8001bf0 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b8a6:	f000 f80b 	bl	800b8c0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b8aa:	bf00      	nop
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b8b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8b6:	f000 fee9 	bl	800c68c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800b8ba:	bf00      	nop
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b08b      	sub	sp, #44	; 0x2c
 800b8c4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */
	APP_LOG(TS_OFF, VLEVEL_M, "\n\rREMOTE CONTROL - TEST\n\r");
 800b8c6:	4b59      	ldr	r3, [pc, #356]	; (800ba2c <SubghzApp_Init+0x16c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	2002      	movs	r0, #2
 800b8ce:	f001 fb19 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	  /* Get SubGHY_Phy APP version*/
	  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9302      	str	r3, [sp, #8]
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	2301      	movs	r3, #1
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	4b54      	ldr	r3, [pc, #336]	; (800ba30 <SubghzApp_Init+0x170>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	2002      	movs	r0, #2
 800b8e6:	f001 fb0d 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(APP_VERSION_MAIN),
	          (uint8_t)(APP_VERSION_SUB1),
	          (uint8_t)(APP_VERSION_SUB2));

	  /* Get MW SubGhz_Phy info */
	  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9302      	str	r3, [sp, #8]
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	4b4f      	ldr	r3, [pc, #316]	; (800ba34 <SubghzApp_Init+0x174>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	2002      	movs	r0, #2
 800b8fe:	f001 fb01 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

	  /* Radio initialization */
	  RadioEvents.TxDone = OnTxDone;
 800b902:	4b4d      	ldr	r3, [pc, #308]	; (800ba38 <SubghzApp_Init+0x178>)
 800b904:	4a4d      	ldr	r2, [pc, #308]	; (800ba3c <SubghzApp_Init+0x17c>)
 800b906:	601a      	str	r2, [r3, #0]
	  RadioEvents.RxDone = OnRxDone;
 800b908:	4b4b      	ldr	r3, [pc, #300]	; (800ba38 <SubghzApp_Init+0x178>)
 800b90a:	4a4d      	ldr	r2, [pc, #308]	; (800ba40 <SubghzApp_Init+0x180>)
 800b90c:	609a      	str	r2, [r3, #8]
	  RadioEvents.TxTimeout = OnTxTimeout;
 800b90e:	4b4a      	ldr	r3, [pc, #296]	; (800ba38 <SubghzApp_Init+0x178>)
 800b910:	4a4c      	ldr	r2, [pc, #304]	; (800ba44 <SubghzApp_Init+0x184>)
 800b912:	605a      	str	r2, [r3, #4]
	  RadioEvents.RxTimeout = OnRxTimeout;
 800b914:	4b48      	ldr	r3, [pc, #288]	; (800ba38 <SubghzApp_Init+0x178>)
 800b916:	4a4c      	ldr	r2, [pc, #304]	; (800ba48 <SubghzApp_Init+0x188>)
 800b918:	60da      	str	r2, [r3, #12]
	  RadioEvents.RxError = OnRxError;
 800b91a:	4b47      	ldr	r3, [pc, #284]	; (800ba38 <SubghzApp_Init+0x178>)
 800b91c:	4a4b      	ldr	r2, [pc, #300]	; (800ba4c <SubghzApp_Init+0x18c>)
 800b91e:	611a      	str	r2, [r3, #16]

	  Radio.Init(&RadioEvents);
 800b920:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <SubghzApp_Init+0x190>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4844      	ldr	r0, [pc, #272]	; (800ba38 <SubghzApp_Init+0x178>)
 800b926:	4798      	blx	r3

	  /*calculate random delay for synchronization*/
	    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800b928:	4b49      	ldr	r3, [pc, #292]	; (800ba50 <SubghzApp_Init+0x190>)
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	0d9b      	lsrs	r3, r3, #22
 800b932:	461a      	mov	r2, r3
 800b934:	4b47      	ldr	r3, [pc, #284]	; (800ba54 <SubghzApp_Init+0x194>)
 800b936:	601a      	str	r2, [r3, #0]

	    /* Radio Set frequency */
	    Radio.SetChannel(RF_FREQUENCY);
 800b938:	4b45      	ldr	r3, [pc, #276]	; (800ba50 <SubghzApp_Init+0x190>)
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4846      	ldr	r0, [pc, #280]	; (800ba58 <SubghzApp_Init+0x198>)
 800b93e:	4798      	blx	r3

	/* Radio configuration */
	#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
	      APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800b940:	4b46      	ldr	r3, [pc, #280]	; (800ba5c <SubghzApp_Init+0x19c>)
 800b942:	2200      	movs	r2, #0
 800b944:	2100      	movs	r1, #0
 800b946:	2002      	movs	r0, #2
 800b948:	f001 fadc 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800b94c:	4b44      	ldr	r3, [pc, #272]	; (800ba60 <SubghzApp_Init+0x1a0>)
 800b94e:	2200      	movs	r2, #0
 800b950:	2100      	movs	r1, #0
 800b952:	2002      	movs	r0, #2
 800b954:	f001 fad6 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800b958:	237d      	movs	r3, #125	; 0x7d
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <SubghzApp_Init+0x1a4>)
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	2002      	movs	r0, #2
 800b964:	f001 face 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800b968:	2307      	movs	r3, #7
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	4b3e      	ldr	r3, [pc, #248]	; (800ba68 <SubghzApp_Init+0x1a8>)
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	2002      	movs	r0, #2
 800b974:	f001 fac6 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800b978:	4b35      	ldr	r3, [pc, #212]	; (800ba50 <SubghzApp_Init+0x190>)
 800b97a:	69dc      	ldr	r4, [r3, #28]
 800b97c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b980:	9308      	str	r3, [sp, #32]
 800b982:	2300      	movs	r3, #0
 800b984:	9307      	str	r3, [sp, #28]
 800b986:	2300      	movs	r3, #0
 800b988:	9306      	str	r3, [sp, #24]
 800b98a:	2300      	movs	r3, #0
 800b98c:	9305      	str	r3, [sp, #20]
 800b98e:	2301      	movs	r3, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	2300      	movs	r3, #0
 800b994:	9303      	str	r3, [sp, #12]
 800b996:	2308      	movs	r3, #8
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	2301      	movs	r3, #1
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	2307      	movs	r3, #7
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	210e      	movs	r1, #14
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	47a0      	blx	r4
	                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

	 Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800b9ac:	4b28      	ldr	r3, [pc, #160]	; (800ba50 <SubghzApp_Init+0x190>)
 800b9ae:	699c      	ldr	r4, [r3, #24]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9308      	str	r3, [sp, #32]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9306      	str	r3, [sp, #24]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	9305      	str	r3, [sp, #20]
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9303      	str	r3, [sp, #12]
 800b9cc:	2305      	movs	r3, #5
 800b9ce:	9302      	str	r3, [sp, #8]
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2301      	movs	r3, #1
 800b9da:	2207      	movs	r2, #7
 800b9dc:	2100      	movs	r1, #0
 800b9de:	2001      	movs	r0, #1
 800b9e0:	47a0      	blx	r4
	                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
	                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
	                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

	  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800b9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ba50 <SubghzApp_Init+0x190>)
 800b9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e6:	21ff      	movs	r1, #255	; 0xff
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	4798      	blx	r3
	#error "Please define a frequency band in the sys_conf.h file."
	#endif /* USE_MODEM_LORA | USE_MODEM_FSK */


	   /*fills tx buffer*/
	   memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800b9ec:	22ff      	movs	r2, #255	; 0xff
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	481e      	ldr	r0, [pc, #120]	; (800ba6c <SubghzApp_Init+0x1ac>)
 800b9f2:	f001 fd51 	bl	800d498 <memset>

	   APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800b9f6:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <SubghzApp_Init+0x194>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <SubghzApp_Init+0x1b0>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	2100      	movs	r1, #0
 800ba02:	2001      	movs	r0, #1
 800ba04:	f001 fa7e 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	   /*starts reception*/
	   Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800ba08:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <SubghzApp_Init+0x190>)
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0c:	4a11      	ldr	r2, [pc, #68]	; (800ba54 <SubghzApp_Init+0x194>)
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800ba14:	4610      	mov	r0, r2
 800ba16:	4798      	blx	r3

	  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 800ba18:	4a16      	ldr	r2, [pc, #88]	; (800ba74 <SubghzApp_Init+0x1b4>)
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	f000 ff31 	bl	800c884 <UTIL_SEQ_RegTask>

  /* USER CODE END SubghzApp_Init_2 */
}
 800ba22:	bf00      	nop
 800ba24:	3704      	adds	r7, #4
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd90      	pop	{r4, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	08011f9c 	.word	0x08011f9c
 800ba30:	08011fb8 	.word	0x08011fb8
 800ba34:	08011fdc 	.word	0x08011fdc
 800ba38:	20001740 	.word	0x20001740
 800ba3c:	0800bce1 	.word	0x0800bce1
 800ba40:	0800bd0d 	.word	0x0800bd0d
 800ba44:	0800be21 	.word	0x0800be21
 800ba48:	0800be4d 	.word	0x0800be4d
 800ba4c:	0800be79 	.word	0x0800be79
 800ba50:	080122f8 	.word	0x080122f8
 800ba54:	2000173c 	.word	0x2000173c
 800ba58:	33bca100 	.word	0x33bca100
 800ba5c:	08012000 	.word	0x08012000
 800ba60:	08012014 	.word	0x08012014
 800ba64:	08012028 	.word	0x08012028
 800ba68:	0801203c 	.word	0x0801203c
 800ba6c:	20001638 	.word	0x20001638
 800ba70:	0801204c 	.word	0x0801204c
 800ba74:	0800babd 	.word	0x0800babd

0800ba78 <write_master_string>:

/* USER CODE BEGIN EF */

void write_master_string(uint8_t *dataMASTER)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af02      	add	r7, sp, #8
 800ba7e:	6078      	str	r0, [r7, #4]
	memset(PONG,64,0);
	uint8_t tamanho = strlen((char*) dataMASTER);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7f4 fb7d 	bl	8000180 <strlen>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73fb      	strb	r3, [r7, #15]
	APP_TPRINTF("Tx data = %s size = %d\r\n", dataMASTER, tamanho);
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <write_master_string+0x3c>)
 800ba94:	2201      	movs	r2, #1
 800ba96:	2100      	movs	r1, #0
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f001 fa33 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
	strncpy(PONG,dataMASTER,tamanho);
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	461a      	mov	r2, r3
 800baa2:	6879      	ldr	r1, [r7, #4]
 800baa4:	4804      	ldr	r0, [pc, #16]	; (800bab8 <write_master_string+0x40>)
 800baa6:	f002 fb9f 	bl	800e1e8 <strncpy>
	__NOP();
 800baaa:	bf00      	nop
}
 800baac:	bf00      	nop
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	08012058 	.word	0x08012058
 800bab8:	200014f4 	.word	0x200014f4

0800babc <PingPong_Process>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void PingPong_Process(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800bac0:	4b77      	ldr	r3, [pc, #476]	; (800bca0 <PingPong_Process+0x1e4>)
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	4798      	blx	r3

  switch (State)
 800bac6:	4b77      	ldr	r3, [pc, #476]	; (800bca4 <PingPong_Process+0x1e8>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	3b01      	subs	r3, #1
 800bacc:	2b04      	cmp	r3, #4
 800bace:	f200 80e1 	bhi.w	800bc94 <PingPong_Process+0x1d8>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <PingPong_Process+0x1c>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800baed 	.word	0x0800baed
 800badc:	0800bc25 	.word	0x0800bc25
 800bae0:	0800bc25 	.word	0x0800bc25
 800bae4:	0800bc0d 	.word	0x0800bc0d
 800bae8:	0800bc7d 	.word	0x0800bc7d
  {
    case RX:

      if (isMaster == true)
 800baec:	4b6e      	ldr	r3, [pc, #440]	; (800bca8 <PingPong_Process+0x1ec>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d051      	beq.n	800bb98 <PingPong_Process+0xdc>
      {
        if (RxBufferSize > 0)
 800baf4:	4b6d      	ldr	r3, [pc, #436]	; (800bcac <PingPong_Process+0x1f0>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 80cd 	beq.w	800bc98 <PingPong_Process+0x1dc>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800bafe:	223f      	movs	r2, #63	; 0x3f
 800bb00:	496b      	ldr	r1, [pc, #428]	; (800bcb0 <PingPong_Process+0x1f4>)
 800bb02:	486c      	ldr	r0, [pc, #432]	; (800bcb4 <PingPong_Process+0x1f8>)
 800bb04:	f002 fb5c 	bl	800e1c0 <strncmp>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d11e      	bne.n	800bb4c <PingPong_Process+0x90>
          {
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800bb0e:	4b64      	ldr	r3, [pc, #400]	; (800bca0 <PingPong_Process+0x1e4>)
 800bb10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb12:	4798      	blx	r3
 800bb14:	4603      	mov	r3, r0
 800bb16:	33c8      	adds	r3, #200	; 0xc8
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f6 f8f7 	bl	8001d0c <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800bb1e:	4b66      	ldr	r3, [pc, #408]	; (800bcb8 <PingPong_Process+0x1fc>)
 800bb20:	2201      	movs	r2, #1
 800bb22:	2100      	movs	r1, #0
 800bb24:	2001      	movs	r0, #1
 800bb26:	f001 f9ed 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800bb2a:	4b64      	ldr	r3, [pc, #400]	; (800bcbc <PingPong_Process+0x200>)
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	2100      	movs	r1, #0
 800bb30:	2001      	movs	r0, #1
 800bb32:	f001 f9e7 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800bb36:	223f      	movs	r2, #63	; 0x3f
 800bb38:	4961      	ldr	r1, [pc, #388]	; (800bcc0 <PingPong_Process+0x204>)
 800bb3a:	4862      	ldr	r0, [pc, #392]	; (800bcc4 <PingPong_Process+0x208>)
 800bb3c:	f001 fc9e 	bl	800d47c <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800bb40:	4b57      	ldr	r3, [pc, #348]	; (800bca0 <PingPong_Process+0x1e4>)
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	2140      	movs	r1, #64	; 0x40
 800bb46:	485f      	ldr	r0, [pc, #380]	; (800bcc4 <PingPong_Process+0x208>)
 800bb48:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800bb4a:	e0a5      	b.n	800bc98 <PingPong_Process+0x1dc>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800bb4c:	223f      	movs	r2, #63	; 0x3f
 800bb4e:	495c      	ldr	r1, [pc, #368]	; (800bcc0 <PingPong_Process+0x204>)
 800bb50:	4858      	ldr	r0, [pc, #352]	; (800bcb4 <PingPong_Process+0x1f8>)
 800bb52:	f002 fb35 	bl	800e1c0 <strncmp>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10e      	bne.n	800bb7a <PingPong_Process+0xbe>
            isMaster = false;
 800bb5c:	4b52      	ldr	r3, [pc, #328]	; (800bca8 <PingPong_Process+0x1ec>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800bb62:	4b59      	ldr	r3, [pc, #356]	; (800bcc8 <PingPong_Process+0x20c>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	2100      	movs	r1, #0
 800bb68:	2001      	movs	r0, #1
 800bb6a:	f001 f9cb 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800bb6e:	4b4c      	ldr	r3, [pc, #304]	; (800bca0 <PingPong_Process+0x1e4>)
 800bb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bb76:	4798      	blx	r3
      break;
 800bb78:	e08e      	b.n	800bc98 <PingPong_Process+0x1dc>
            isMaster = true;
 800bb7a:	4b4b      	ldr	r3, [pc, #300]	; (800bca8 <PingPong_Process+0x1ec>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800bb80:	4b52      	ldr	r3, [pc, #328]	; (800bccc <PingPong_Process+0x210>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	2100      	movs	r1, #0
 800bb86:	2001      	movs	r0, #1
 800bb88:	f001 f9bc 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800bb8c:	4b44      	ldr	r3, [pc, #272]	; (800bca0 <PingPong_Process+0x1e4>)
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bb94:	4798      	blx	r3
      break;
 800bb96:	e07f      	b.n	800bc98 <PingPong_Process+0x1dc>
        if (RxBufferSize > 0)
 800bb98:	4b44      	ldr	r3, [pc, #272]	; (800bcac <PingPong_Process+0x1f0>)
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d07b      	beq.n	800bc98 <PingPong_Process+0x1dc>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800bba0:	223f      	movs	r2, #63	; 0x3f
 800bba2:	4947      	ldr	r1, [pc, #284]	; (800bcc0 <PingPong_Process+0x204>)
 800bba4:	4843      	ldr	r0, [pc, #268]	; (800bcb4 <PingPong_Process+0x1f8>)
 800bba6:	f002 fb0b 	bl	800e1c0 <strncmp>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d11e      	bne.n	800bbee <PingPong_Process+0x132>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800bbb0:	4b3b      	ldr	r3, [pc, #236]	; (800bca0 <PingPong_Process+0x1e4>)
 800bbb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb4:	4798      	blx	r3
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	33c8      	adds	r3, #200	; 0xc8
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f6 f8a6 	bl	8001d0c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800bbc0:	4b43      	ldr	r3, [pc, #268]	; (800bcd0 <PingPong_Process+0x214>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	f001 f99c 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800bbcc:	4b41      	ldr	r3, [pc, #260]	; (800bcd4 <PingPong_Process+0x218>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	f001 f996 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800bbd8:	223f      	movs	r2, #63	; 0x3f
 800bbda:	4935      	ldr	r1, [pc, #212]	; (800bcb0 <PingPong_Process+0x1f4>)
 800bbdc:	4839      	ldr	r0, [pc, #228]	; (800bcc4 <PingPong_Process+0x208>)
 800bbde:	f001 fc4d 	bl	800d47c <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800bbe2:	4b2f      	ldr	r3, [pc, #188]	; (800bca0 <PingPong_Process+0x1e4>)
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	2140      	movs	r1, #64	; 0x40
 800bbe8:	4836      	ldr	r0, [pc, #216]	; (800bcc4 <PingPong_Process+0x208>)
 800bbea:	4798      	blx	r3
      break;
 800bbec:	e054      	b.n	800bc98 <PingPong_Process+0x1dc>
            isMaster = true;
 800bbee:	4b2e      	ldr	r3, [pc, #184]	; (800bca8 <PingPong_Process+0x1ec>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800bbf4:	4b35      	ldr	r3, [pc, #212]	; (800bccc <PingPong_Process+0x210>)
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	f001 f982 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800bc00:	4b27      	ldr	r3, [pc, #156]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc08:	4798      	blx	r3
      break;
 800bc0a:	e045      	b.n	800bc98 <PingPong_Process+0x1dc>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800bc0c:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <PingPong_Process+0x21c>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	2100      	movs	r1, #0
 800bc12:	2001      	movs	r0, #1
 800bc14:	f001 f976 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800bc18:	4b21      	ldr	r3, [pc, #132]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc20:	4798      	blx	r3
      break;
 800bc22:	e03a      	b.n	800bc9a <PingPong_Process+0x1de>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800bc24:	4b20      	ldr	r3, [pc, #128]	; (800bca8 <PingPong_Process+0x1ec>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <PingPong_Process+0x1a8>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800bc2c:	4b1c      	ldr	r3, [pc, #112]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc30:	4798      	blx	r3
 800bc32:	4603      	mov	r3, r0
 800bc34:	4a29      	ldr	r2, [pc, #164]	; (800bcdc <PingPong_Process+0x220>)
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	4413      	add	r3, r2
 800bc3a:	33c8      	adds	r3, #200	; 0xc8
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7f6 f865 	bl	8001d0c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800bc42:	4b1e      	ldr	r3, [pc, #120]	; (800bcbc <PingPong_Process+0x200>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	2100      	movs	r1, #0
 800bc48:	2001      	movs	r0, #1
 800bc4a:	f001 f95b 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800bc4e:	223f      	movs	r2, #63	; 0x3f
 800bc50:	491b      	ldr	r1, [pc, #108]	; (800bcc0 <PingPong_Process+0x204>)
 800bc52:	481c      	ldr	r0, [pc, #112]	; (800bcc4 <PingPong_Process+0x208>)
 800bc54:	f001 fc12 	bl	800d47c <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800bc58:	4b11      	ldr	r3, [pc, #68]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5c:	2140      	movs	r1, #64	; 0x40
 800bc5e:	4819      	ldr	r0, [pc, #100]	; (800bcc4 <PingPong_Process+0x208>)
 800bc60:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800bc62:	e01a      	b.n	800bc9a <PingPong_Process+0x1de>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800bc64:	4b18      	ldr	r3, [pc, #96]	; (800bcc8 <PingPong_Process+0x20c>)
 800bc66:	2201      	movs	r2, #1
 800bc68:	2100      	movs	r1, #0
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	f001 f94a 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800bc70:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc78:	4798      	blx	r3
      break;
 800bc7a:	e00e      	b.n	800bc9a <PingPong_Process+0x1de>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800bc7c:	4b12      	ldr	r3, [pc, #72]	; (800bcc8 <PingPong_Process+0x20c>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	2100      	movs	r1, #0
 800bc82:	2001      	movs	r0, #1
 800bc84:	f001 f93e 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <PingPong_Process+0x1e4>)
 800bc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc90:	4798      	blx	r3
      break;
 800bc92:	e002      	b.n	800bc9a <PingPong_Process+0x1de>
    default:
      break;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <PingPong_Process+0x1de>
      break;
 800bc98:	bf00      	nop
  }
}
 800bc9a:	bf00      	nop
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	080122f8 	.word	0x080122f8
 800bca4:	20000fad 	.word	0x20000fad
 800bca8:	20000fae 	.word	0x20000fae
 800bcac:	20001738 	.word	0x20001738
 800bcb0:	200014f4 	.word	0x200014f4
 800bcb4:	20001538 	.word	0x20001538
 800bcb8:	08012074 	.word	0x08012074
 800bcbc:	08012080 	.word	0x08012080
 800bcc0:	200014b4 	.word	0x200014b4
 800bcc4:	20001638 	.word	0x20001638
 800bcc8:	08012094 	.word	0x08012094
 800bccc:	080120a8 	.word	0x080120a8
 800bcd0:	080120bc 	.word	0x080120bc
 800bcd4:	080120c8 	.word	0x080120c8
 800bcd8:	080120dc 	.word	0x080120dc
 800bcdc:	2000173c 	.word	0x2000173c

0800bce0 <OnTxDone>:

static void OnTxDone(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	 APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800bce4:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <OnTxDone+0x24>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	2100      	movs	r1, #0
 800bcea:	2001      	movs	r0, #1
 800bcec:	f001 f90a 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

	  State = TX;
 800bcf0:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <OnTxDone+0x28>)
 800bcf2:	2204      	movs	r2, #4
 800bcf4:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f000 fde5 	bl	800c8c8 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxDone */
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	080120e8 	.word	0x080120e8
 800bd08:	20000fad 	.word	0x20000fad

0800bd0c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	4608      	mov	r0, r1
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	817b      	strh	r3, [r7, #10]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	813b      	strh	r3, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800bd26:	4b34      	ldr	r3, [pc, #208]	; (800bdf8 <OnRxDone+0xec>)
 800bd28:	2201      	movs	r2, #1
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	2001      	movs	r0, #1
 800bd2e:	f001 f8e9 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800bd32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd36:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800bd3a:	9201      	str	r2, [sp, #4]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	4b2f      	ldr	r3, [pc, #188]	; (800bdfc <OnRxDone+0xf0>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	2100      	movs	r1, #0
 800bd44:	2001      	movs	r0, #1
 800bd46:	f001 f8dd 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800bd4a:	4a2d      	ldr	r2, [pc, #180]	; (800be00 <OnRxDone+0xf4>)
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800bd50:	4b2c      	ldr	r3, [pc, #176]	; (800be04 <OnRxDone+0xf8>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800bd56:	22ff      	movs	r2, #255	; 0xff
 800bd58:	2100      	movs	r1, #0
 800bd5a:	482b      	ldr	r0, [pc, #172]	; (800be08 <OnRxDone+0xfc>)
 800bd5c:	f001 fb9c 	bl	800d498 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800bd60:	4a2a      	ldr	r2, [pc, #168]	; (800be0c <OnRxDone+0x100>)
 800bd62:	897b      	ldrh	r3, [r7, #10]
 800bd64:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800bd66:	4b29      	ldr	r3, [pc, #164]	; (800be0c <OnRxDone+0x100>)
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	2bff      	cmp	r3, #255	; 0xff
 800bd6c:	d806      	bhi.n	800bd7c <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800bd6e:	4b27      	ldr	r3, [pc, #156]	; (800be0c <OnRxDone+0x100>)
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	4824      	ldr	r0, [pc, #144]	; (800be08 <OnRxDone+0xfc>)
 800bd78:	f001 fb80 	bl	800d47c <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800bd7c:	893b      	ldrh	r3, [r7, #8]
 800bd7e:	b25a      	sxtb	r2, r3
 800bd80:	4b23      	ldr	r3, [pc, #140]	; (800be10 <OnRxDone+0x104>)
 800bd82:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800bd84:	897b      	ldrh	r3, [r7, #10]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	4b22      	ldr	r3, [pc, #136]	; (800be14 <OnRxDone+0x108>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	2003      	movs	r0, #3
 800bd90:	f001 f8b8 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	e01d      	b.n	800bdd6 <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800bd9a:	4a1b      	ldr	r2, [pc, #108]	; (800be08 <OnRxDone+0xfc>)
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	4b1c      	ldr	r3, [pc, #112]	; (800be18 <OnRxDone+0x10c>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	2100      	movs	r1, #0
 800bdaa:	2003      	movs	r0, #3
 800bdac:	f001 f8aa 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	425a      	negs	r2, r3
 800bdb4:	f003 030f 	and.w	r3, r3, #15
 800bdb8:	f002 020f 	and.w	r2, r2, #15
 800bdbc:	bf58      	it	pl
 800bdbe:	4253      	negpl	r3, r2
 800bdc0:	2b0f      	cmp	r3, #15
 800bdc2:	d105      	bne.n	800bdd0 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <OnRxDone+0x110>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2100      	movs	r1, #0
 800bdca:	2003      	movs	r0, #3
 800bdcc:	f001 f89a 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b3f      	cmp	r3, #63	; 0x3f
 800bdda:	ddde      	ble.n	800bd9a <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800bddc:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <OnRxDone+0x110>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	2003      	movs	r0, #3
 800bde4:	f001 f88e 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800bde8:	2100      	movs	r1, #0
 800bdea:	2001      	movs	r0, #1
 800bdec:	f000 fd6c 	bl	800c8c8 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800bdf0:	bf00      	nop
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	080120f4 	.word	0x080120f4
 800bdfc:	08012100 	.word	0x08012100
 800be00:	20001535 	.word	0x20001535
 800be04:	20000fad 	.word	0x20000fad
 800be08:	20001538 	.word	0x20001538
 800be0c:	20001738 	.word	0x20001738
 800be10:	20001534 	.word	0x20001534
 800be14:	08012124 	.word	0x08012124
 800be18:	08012138 	.word	0x08012138
 800be1c:	08012140 	.word	0x08012140

0800be20 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 800be24:	4b07      	ldr	r3, [pc, #28]	; (800be44 <OnTxTimeout+0x24>)
 800be26:	2201      	movs	r2, #1
 800be28:	2100      	movs	r1, #0
 800be2a:	2001      	movs	r0, #1
 800be2c:	f001 f86a 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

	  State = TX_TIMEOUT;
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <OnTxTimeout+0x28>)
 800be32:	2205      	movs	r2, #5
 800be34:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800be36:	2100      	movs	r1, #0
 800be38:	2001      	movs	r0, #1
 800be3a:	f000 fd45 	bl	800c8c8 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxTimeout */
}
 800be3e:	bf00      	nop
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08012144 	.word	0x08012144
 800be48:	20000fad 	.word	0x20000fad

0800be4c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 800be50:	4b07      	ldr	r3, [pc, #28]	; (800be70 <OnRxTimeout+0x24>)
 800be52:	2201      	movs	r2, #1
 800be54:	2100      	movs	r1, #0
 800be56:	2001      	movs	r0, #1
 800be58:	f001 f854 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_TIMEOUT;
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <OnRxTimeout+0x28>)
 800be5e:	2202      	movs	r2, #2
 800be60:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800be62:	2100      	movs	r1, #0
 800be64:	2001      	movs	r0, #1
 800be66:	f000 fd2f 	bl	800c8c8 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxTimeout */
}
 800be6a:	bf00      	nop
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	08012154 	.word	0x08012154
 800be74:	20000fad 	.word	0x20000fad

0800be78 <OnRxError>:

static void OnRxError(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800be7c:	4b07      	ldr	r3, [pc, #28]	; (800be9c <OnRxError+0x24>)
 800be7e:	2201      	movs	r2, #1
 800be80:	2100      	movs	r1, #0
 800be82:	2001      	movs	r0, #1
 800be84:	f001 f83e 	bl	800cf04 <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_ERROR;
 800be88:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <OnRxError+0x28>)
 800be8a:	2203      	movs	r2, #3
 800be8c:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800be8e:	2100      	movs	r1, #0
 800be90:	2001      	movs	r0, #1
 800be92:	f000 fd19 	bl	800c8c8 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxError */
}
 800be96:	bf00      	nop
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08012164 	.word	0x08012164
 800bea0:	20000fad 	.word	0x20000fad

0800bea4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800bea8:	f7f6 fd2d 	bl	8002906 <BSP_RADIO_Init>
 800beac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	4603      	mov	r3, r0
 800beba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7f6 fd52 	bl	8002968 <BSP_RADIO_ConfigRFSwitch>
 800bec4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800bed2:	f7f6 fd97 	bl	8002a04 <BSP_RADIO_GetTxConfig>
 800bed6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bed8:	4618      	mov	r0, r3
 800beda:	bd80      	pop	{r7, pc}

0800bedc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800bee0:	f7f6 fd97 	bl	8002a12 <BSP_RADIO_IsTCXO>
 800bee4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	bd80      	pop	{r7, pc}

0800beea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800beee:	f7f6 fd97 	bl	8002a20 <BSP_RADIO_IsDCDC>
 800bef2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f6 fd92 	bl	8002a2e <BSP_RADIO_GetRFOMaxPowerConfig>
 800bf0a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf18:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <UTIL_LPM_Init+0x18>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf1e:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <UTIL_LPM_Init+0x1c>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bf24:	bf00      	nop
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bc80      	pop	{r7}
 800bf2a:	4770      	bx	lr
 800bf2c:	2000175c 	.word	0x2000175c
 800bf30:	20001760 	.word	0x20001760

0800bf34 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf40:	f3ef 8310 	mrs	r3, PRIMASK
 800bf44:	613b      	str	r3, [r7, #16]
  return(result);
 800bf46:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bf48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf4a:	b672      	cpsid	i
}
 800bf4c:	bf00      	nop
  
  switch( state )
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <UTIL_LPM_SetStopMode+0x32>
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d10e      	bne.n	800bf76 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800bf58:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <UTIL_LPM_SetStopMode+0x5c>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <UTIL_LPM_SetStopMode+0x5c>)
 800bf62:	6013      	str	r3, [r2, #0]
      break;
 800bf64:	e008      	b.n	800bf78 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	43da      	mvns	r2, r3
 800bf6a:	4b09      	ldr	r3, [pc, #36]	; (800bf90 <UTIL_LPM_SetStopMode+0x5c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	4a07      	ldr	r2, [pc, #28]	; (800bf90 <UTIL_LPM_SetStopMode+0x5c>)
 800bf72:	6013      	str	r3, [r2, #0]
      break;
 800bf74:	e000      	b.n	800bf78 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800bf76:	bf00      	nop
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f383 8810 	msr	PRIMASK, r3
}
 800bf82:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bf84:	bf00      	nop
 800bf86:	371c      	adds	r7, #28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bc80      	pop	{r7}
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	2000175c 	.word	0x2000175c

0800bf94 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfa0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa4:	613b      	str	r3, [r7, #16]
  return(result);
 800bfa6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bfa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfaa:	b672      	cpsid	i
}
 800bfac:	bf00      	nop
  
  switch(state)
 800bfae:	78fb      	ldrb	r3, [r7, #3]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <UTIL_LPM_SetOffMode+0x32>
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d10e      	bne.n	800bfd6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <UTIL_LPM_SetOffMode+0x5c>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	4a0b      	ldr	r2, [pc, #44]	; (800bff0 <UTIL_LPM_SetOffMode+0x5c>)
 800bfc2:	6013      	str	r3, [r2, #0]
      break;
 800bfc4:	e008      	b.n	800bfd8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	43da      	mvns	r2, r3
 800bfca:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <UTIL_LPM_SetOffMode+0x5c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4013      	ands	r3, r2
 800bfd0:	4a07      	ldr	r2, [pc, #28]	; (800bff0 <UTIL_LPM_SetOffMode+0x5c>)
 800bfd2:	6013      	str	r3, [r2, #0]
      break;
 800bfd4:	e000      	b.n	800bfd8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bfd6:	bf00      	nop
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f383 8810 	msr	PRIMASK, r3
}
 800bfe2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bfe4:	bf00      	nop
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20001760 	.word	0x20001760

0800bff4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bffa:	f3ef 8310 	mrs	r3, PRIMASK
 800bffe:	60bb      	str	r3, [r7, #8]
  return(result);
 800c000:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800c002:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c004:	b672      	cpsid	i
}
 800c006:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800c008:	4b12      	ldr	r3, [pc, #72]	; (800c054 <UTIL_LPM_EnterLowPower+0x60>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d006      	beq.n	800c01e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800c016:	4b10      	ldr	r3, [pc, #64]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	4798      	blx	r3
 800c01c:	e010      	b.n	800c040 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800c01e:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <UTIL_LPM_EnterLowPower+0x68>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d006      	beq.n	800c034 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800c02c:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	4798      	blx	r3
 800c032:	e005      	b.n	800c040 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800c034:	4b08      	ldr	r3, [pc, #32]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800c03a:	4b07      	ldr	r3, [pc, #28]	; (800c058 <UTIL_LPM_EnterLowPower+0x64>)
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	4798      	blx	r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f383 8810 	msr	PRIMASK, r3
}
 800c04a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	2000175c 	.word	0x2000175c
 800c058:	080121c8 	.word	0x080121c8
 800c05c:	20001760 	.word	0x20001760

0800c060 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c076:	e007      	b.n	800c088 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	1c53      	adds	r3, r2, #1
 800c07c:	613b      	str	r3, [r7, #16]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	1c59      	adds	r1, r3, #1
 800c082:	6179      	str	r1, [r7, #20]
 800c084:	7812      	ldrb	r2, [r2, #0]
 800c086:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c088:	88fb      	ldrh	r3, [r7, #6]
 800c08a:	1e5a      	subs	r2, r3, #1
 800c08c:	80fa      	strh	r2, [r7, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1f2      	bne.n	800c078 <UTIL_MEM_cpy_8+0x18>
    }
}
 800c092:	bf00      	nop
 800c094:	bf00      	nop
 800c096:	371c      	adds	r7, #28
 800c098:	46bd      	mov	sp, r7
 800c09a:	bc80      	pop	{r7}
 800c09c:	4770      	bx	lr

0800c09e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	70fb      	strb	r3, [r7, #3]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c0b2:	e004      	b.n	800c0be <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	60fa      	str	r2, [r7, #12]
 800c0ba:	78fa      	ldrb	r2, [r7, #3]
 800c0bc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c0be:	883b      	ldrh	r3, [r7, #0]
 800c0c0:	1e5a      	subs	r2, r3, #1
 800c0c2:	803a      	strh	r2, [r7, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f5      	bne.n	800c0b4 <UTIL_MEM_set_8+0x16>
  }
}
 800c0c8:	bf00      	nop
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bc80      	pop	{r7}
 800c0d2:	4770      	bx	lr

0800c0d4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	b480      	push	{r7}
 800c0d8:	b087      	sub	sp, #28
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	1d38      	adds	r0, r7, #4
 800c0e0:	e880 0006 	stmia.w	r0, {r1, r2}
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	613b      	str	r3, [r7, #16]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	4413      	add	r3, r2
 800c0f4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c0f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c100:	b29b      	uxth	r3, r3
 800c102:	4413      	add	r3, r2
 800c104:	b29b      	uxth	r3, r3
 800c106:	b21b      	sxth	r3, r3
 800c108:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800c10a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c10e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c112:	db0a      	blt.n	800c12a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3301      	adds	r3, #1
 800c118:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800c11a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c124:	b29b      	uxth	r3, r3
 800c126:	b21b      	sxth	r3, r3
 800c128:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	461a      	mov	r2, r3
 800c12e:	f107 0310 	add.w	r3, r7, #16
 800c132:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c136:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	371c      	adds	r7, #28
 800c13e:	46bd      	mov	sp, r7
 800c140:	bc80      	pop	{r7}
 800c142:	b002      	add	sp, #8
 800c144:	4770      	bx	lr
	...

0800c148 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08a      	sub	sp, #40	; 0x28
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c150:	2300      	movs	r3, #0
 800c152:	61bb      	str	r3, [r7, #24]
 800c154:	2300      	movs	r3, #0
 800c156:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800c158:	2300      	movs	r3, #0
 800c15a:	613b      	str	r3, [r7, #16]
 800c15c:	2300      	movs	r3, #0
 800c15e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c160:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <SysTimeGet+0x6c>)
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	f107 0218 	add.w	r2, r7, #24
 800c168:	3204      	adds	r2, #4
 800c16a:	4610      	mov	r0, r2
 800c16c:	4798      	blx	r3
 800c16e:	4603      	mov	r3, r0
 800c170:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800c172:	4b10      	ldr	r3, [pc, #64]	; (800c1b4 <SysTimeGet+0x6c>)
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	4798      	blx	r3
 800c178:	4603      	mov	r3, r0
 800c17a:	b21b      	sxth	r3, r3
 800c17c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800c17e:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <SysTimeGet+0x6c>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	4798      	blx	r3
 800c184:	4603      	mov	r3, r0
 800c186:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800c188:	f107 0010 	add.w	r0, r7, #16
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	f107 0208 	add.w	r2, r7, #8
 800c196:	ca06      	ldmia	r2, {r1, r2}
 800c198:	f7ff ff9c 	bl	800c0d4 <SysTimeAdd>

  return sysTime;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f107 0310 	add.w	r3, r7, #16
 800c1a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	080122ac 	.word	0x080122ac

0800c1b8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  int i = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800c1c4:	e00e      	b.n	800c1e4 <ee_skip_atoi+0x2c>
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	1c59      	adds	r1, r3, #1
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6011      	str	r1, [r2, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	4403      	add	r3, r0
 800c1e0:	3b30      	subs	r3, #48	; 0x30
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b2f      	cmp	r3, #47	; 0x2f
 800c1ec:	d904      	bls.n	800c1f8 <ee_skip_atoi+0x40>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b39      	cmp	r3, #57	; 0x39
 800c1f6:	d9e6      	bls.n	800c1c6 <ee_skip_atoi+0xe>
  return i;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bc80      	pop	{r7}
 800c202:	4770      	bx	lr

0800c204 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800c204:	b480      	push	{r7}
 800c206:	b099      	sub	sp, #100	; 0x64
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800c212:	4b71      	ldr	r3, [pc, #452]	; (800c3d8 <ee_number+0x1d4>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800c218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <ee_number+0x24>
 800c222:	4b6e      	ldr	r3, [pc, #440]	; (800c3dc <ee_number+0x1d8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	dd02      	ble.n	800c234 <ee_number+0x30>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b24      	cmp	r3, #36	; 0x24
 800c232:	dd01      	ble.n	800c238 <ee_number+0x34>
 800c234:	2300      	movs	r3, #0
 800c236:	e0ca      	b.n	800c3ce <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800c238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <ee_number+0x42>
 800c242:	2330      	movs	r3, #48	; 0x30
 800c244:	e000      	b.n	800c248 <ee_number+0x44>
 800c246:	2320      	movs	r3, #32
 800c248:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800c252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c254:	f003 0302 	and.w	r3, r3, #2
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00b      	beq.n	800c274 <ee_number+0x70>
  {
    if (num < 0)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da08      	bge.n	800c274 <ee_number+0x70>
    {
      sign = '-';
 800c262:	232d      	movs	r3, #45	; 0x2d
 800c264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	425b      	negs	r3, r3
 800c26c:	607b      	str	r3, [r7, #4]
      size--;
 800c26e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c270:	3b01      	subs	r3, #1
 800c272:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11e      	bne.n	800c2bc <ee_number+0xb8>
    tmp[i++] = '0';
 800c27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	657a      	str	r2, [r7, #84]	; 0x54
 800c284:	3360      	adds	r3, #96	; 0x60
 800c286:	443b      	add	r3, r7
 800c288:	2230      	movs	r2, #48	; 0x30
 800c28a:	f803 2c50 	strb.w	r2, [r3, #-80]
 800c28e:	e018      	b.n	800c2c2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	fbb3 f1f2 	udiv	r1, r3, r2
 800c298:	fb01 f202 	mul.w	r2, r1, r2
 800c29c:	1a9b      	subs	r3, r3, r2
 800c29e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2a0:	441a      	add	r2, r3
 800c2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2a4:	1c59      	adds	r1, r3, #1
 800c2a6:	6579      	str	r1, [r7, #84]	; 0x54
 800c2a8:	7812      	ldrb	r2, [r2, #0]
 800c2aa:	3360      	adds	r3, #96	; 0x60
 800c2ac:	443b      	add	r3, r7
 800c2ae:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ba:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e6      	bne.n	800c290 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800c2c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	dd01      	ble.n	800c2ce <ee_number+0xca>
 800c2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800c2ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800c2d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d112      	bne.n	800c306 <ee_number+0x102>
 800c2e0:	e00c      	b.n	800c2fc <ee_number+0xf8>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	60fa      	str	r2, [r7, #12]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	60bb      	str	r3, [r7, #8]
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <ee_number+0xf8>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	e068      	b.n	800c3ce <ee_number+0x1ca>
 800c2fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2fe:	1e5a      	subs	r2, r3, #1
 800c300:	66ba      	str	r2, [r7, #104]	; 0x68
 800c302:	2b00      	cmp	r3, #0
 800c304:	dced      	bgt.n	800c2e2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800c306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d01b      	beq.n	800c346 <ee_number+0x142>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	60fa      	str	r2, [r7, #12]
 800c314:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c318:	701a      	strb	r2, [r3, #0]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	60bb      	str	r3, [r7, #8]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10f      	bne.n	800c346 <ee_number+0x142>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	e051      	b.n	800c3ce <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	60fa      	str	r2, [r7, #12]
 800c330:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	3b01      	subs	r3, #1
 800c33a:	60bb      	str	r3, [r7, #8]
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <ee_number+0x142>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	e043      	b.n	800c3ce <ee_number+0x1ca>
 800c346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dcec      	bgt.n	800c32a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800c350:	e00c      	b.n	800c36c <ee_number+0x168>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	60fa      	str	r2, [r7, #12]
 800c358:	2230      	movs	r2, #48	; 0x30
 800c35a:	701a      	strb	r2, [r3, #0]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	3b01      	subs	r3, #1
 800c360:	60bb      	str	r3, [r7, #8]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <ee_number+0x168>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	e030      	b.n	800c3ce <ee_number+0x1ca>
 800c36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c36e:	1e5a      	subs	r2, r3, #1
 800c370:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c374:	429a      	cmp	r2, r3
 800c376:	dbec      	blt.n	800c352 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800c378:	e010      	b.n	800c39c <ee_number+0x198>
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	60fa      	str	r2, [r7, #12]
 800c380:	f107 0110 	add.w	r1, r7, #16
 800c384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c386:	440a      	add	r2, r1
 800c388:	7812      	ldrb	r2, [r2, #0]
 800c38a:	701a      	strb	r2, [r3, #0]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	60bb      	str	r3, [r7, #8]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <ee_number+0x198>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	e018      	b.n	800c3ce <ee_number+0x1ca>
 800c39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c39e:	1e5a      	subs	r2, r3, #1
 800c3a0:	657a      	str	r2, [r7, #84]	; 0x54
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	dce9      	bgt.n	800c37a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800c3a6:	e00c      	b.n	800c3c2 <ee_number+0x1be>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	60fa      	str	r2, [r7, #12]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	60bb      	str	r3, [r7, #8]
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <ee_number+0x1be>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	e005      	b.n	800c3ce <ee_number+0x1ca>
 800c3c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3c4:	1e5a      	subs	r2, r3, #1
 800c3c6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dced      	bgt.n	800c3a8 <ee_number+0x1a4>

  return str;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3764      	adds	r7, #100	; 0x64
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bc80      	pop	{r7}
 800c3d6:	4770      	bx	lr
 800c3d8:	20000fb0 	.word	0x20000fb0
 800c3dc:	20000fb4 	.word	0x20000fb4

0800c3e0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b092      	sub	sp, #72	; 0x48
 800c3e4:	af04      	add	r7, sp, #16
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dc01      	bgt.n	800c3f8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e142      	b.n	800c67e <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3fc:	e12a      	b.n	800c654 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800c3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	1ad2      	subs	r2, r2, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	3b01      	subs	r3, #1
 800c408:	429a      	cmp	r2, r3
 800c40a:	f280 8131 	bge.w	800c670 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b25      	cmp	r3, #37	; 0x25
 800c414:	d006      	beq.n	800c424 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41a:	1c59      	adds	r1, r3, #1
 800c41c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c41e:	7812      	ldrb	r2, [r2, #0]
 800c420:	701a      	strb	r2, [r3, #0]
      continue;
 800c422:	e114      	b.n	800c64e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	3301      	adds	r3, #1
 800c42c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b30      	cmp	r3, #48	; 0x30
 800c434:	d103      	bne.n	800c43e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	f043 0301 	orr.w	r3, r3, #1
 800c43c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800c43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c442:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b2f      	cmp	r3, #47	; 0x2f
 800c44a:	d908      	bls.n	800c45e <tiny_vsnprintf_like+0x7e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b39      	cmp	r3, #57	; 0x39
 800c452:	d804      	bhi.n	800c45e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800c454:	1d3b      	adds	r3, r7, #4
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff feae 	bl	800c1b8 <ee_skip_atoi>
 800c45c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800c45e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c462:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800c464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c468:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800c46a:	230a      	movs	r3, #10
 800c46c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	3b58      	subs	r3, #88	; 0x58
 800c474:	2b20      	cmp	r3, #32
 800c476:	f200 8094 	bhi.w	800c5a2 <tiny_vsnprintf_like+0x1c2>
 800c47a:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <tiny_vsnprintf_like+0xa0>)
 800c47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c480:	0800c58b 	.word	0x0800c58b
 800c484:	0800c5a3 	.word	0x0800c5a3
 800c488:	0800c5a3 	.word	0x0800c5a3
 800c48c:	0800c5a3 	.word	0x0800c5a3
 800c490:	0800c5a3 	.word	0x0800c5a3
 800c494:	0800c5a3 	.word	0x0800c5a3
 800c498:	0800c5a3 	.word	0x0800c5a3
 800c49c:	0800c5a3 	.word	0x0800c5a3
 800c4a0:	0800c5a3 	.word	0x0800c5a3
 800c4a4:	0800c5a3 	.word	0x0800c5a3
 800c4a8:	0800c5a3 	.word	0x0800c5a3
 800c4ac:	0800c50f 	.word	0x0800c50f
 800c4b0:	0800c599 	.word	0x0800c599
 800c4b4:	0800c5a3 	.word	0x0800c5a3
 800c4b8:	0800c5a3 	.word	0x0800c5a3
 800c4bc:	0800c5a3 	.word	0x0800c5a3
 800c4c0:	0800c5a3 	.word	0x0800c5a3
 800c4c4:	0800c599 	.word	0x0800c599
 800c4c8:	0800c5a3 	.word	0x0800c5a3
 800c4cc:	0800c5a3 	.word	0x0800c5a3
 800c4d0:	0800c5a3 	.word	0x0800c5a3
 800c4d4:	0800c5a3 	.word	0x0800c5a3
 800c4d8:	0800c5a3 	.word	0x0800c5a3
 800c4dc:	0800c5a3 	.word	0x0800c5a3
 800c4e0:	0800c5a3 	.word	0x0800c5a3
 800c4e4:	0800c5a3 	.word	0x0800c5a3
 800c4e8:	0800c5a3 	.word	0x0800c5a3
 800c4ec:	0800c52f 	.word	0x0800c52f
 800c4f0:	0800c5a3 	.word	0x0800c5a3
 800c4f4:	0800c5ef 	.word	0x0800c5ef
 800c4f8:	0800c5a3 	.word	0x0800c5a3
 800c4fc:	0800c5a3 	.word	0x0800c5a3
 800c500:	0800c593 	.word	0x0800c593
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c50a:	2220      	movs	r2, #32
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	3b01      	subs	r3, #1
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2b00      	cmp	r3, #0
 800c518:	dcf4      	bgt.n	800c504 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	1d1a      	adds	r2, r3, #4
 800c51e:	603a      	str	r2, [r7, #0]
 800c520:	6819      	ldr	r1, [r3, #0]
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c528:	b2ca      	uxtb	r2, r1
 800c52a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800c52c:	e08f      	b.n	800c64e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	1d1a      	adds	r2, r3, #4
 800c532:	603a      	str	r2, [r7, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <tiny_vsnprintf_like+0x162>
 800c53e:	4b52      	ldr	r3, [pc, #328]	; (800c688 <tiny_vsnprintf_like+0x2a8>)
 800c540:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800c542:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c544:	f7f3 fe1c 	bl	8000180 <strlen>
 800c548:	4603      	mov	r3, r0
 800c54a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800c54c:	e004      	b.n	800c558 <tiny_vsnprintf_like+0x178>
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c554:	2220      	movs	r2, #32
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	1e5a      	subs	r2, r3, #1
 800c55c:	61fa      	str	r2, [r7, #28]
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	429a      	cmp	r2, r3
 800c562:	dbf4      	blt.n	800c54e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800c564:	2300      	movs	r3, #0
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
 800c568:	e00a      	b.n	800c580 <tiny_vsnprintf_like+0x1a0>
 800c56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56c:	1c53      	adds	r3, r2, #1
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	1c59      	adds	r1, r3, #1
 800c574:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	3301      	adds	r3, #1
 800c57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	429a      	cmp	r2, r3
 800c586:	dbf0      	blt.n	800c56a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800c588:	e061      	b.n	800c64e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c590:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800c592:	2310      	movs	r3, #16
 800c594:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800c596:	e02d      	b.n	800c5f4 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	f043 0302 	orr.w	r3, r3, #2
 800c59e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800c5a0:	e025      	b.n	800c5ee <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b25      	cmp	r3, #37	; 0x25
 800c5a8:	d004      	beq.n	800c5b4 <tiny_vsnprintf_like+0x1d4>
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5b0:	2225      	movs	r2, #37	; 0x25
 800c5b2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800c5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	da17      	bge.n	800c5f2 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	1c59      	adds	r1, r3, #1
 800c5d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c5d2:	7812      	ldrb	r2, [r2, #0]
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	e002      	b.n	800c5de <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800c5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	1ad2      	subs	r2, r2, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	db2f      	blt.n	800c64c <tiny_vsnprintf_like+0x26c>
 800c5ec:	e002      	b.n	800c5f4 <tiny_vsnprintf_like+0x214>
        break;
 800c5ee:	bf00      	nop
 800c5f0:	e000      	b.n	800c5f4 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800c5f2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b6c      	cmp	r3, #108	; 0x6c
 800c5f8:	d105      	bne.n	800c606 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	1d1a      	adds	r2, r3, #4
 800c5fe:	603a      	str	r2, [r7, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	637b      	str	r3, [r7, #52]	; 0x34
 800c604:	e00f      	b.n	800c626 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d005      	beq.n	800c61c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	603a      	str	r2, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
 800c61a:	e004      	b.n	800c626 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	1d1a      	adds	r2, r3, #4
 800c620:	603a      	str	r2, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	1e5a      	subs	r2, r3, #1
 800c62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	1acb      	subs	r3, r1, r3
 800c630:	1ad1      	subs	r1, r2, r3
 800c632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	9302      	str	r3, [sp, #8]
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c644:	f7ff fdde 	bl	800c204 <ee_number>
 800c648:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c64a:	e000      	b.n	800c64e <tiny_vsnprintf_like+0x26e>
        continue;
 800c64c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3301      	adds	r3, #1
 800c652:	607b      	str	r3, [r7, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f47f aed0 	bne.w	800c3fe <tiny_vsnprintf_like+0x1e>
 800c65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	1ad2      	subs	r2, r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	3b01      	subs	r3, #1
 800c668:	429a      	cmp	r2, r3
 800c66a:	f6bf aec8 	bge.w	800c3fe <tiny_vsnprintf_like+0x1e>
 800c66e:	e000      	b.n	800c672 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800c670:	bf00      	nop
  }

  *str = '\0';
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	2200      	movs	r2, #0
 800c676:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800c678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	1ad3      	subs	r3, r2, r3
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3738      	adds	r7, #56	; 0x38
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	080121c0 	.word	0x080121c0

0800c68c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b090      	sub	sp, #64	; 0x40
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c694:	4b73      	ldr	r3, [pc, #460]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c69a:	4b72      	ldr	r3, [pc, #456]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	4a70      	ldr	r2, [pc, #448]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c6a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c6a6:	4b70      	ldr	r3, [pc, #448]	; (800c868 <UTIL_SEQ_Run+0x1dc>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c6ac:	4b6f      	ldr	r3, [pc, #444]	; (800c86c <UTIL_SEQ_Run+0x1e0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c6b2:	4b6f      	ldr	r3, [pc, #444]	; (800c870 <UTIL_SEQ_Run+0x1e4>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c6b8:	4b6e      	ldr	r3, [pc, #440]	; (800c874 <UTIL_SEQ_Run+0x1e8>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c6be:	e08d      	b.n	800c7dc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c6c4:	e002      	b.n	800c6cc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c6cc:	4a6a      	ldr	r2, [pc, #424]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	401a      	ands	r2, r3
 800c6d8:	4b62      	ldr	r3, [pc, #392]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4013      	ands	r3, r2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0f1      	beq.n	800c6c6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c6e2:	4a65      	ldr	r2, [pc, #404]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	401a      	ands	r2, r3
 800c6ee:	4b5d      	ldr	r3, [pc, #372]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c6f6:	4a60      	ldr	r2, [pc, #384]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	4413      	add	r3, r2
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	4013      	ands	r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d106      	bne.n	800c716 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c708:	4a5b      	ldr	r2, [pc, #364]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	4413      	add	r3, r2
 800c710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c714:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c716:	4a58      	ldr	r2, [pc, #352]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	4413      	add	r3, r2
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	4013      	ands	r3, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f000 f907 	bl	800c938 <SEQ_BitPosition>
 800c72a:	4603      	mov	r3, r0
 800c72c:	461a      	mov	r2, r3
 800c72e:	4b53      	ldr	r3, [pc, #332]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c730:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c732:	4a51      	ldr	r2, [pc, #324]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c736:	00db      	lsls	r3, r3, #3
 800c738:	4413      	add	r3, r2
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	4b4f      	ldr	r3, [pc, #316]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2101      	movs	r1, #1
 800c742:	fa01 f303 	lsl.w	r3, r1, r3
 800c746:	43db      	mvns	r3, r3
 800c748:	401a      	ands	r2, r3
 800c74a:	494b      	ldr	r1, [pc, #300]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	440b      	add	r3, r1
 800c752:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c754:	f3ef 8310 	mrs	r3, PRIMASK
 800c758:	61bb      	str	r3, [r7, #24]
  return(result);
 800c75a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c75c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c75e:	b672      	cpsid	i
}
 800c760:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c762:	4b46      	ldr	r3, [pc, #280]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2201      	movs	r2, #1
 800c768:	fa02 f303 	lsl.w	r3, r2, r3
 800c76c:	43da      	mvns	r2, r3
 800c76e:	4b3e      	ldr	r3, [pc, #248]	; (800c868 <UTIL_SEQ_Run+0x1dc>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4013      	ands	r3, r2
 800c774:	4a3c      	ldr	r2, [pc, #240]	; (800c868 <UTIL_SEQ_Run+0x1dc>)
 800c776:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c778:	2301      	movs	r3, #1
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77c:	e013      	b.n	800c7a6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c780:	3b01      	subs	r3, #1
 800c782:	4a3d      	ldr	r2, [pc, #244]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c784:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c788:	4b3c      	ldr	r3, [pc, #240]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2201      	movs	r2, #1
 800c78e:	fa02 f303 	lsl.w	r3, r2, r3
 800c792:	43da      	mvns	r2, r3
 800c794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c796:	3b01      	subs	r3, #1
 800c798:	400a      	ands	r2, r1
 800c79a:	4937      	ldr	r1, [pc, #220]	; (800c878 <UTIL_SEQ_Run+0x1ec>)
 800c79c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e8      	bne.n	800c77e <UTIL_SEQ_Run+0xf2>
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f383 8810 	msr	PRIMASK, r3
}
 800c7b6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c7b8:	4b30      	ldr	r3, [pc, #192]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a30      	ldr	r2, [pc, #192]	; (800c880 <UTIL_SEQ_Run+0x1f4>)
 800c7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c2:	4798      	blx	r3

    local_taskset = TaskSet;
 800c7c4:	4b28      	ldr	r3, [pc, #160]	; (800c868 <UTIL_SEQ_Run+0x1dc>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c7ca:	4b28      	ldr	r3, [pc, #160]	; (800c86c <UTIL_SEQ_Run+0x1e0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c7d0:	4b27      	ldr	r3, [pc, #156]	; (800c870 <UTIL_SEQ_Run+0x1e4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c7d6:	4b27      	ldr	r3, [pc, #156]	; (800c874 <UTIL_SEQ_Run+0x1e8>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	401a      	ands	r2, r3
 800c7e2:	4b20      	ldr	r3, [pc, #128]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d005      	beq.n	800c7f8 <UTIL_SEQ_Run+0x16c>
 800c7ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f43f af64 	beq.w	800c6c0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c7f8:	4b20      	ldr	r3, [pc, #128]	; (800c87c <UTIL_SEQ_Run+0x1f0>)
 800c7fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c800:	f000 f88e 	bl	800c920 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c804:	f3ef 8310 	mrs	r3, PRIMASK
 800c808:	613b      	str	r3, [r7, #16]
  return(result);
 800c80a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c80c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c80e:	b672      	cpsid	i
}
 800c810:	bf00      	nop
  local_taskset = TaskSet;
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <UTIL_SEQ_Run+0x1dc>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c818:	4b14      	ldr	r3, [pc, #80]	; (800c86c <UTIL_SEQ_Run+0x1e0>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c81e:	4b14      	ldr	r3, [pc, #80]	; (800c870 <UTIL_SEQ_Run+0x1e4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	401a      	ands	r2, r3
 800c82a:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4013      	ands	r3, r2
 800c830:	2b00      	cmp	r3, #0
 800c832:	d107      	bne.n	800c844 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <UTIL_SEQ_Run+0x1e8>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c840:	f7f5 f9fa 	bl	8001c38 <UTIL_SEQ_Idle>
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f383 8810 	msr	PRIMASK, r3
}
 800c84e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c850:	f000 f86c 	bl	800c92c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c854:	4a03      	ldr	r2, [pc, #12]	; (800c864 <UTIL_SEQ_Run+0x1d8>)
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	6013      	str	r3, [r2, #0]

  return;
 800c85a:	bf00      	nop
}
 800c85c:	3740      	adds	r7, #64	; 0x40
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	20000fbc 	.word	0x20000fbc
 800c868:	20001764 	.word	0x20001764
 800c86c:	20001768 	.word	0x20001768
 800c870:	20000fb8 	.word	0x20000fb8
 800c874:	2000176c 	.word	0x2000176c
 800c878:	20001778 	.word	0x20001778
 800c87c:	20001770 	.word	0x20001770
 800c880:	20001774 	.word	0x20001774

0800c884 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c890:	f3ef 8310 	mrs	r3, PRIMASK
 800c894:	617b      	str	r3, [r7, #20]
  return(result);
 800c896:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c89a:	b672      	cpsid	i
}
 800c89c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 f84a 	bl	800c938 <SEQ_BitPosition>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4a06      	ldr	r2, [pc, #24]	; (800c8c4 <UTIL_SEQ_RegTask+0x40>)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	f383 8810 	msr	PRIMASK, r3
}
 800c8ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c8bc:	bf00      	nop
}
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20001774 	.word	0x20001774

0800c8c8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c8d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8dc:	b672      	cpsid	i
}
 800c8de:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c8e0:	4b0d      	ldr	r3, [pc, #52]	; (800c918 <UTIL_SEQ_SetTask+0x50>)
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	4a0b      	ldr	r2, [pc, #44]	; (800c918 <UTIL_SEQ_SetTask+0x50>)
 800c8ea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c8ec:	4a0b      	ldr	r2, [pc, #44]	; (800c91c <UTIL_SEQ_SetTask+0x54>)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	4908      	ldr	r1, [pc, #32]	; (800c91c <UTIL_SEQ_SetTask+0x54>)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	f383 8810 	msr	PRIMASK, r3
}
 800c90a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c90c:	bf00      	nop
}
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	bc80      	pop	{r7}
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	20001764 	.word	0x20001764
 800c91c:	20001778 	.word	0x20001778

0800c920 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c924:	bf00      	nop
}
 800c926:	46bd      	mov	sp, r7
 800c928:	bc80      	pop	{r7}
 800c92a:	4770      	bx	lr

0800c92c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c930:	bf00      	nop
}
 800c932:	46bd      	mov	sp, r7
 800c934:	bc80      	pop	{r7}
 800c936:	4770      	bx	lr

0800c938 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	0c1b      	lsrs	r3, r3, #16
 800c94c:	041b      	lsls	r3, r3, #16
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d104      	bne.n	800c95c <SEQ_BitPosition+0x24>
 800c952:	2310      	movs	r3, #16
 800c954:	73fb      	strb	r3, [r7, #15]
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	041b      	lsls	r3, r3, #16
 800c95a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d105      	bne.n	800c972 <SEQ_BitPosition+0x3a>
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	3308      	adds	r3, #8
 800c96a:	73fb      	strb	r3, [r7, #15]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d105      	bne.n	800c988 <SEQ_BitPosition+0x50>
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	3304      	adds	r3, #4
 800c980:	73fb      	strb	r3, [r7, #15]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	0f1b      	lsrs	r3, r3, #28
 800c98c:	4a06      	ldr	r2, [pc, #24]	; (800c9a8 <SEQ_BitPosition+0x70>)
 800c98e:	5cd2      	ldrb	r2, [r2, r3]
 800c990:	7bfb      	ldrb	r3, [r7, #15]
 800c992:	4413      	add	r3, r2
 800c994:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	f1c3 031f 	rsb	r3, r3, #31
 800c99c:	b2db      	uxtb	r3, r3
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bc80      	pop	{r7}
 800c9a6:	4770      	bx	lr
 800c9a8:	08012430 	.word	0x08012430

0800c9ac <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800c9b0:	4b04      	ldr	r3, [pc, #16]	; (800c9c4 <UTIL_TIMER_Init+0x18>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800c9b6:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <UTIL_TIMER_Init+0x1c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4798      	blx	r3
 800c9bc:	4603      	mov	r3, r0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20001780 	.word	0x20001780
 800c9c8:	08012280 	.word	0x08012280

0800c9cc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	603b      	str	r3, [r7, #0]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d023      	beq.n	800ca2a <UTIL_TIMER_Create+0x5e>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d020      	beq.n	800ca2a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c9ee:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <UTIL_TIMER_Create+0x68>)
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	68b8      	ldr	r0, [r7, #8]
 800c9f4:	4798      	blx	r3
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	69ba      	ldr	r2, [r7, #24]
 800ca18:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	79fa      	ldrb	r2, [r7, #7]
 800ca1e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	e000      	b.n	800ca2c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ca2a:	2301      	movs	r3, #1
  }
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	08012280 	.word	0x08012280

0800ca38 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d056      	beq.n	800cafa <UTIL_TIMER_Start+0xc2>
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f9a9 	bl	800cda4 <TimerExists>
 800ca52:	4603      	mov	r3, r0
 800ca54:	f083 0301 	eor.w	r3, r3, #1
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d04d      	beq.n	800cafa <UTIL_TIMER_Start+0xc2>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7a5b      	ldrb	r3, [r3, #9]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d149      	bne.n	800cafa <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca66:	f3ef 8310 	mrs	r3, PRIMASK
 800ca6a:	613b      	str	r3, [r7, #16]
  return(result);
 800ca6c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ca6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca70:	b672      	cpsid	i
}
 800ca72:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ca7a:	4b24      	ldr	r3, [pc, #144]	; (800cb0c <UTIL_TIMER_Start+0xd4>)
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	4798      	blx	r3
 800ca80:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800ca82:	6a3a      	ldr	r2, [r7, #32]
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d201      	bcs.n	800ca8e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a3a      	ldr	r2, [r7, #32]
 800ca92:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800caa6:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <UTIL_TIMER_Start+0xd8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800caae:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <UTIL_TIMER_Start+0xd4>)
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f9eb 	bl	800ce90 <TimerInsertNewHeadTimer>
 800caba:	e017      	b.n	800caec <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800cabc:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <UTIL_TIMER_Start+0xd4>)
 800cabe:	699b      	ldr	r3, [r3, #24]
 800cac0:	4798      	blx	r3
 800cac2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	441a      	add	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	4b0e      	ldr	r3, [pc, #56]	; (800cb10 <UTIL_TIMER_Start+0xd8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d203      	bcs.n	800cae6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f9d6 	bl	800ce90 <TimerInsertNewHeadTimer>
 800cae4:	e002      	b.n	800caec <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f9a2 	bl	800ce30 <TimerInsertTimer>
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f383 8810 	msr	PRIMASK, r3
}
 800caf6:	bf00      	nop
  {
 800caf8:	e002      	b.n	800cb00 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800cafa:	2301      	movs	r3, #1
 800cafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800cb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3728      	adds	r7, #40	; 0x28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	08012280 	.word	0x08012280
 800cb10:	20001780 	.word	0x20001780

0800cb14 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d05b      	beq.n	800cbde <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb26:	f3ef 8310 	mrs	r3, PRIMASK
 800cb2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cb2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb30:	b672      	cpsid	i
}
 800cb32:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800cb34:	4b2d      	ldr	r3, [pc, #180]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800cb3a:	4b2c      	ldr	r3, [pc, #176]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800cb46:	4b29      	ldr	r3, [pc, #164]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d041      	beq.n	800cbd2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800cb54:	4b25      	ldr	r3, [pc, #148]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d134      	bne.n	800cbc8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800cb5e:	4b23      	ldr	r3, [pc, #140]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800cb66:	4b21      	ldr	r3, [pc, #132]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	4a1d      	ldr	r2, [pc, #116]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb78:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 f92c 	bl	800cddc <TimerSetTimeout>
 800cb84:	e023      	b.n	800cbce <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800cb86:	4b1a      	ldr	r3, [pc, #104]	; (800cbf0 <UTIL_TIMER_Stop+0xdc>)
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	4798      	blx	r3
            TimerListHead = NULL;
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <UTIL_TIMER_Stop+0xd8>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	e01c      	b.n	800cbce <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d110      	bne.n	800cbbe <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800cbb0:	e00d      	b.n	800cbce <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	615a      	str	r2, [r3, #20]
            break;
 800cbbc:	e007      	b.n	800cbce <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	695b      	ldr	r3, [r3, #20]
 800cbc6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e2      	bne.n	800cb94 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	77fb      	strb	r3, [r7, #31]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f383 8810 	msr	PRIMASK, r3
}
 800cbdc:	e001      	b.n	800cbe2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800cbe2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3720      	adds	r7, #32
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20001780 	.word	0x20001780
 800cbf0:	08012280 	.word	0x08012280

0800cbf4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	73fb      	strb	r3, [r7, #15]
 800cc0c:	e014      	b.n	800cc38 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <UTIL_TIMER_SetPeriod+0x50>)
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	6838      	ldr	r0, [r7, #0]
 800cc14:	4798      	blx	r3
 800cc16:	4602      	mov	r2, r0
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f8c1 	bl	800cda4 <TimerExists>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff ff73 	bl	800cb14 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff ff02 	bl	800ca38 <UTIL_TIMER_Start>
 800cc34:	4603      	mov	r3, r0
 800cc36:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	08012280 	.word	0x08012280

0800cc48 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b089      	sub	sp, #36	; 0x24
 800cc4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc4e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc52:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc54:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cc56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc58:	b672      	cpsid	i
}
 800cc5a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800cc5c:	4b38      	ldr	r3, [pc, #224]	; (800cd40 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	4798      	blx	r3
 800cc62:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800cc64:	4b36      	ldr	r3, [pc, #216]	; (800cd40 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	4798      	blx	r3
 800cc6a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800cc74:	4b33      	ldr	r3, [pc, #204]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d037      	beq.n	800ccec <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800cc7c:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d206      	bcs.n	800cc9a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	1ad2      	subs	r2, r2, r3
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	e002      	b.n	800cca0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1ea      	bne.n	800cc82 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ccac:	e01e      	b.n	800ccec <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800ccae:	4b25      	ldr	r3, [pc, #148]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800ccb4:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	4a22      	ldr	r2, [pc, #136]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccbc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	69fa      	ldr	r2, [r7, #28]
 800ccd0:	6912      	ldr	r2, [r2, #16]
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	7adb      	ldrb	r3, [r3, #11]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d106      	bne.n	800ccec <UTIL_TIMER_IRQ_Handler+0xa4>
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	7a9b      	ldrb	r3, [r3, #10]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d102      	bne.n	800ccec <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800cce6:	69f8      	ldr	r0, [r7, #28]
 800cce8:	f7ff fea6 	bl	800ca38 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ccec:	4b15      	ldr	r3, [pc, #84]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00d      	beq.n	800cd10 <UTIL_TIMER_IRQ_Handler+0xc8>
 800ccf4:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0d7      	beq.n	800ccae <UTIL_TIMER_IRQ_Handler+0x66>
 800ccfe:	4b11      	ldr	r3, [pc, #68]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681c      	ldr	r4, [r3, #0]
 800cd04:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	4798      	blx	r3
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	429c      	cmp	r4, r3
 800cd0e:	d3ce      	bcc.n	800ccae <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800cd10:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d009      	beq.n	800cd2c <UTIL_TIMER_IRQ_Handler+0xe4>
 800cd18:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	7a1b      	ldrb	r3, [r3, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d104      	bne.n	800cd2c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800cd22:	4b08      	ldr	r3, [pc, #32]	; (800cd44 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f858 	bl	800cddc <TimerSetTimeout>
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f383 8810 	msr	PRIMASK, r3
}
 800cd36:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800cd38:	bf00      	nop
 800cd3a:	3724      	adds	r7, #36	; 0x24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd90      	pop	{r4, r7, pc}
 800cd40:	08012280 	.word	0x08012280
 800cd44:	20001780 	.word	0x20001780

0800cd48 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800cd4e:	4b06      	ldr	r3, [pc, #24]	; (800cd68 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	4798      	blx	r3
 800cd54:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800cd56:	4b04      	ldr	r3, [pc, #16]	; (800cd68 <UTIL_TIMER_GetCurrentTime+0x20>)
 800cd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	4798      	blx	r3
 800cd5e:	4603      	mov	r3, r0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	08012280 	.word	0x08012280

0800cd6c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cd74:	4b0a      	ldr	r3, [pc, #40]	; (800cda0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	4798      	blx	r3
 800cd7a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cd7c:	4b08      	ldr	r3, [pc, #32]	; (800cda0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	4798      	blx	r3
 800cd84:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	1a8a      	subs	r2, r1, r2
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	4603      	mov	r3, r0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	08012280 	.word	0x08012280

0800cda4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <TimerExists+0x34>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800cdb2:	e008      	b.n	800cdc6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d101      	bne.n	800cdc0 <TimerExists+0x1c>
    {
      return true;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e006      	b.n	800cdce <TimerExists+0x2a>
    }
    cur = cur->Next;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1f3      	bne.n	800cdb4 <TimerExists+0x10>
  }
  return false;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bc80      	pop	{r7}
 800cdd6:	4770      	bx	lr
 800cdd8:	20001780 	.word	0x20001780

0800cddc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800cddc:	b590      	push	{r4, r7, lr}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cde4:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <TimerSetTimeout+0x50>)
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	4798      	blx	r3
 800cdea:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681c      	ldr	r4, [r3, #0]
 800cdf6:	4b0d      	ldr	r3, [pc, #52]	; (800ce2c <TimerSetTimeout+0x50>)
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	4798      	blx	r3
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	4413      	add	r3, r2
 800ce02:	429c      	cmp	r4, r3
 800ce04:	d207      	bcs.n	800ce16 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ce06:	4b09      	ldr	r3, [pc, #36]	; (800ce2c <TimerSetTimeout+0x50>)
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	4798      	blx	r3
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	441a      	add	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ce16:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <TimerSetTimeout+0x50>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	4610      	mov	r0, r2
 800ce20:	4798      	blx	r3
}
 800ce22:	bf00      	nop
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd90      	pop	{r4, r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	08012280 	.word	0x08012280

0800ce30 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ce38:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <TimerInsertTimer+0x5c>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ce3e:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <TimerInsertTimer+0x5c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800ce46:	e012      	b.n	800ce6e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d905      	bls.n	800ce60 <TimerInsertTimer+0x30>
    {
        cur = next;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	60bb      	str	r3, [r7, #8]
 800ce5e:	e006      	b.n	800ce6e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	615a      	str	r2, [r3, #20]
        return;
 800ce6c:	e009      	b.n	800ce82 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e8      	bne.n	800ce48 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	615a      	str	r2, [r3, #20]
}
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bc80      	pop	{r7}
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	20001780 	.word	0x20001780

0800ce90 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ce98:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <TimerInsertNewHeadTimer+0x38>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ceb0:	4a05      	ldr	r2, [pc, #20]	; (800cec8 <TimerInsertNewHeadTimer+0x38>)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ceb6:	4b04      	ldr	r3, [pc, #16]	; (800cec8 <TimerInsertNewHeadTimer+0x38>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff ff8e 	bl	800cddc <TimerSetTimeout>
}
 800cec0:	bf00      	nop
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	20001780 	.word	0x20001780

0800cecc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ced0:	2218      	movs	r2, #24
 800ced2:	2100      	movs	r1, #0
 800ced4:	4807      	ldr	r0, [pc, #28]	; (800cef4 <UTIL_ADV_TRACE_Init+0x28>)
 800ced6:	f7ff f8e2 	bl	800c09e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ceda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cede:	2100      	movs	r1, #0
 800cee0:	4805      	ldr	r0, [pc, #20]	; (800cef8 <UTIL_ADV_TRACE_Init+0x2c>)
 800cee2:	f7ff f8dc 	bl	800c09e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800cee6:	4b05      	ldr	r3, [pc, #20]	; (800cefc <UTIL_ADV_TRACE_Init+0x30>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4805      	ldr	r0, [pc, #20]	; (800cf00 <UTIL_ADV_TRACE_Init+0x34>)
 800ceec:	4798      	blx	r3
 800ceee:	4603      	mov	r3, r0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	20001784 	.word	0x20001784
 800cef8:	2000179c 	.word	0x2000179c
 800cefc:	080122c0 	.word	0x080122c0
 800cf00:	0800d149 	.word	0x0800d149

0800cf04 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800cf04:	b408      	push	{r3}
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b08d      	sub	sp, #52	; 0x34
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800cf12:	2300      	movs	r3, #0
 800cf14:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800cf16:	2300      	movs	r3, #0
 800cf18:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800cf1a:	4b37      	ldr	r3, [pc, #220]	; (800cff8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf1c:	7a1b      	ldrb	r3, [r3, #8]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d902      	bls.n	800cf2c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800cf26:	f06f 0304 	mvn.w	r3, #4
 800cf2a:	e05e      	b.n	800cfea <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800cf2c:	4b32      	ldr	r3, [pc, #200]	; (800cff8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4013      	ands	r3, r2
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d002      	beq.n	800cf40 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800cf3a:	f06f 0305 	mvn.w	r3, #5
 800cf3e:	e054      	b.n	800cfea <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800cf40:	4b2d      	ldr	r3, [pc, #180]	; (800cff8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00a      	beq.n	800cf5e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d007      	beq.n	800cf5e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800cf4e:	4b2a      	ldr	r3, [pc, #168]	; (800cff8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f107 0116 	add.w	r1, r7, #22
 800cf56:	f107 0218 	add.w	r2, r7, #24
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800cf5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cf62:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf68:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf6c:	4823      	ldr	r0, [pc, #140]	; (800cffc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800cf6e:	f7ff fa37 	bl	800c3e0 <tiny_vsnprintf_like>
 800cf72:	4603      	mov	r3, r0
 800cf74:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800cf76:	f000 f9f1 	bl	800d35c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800cf7a:	8afa      	ldrh	r2, [r7, #22]
 800cf7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf7e:	4413      	add	r3, r2
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f107 0214 	add.w	r2, r7, #20
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 f969 	bl	800d260 <TRACE_AllocateBufer>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf94:	d025      	beq.n	800cfe2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800cf96:	2300      	movs	r3, #0
 800cf98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf9a:	e00e      	b.n	800cfba <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800cf9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf9e:	8aba      	ldrh	r2, [r7, #20]
 800cfa0:	3330      	adds	r3, #48	; 0x30
 800cfa2:	443b      	add	r3, r7
 800cfa4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800cfa8:	4b15      	ldr	r3, [pc, #84]	; (800d000 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800cfaa:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800cfac:	8abb      	ldrh	r3, [r7, #20]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800cfb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cfba:	8afb      	ldrh	r3, [r7, #22]
 800cfbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d3ec      	bcc.n	800cf9c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800cfc2:	8abb      	ldrh	r3, [r7, #20]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b0e      	ldr	r3, [pc, #56]	; (800d000 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800cfc8:	18d0      	adds	r0, r2, r3
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfd2:	f7ff fa05 	bl	800c3e0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800cfd6:	f000 f9df 	bl	800d398 <TRACE_UnLock>

    return TRACE_Send();
 800cfda:	f000 f831 	bl	800d040 <TRACE_Send>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	e003      	b.n	800cfea <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800cfe2:	f000 f9d9 	bl	800d398 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800cfe6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3734      	adds	r7, #52	; 0x34
 800cfee:	46bd      	mov	sp, r7
 800cff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cff4:	b001      	add	sp, #4
 800cff6:	4770      	bx	lr
 800cff8:	20001784 	.word	0x20001784
 800cffc:	2000199c 	.word	0x2000199c
 800d000:	2000179c 	.word	0x2000179c

0800d004 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800d00c:	4a03      	ldr	r2, [pc, #12]	; (800d01c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6053      	str	r3, [r2, #4]
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	bc80      	pop	{r7}
 800d01a:	4770      	bx	lr
 800d01c:	20001784 	.word	0x20001784

0800d020 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	4603      	mov	r3, r0
 800d028:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800d02a:	4a04      	ldr	r2, [pc, #16]	; (800d03c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	7213      	strb	r3, [r2, #8]
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	bc80      	pop	{r7}
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	20001784 	.word	0x20001784

0800d040 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d04e:	f3ef 8310 	mrs	r3, PRIMASK
 800d052:	613b      	str	r3, [r7, #16]
  return(result);
 800d054:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d058:	b672      	cpsid	i
}
 800d05a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800d05c:	f000 f9ba 	bl	800d3d4 <TRACE_IsLocked>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d15d      	bne.n	800d122 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800d066:	f000 f979 	bl	800d35c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800d06a:	4b34      	ldr	r3, [pc, #208]	; (800d13c <TRACE_Send+0xfc>)
 800d06c:	8a1a      	ldrh	r2, [r3, #16]
 800d06e:	4b33      	ldr	r3, [pc, #204]	; (800d13c <TRACE_Send+0xfc>)
 800d070:	8a5b      	ldrh	r3, [r3, #18]
 800d072:	429a      	cmp	r2, r3
 800d074:	d04d      	beq.n	800d112 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d076:	4b31      	ldr	r3, [pc, #196]	; (800d13c <TRACE_Send+0xfc>)
 800d078:	789b      	ldrb	r3, [r3, #2]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d117      	bne.n	800d0ae <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800d07e:	4b2f      	ldr	r3, [pc, #188]	; (800d13c <TRACE_Send+0xfc>)
 800d080:	881a      	ldrh	r2, [r3, #0]
 800d082:	4b2e      	ldr	r3, [pc, #184]	; (800d13c <TRACE_Send+0xfc>)
 800d084:	8a1b      	ldrh	r3, [r3, #16]
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	b29a      	uxth	r2, r3
 800d08a:	4b2c      	ldr	r3, [pc, #176]	; (800d13c <TRACE_Send+0xfc>)
 800d08c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d08e:	4b2b      	ldr	r3, [pc, #172]	; (800d13c <TRACE_Send+0xfc>)
 800d090:	2202      	movs	r2, #2
 800d092:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d094:	4b29      	ldr	r3, [pc, #164]	; (800d13c <TRACE_Send+0xfc>)
 800d096:	2200      	movs	r2, #0
 800d098:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d09a:	4b28      	ldr	r3, [pc, #160]	; (800d13c <TRACE_Send+0xfc>)
 800d09c:	8a9b      	ldrh	r3, [r3, #20]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d105      	bne.n	800d0ae <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d0a2:	4b26      	ldr	r3, [pc, #152]	; (800d13c <TRACE_Send+0xfc>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d0a8:	4b24      	ldr	r3, [pc, #144]	; (800d13c <TRACE_Send+0xfc>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d0ae:	4b23      	ldr	r3, [pc, #140]	; (800d13c <TRACE_Send+0xfc>)
 800d0b0:	789b      	ldrb	r3, [r3, #2]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d115      	bne.n	800d0e2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d0b6:	4b21      	ldr	r3, [pc, #132]	; (800d13c <TRACE_Send+0xfc>)
 800d0b8:	8a5a      	ldrh	r2, [r3, #18]
 800d0ba:	4b20      	ldr	r3, [pc, #128]	; (800d13c <TRACE_Send+0xfc>)
 800d0bc:	8a1b      	ldrh	r3, [r3, #16]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d908      	bls.n	800d0d4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800d0c2:	4b1e      	ldr	r3, [pc, #120]	; (800d13c <TRACE_Send+0xfc>)
 800d0c4:	8a5a      	ldrh	r2, [r3, #18]
 800d0c6:	4b1d      	ldr	r3, [pc, #116]	; (800d13c <TRACE_Send+0xfc>)
 800d0c8:	8a1b      	ldrh	r3, [r3, #16]
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	4b1b      	ldr	r3, [pc, #108]	; (800d13c <TRACE_Send+0xfc>)
 800d0d0:	829a      	strh	r2, [r3, #20]
 800d0d2:	e006      	b.n	800d0e2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d0d4:	4b19      	ldr	r3, [pc, #100]	; (800d13c <TRACE_Send+0xfc>)
 800d0d6:	8a1b      	ldrh	r3, [r3, #16]
 800d0d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	4b17      	ldr	r3, [pc, #92]	; (800d13c <TRACE_Send+0xfc>)
 800d0e0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d0e2:	4b16      	ldr	r3, [pc, #88]	; (800d13c <TRACE_Send+0xfc>)
 800d0e4:	8a1b      	ldrh	r3, [r3, #16]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	4b15      	ldr	r3, [pc, #84]	; (800d140 <TRACE_Send+0x100>)
 800d0ea:	4413      	add	r3, r2
 800d0ec:	61bb      	str	r3, [r7, #24]
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f383 8810 	msr	PRIMASK, r3
}
 800d0f8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800d0fa:	f7f4 fdc3 	bl	8001c84 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d0fe:	4b11      	ldr	r3, [pc, #68]	; (800d144 <TRACE_Send+0x104>)
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	4a0e      	ldr	r2, [pc, #56]	; (800d13c <TRACE_Send+0xfc>)
 800d104:	8a92      	ldrh	r2, [r2, #20]
 800d106:	4611      	mov	r1, r2
 800d108:	69b8      	ldr	r0, [r7, #24]
 800d10a:	4798      	blx	r3
 800d10c:	4603      	mov	r3, r0
 800d10e:	77fb      	strb	r3, [r7, #31]
 800d110:	e00d      	b.n	800d12e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800d112:	f000 f941 	bl	800d398 <TRACE_UnLock>
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f383 8810 	msr	PRIMASK, r3
}
 800d120:	e005      	b.n	800d12e <TRACE_Send+0xee>
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f383 8810 	msr	PRIMASK, r3
}
 800d12c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800d12e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3720      	adds	r7, #32
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20001784 	.word	0x20001784
 800d140:	2000179c 	.word	0x2000179c
 800d144:	080122c0 	.word	0x080122c0

0800d148 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800d150:	2300      	movs	r3, #0
 800d152:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d154:	f3ef 8310 	mrs	r3, PRIMASK
 800d158:	617b      	str	r3, [r7, #20]
  return(result);
 800d15a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d15c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d15e:	b672      	cpsid	i
}
 800d160:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800d162:	4b3c      	ldr	r3, [pc, #240]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d164:	789b      	ldrb	r3, [r3, #2]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d106      	bne.n	800d178 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d16a:	4b3a      	ldr	r3, [pc, #232]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d170:	4b38      	ldr	r3, [pc, #224]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d172:	2200      	movs	r2, #0
 800d174:	821a      	strh	r2, [r3, #16]
 800d176:	e00a      	b.n	800d18e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d178:	4b36      	ldr	r3, [pc, #216]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d17a:	8a1a      	ldrh	r2, [r3, #16]
 800d17c:	4b35      	ldr	r3, [pc, #212]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d17e:	8a9b      	ldrh	r3, [r3, #20]
 800d180:	4413      	add	r3, r2
 800d182:	b29b      	uxth	r3, r3
 800d184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d188:	b29a      	uxth	r2, r3
 800d18a:	4b32      	ldr	r3, [pc, #200]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d18c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800d18e:	4b31      	ldr	r3, [pc, #196]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d190:	8a1a      	ldrh	r2, [r3, #16]
 800d192:	4b30      	ldr	r3, [pc, #192]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d194:	8a5b      	ldrh	r3, [r3, #18]
 800d196:	429a      	cmp	r2, r3
 800d198:	d04d      	beq.n	800d236 <TRACE_TxCpltCallback+0xee>
 800d19a:	4b2e      	ldr	r3, [pc, #184]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d19c:	8adb      	ldrh	r3, [r3, #22]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d149      	bne.n	800d236 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800d1a2:	4b2c      	ldr	r3, [pc, #176]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1a4:	789b      	ldrb	r3, [r3, #2]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d117      	bne.n	800d1da <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800d1aa:	4b2a      	ldr	r3, [pc, #168]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1ac:	881a      	ldrh	r2, [r3, #0]
 800d1ae:	4b29      	ldr	r3, [pc, #164]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1b0:	8a1b      	ldrh	r3, [r3, #16]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	4b27      	ldr	r3, [pc, #156]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1b8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800d1ba:	4b26      	ldr	r3, [pc, #152]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1bc:	2202      	movs	r2, #2
 800d1be:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800d1c0:	4b24      	ldr	r3, [pc, #144]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800d1c6:	4b23      	ldr	r3, [pc, #140]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1c8:	8a9b      	ldrh	r3, [r3, #20]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800d1ce:	4b21      	ldr	r3, [pc, #132]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800d1d4:	4b1f      	ldr	r3, [pc, #124]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800d1da:	4b1e      	ldr	r3, [pc, #120]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1dc:	789b      	ldrb	r3, [r3, #2]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d115      	bne.n	800d20e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d1e2:	4b1c      	ldr	r3, [pc, #112]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1e4:	8a5a      	ldrh	r2, [r3, #18]
 800d1e6:	4b1b      	ldr	r3, [pc, #108]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1e8:	8a1b      	ldrh	r3, [r3, #16]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d908      	bls.n	800d200 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800d1ee:	4b19      	ldr	r3, [pc, #100]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1f0:	8a5a      	ldrh	r2, [r3, #18]
 800d1f2:	4b18      	ldr	r3, [pc, #96]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1f4:	8a1b      	ldrh	r3, [r3, #16]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	4b16      	ldr	r3, [pc, #88]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d1fc:	829a      	strh	r2, [r3, #20]
 800d1fe:	e006      	b.n	800d20e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800d200:	4b14      	ldr	r3, [pc, #80]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d202:	8a1b      	ldrh	r3, [r3, #16]
 800d204:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d208:	b29a      	uxth	r2, r3
 800d20a:	4b12      	ldr	r3, [pc, #72]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d20c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800d20e:	4b11      	ldr	r3, [pc, #68]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d210:	8a1b      	ldrh	r3, [r3, #16]
 800d212:	461a      	mov	r2, r3
 800d214:	4b10      	ldr	r3, [pc, #64]	; (800d258 <TRACE_TxCpltCallback+0x110>)
 800d216:	4413      	add	r3, r2
 800d218:	61fb      	str	r3, [r7, #28]
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f383 8810 	msr	PRIMASK, r3
}
 800d224:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <TRACE_TxCpltCallback+0x114>)
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	4a0a      	ldr	r2, [pc, #40]	; (800d254 <TRACE_TxCpltCallback+0x10c>)
 800d22c:	8a92      	ldrh	r2, [r2, #20]
 800d22e:	4611      	mov	r1, r2
 800d230:	69f8      	ldr	r0, [r7, #28]
 800d232:	4798      	blx	r3
 800d234:	e00a      	b.n	800d24c <TRACE_TxCpltCallback+0x104>
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f383 8810 	msr	PRIMASK, r3
}
 800d240:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800d242:	f7f4 fd27 	bl	8001c94 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800d246:	f000 f8a7 	bl	800d398 <TRACE_UnLock>
  }
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	3720      	adds	r7, #32
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	20001784 	.word	0x20001784
 800d258:	2000179c 	.word	0x2000179c
 800d25c:	080122c0 	.word	0x080122c0

0800d260 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800d260:	b480      	push	{r7}
 800d262:	b087      	sub	sp, #28
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	6039      	str	r1, [r7, #0]
 800d26a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800d26c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d270:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d272:	f3ef 8310 	mrs	r3, PRIMASK
 800d276:	60fb      	str	r3, [r7, #12]
  return(result);
 800d278:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d27a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d27c:	b672      	cpsid	i
}
 800d27e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800d280:	4b35      	ldr	r3, [pc, #212]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d282:	8a5a      	ldrh	r2, [r3, #18]
 800d284:	4b34      	ldr	r3, [pc, #208]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d286:	8a1b      	ldrh	r3, [r3, #16]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d11b      	bne.n	800d2c4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d28c:	4b32      	ldr	r3, [pc, #200]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d28e:	8a5b      	ldrh	r3, [r3, #18]
 800d290:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d294:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800d296:	88fa      	ldrh	r2, [r7, #6]
 800d298:	8afb      	ldrh	r3, [r7, #22]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d33a      	bcc.n	800d314 <TRACE_AllocateBufer+0xb4>
 800d29e:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2a0:	8a1b      	ldrh	r3, [r3, #16]
 800d2a2:	88fa      	ldrh	r2, [r7, #6]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d235      	bcs.n	800d314 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d2a8:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d2ae:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2b0:	8a5a      	ldrh	r2, [r3, #18]
 800d2b2:	4b29      	ldr	r3, [pc, #164]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2b4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800d2b6:	4b28      	ldr	r3, [pc, #160]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2b8:	8a1b      	ldrh	r3, [r3, #16]
 800d2ba:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d2bc:	4b26      	ldr	r3, [pc, #152]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	825a      	strh	r2, [r3, #18]
 800d2c2:	e027      	b.n	800d314 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800d2c4:	4b24      	ldr	r3, [pc, #144]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2c6:	8a5a      	ldrh	r2, [r3, #18]
 800d2c8:	4b23      	ldr	r3, [pc, #140]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2ca:	8a1b      	ldrh	r3, [r3, #16]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d91b      	bls.n	800d308 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800d2d0:	4b21      	ldr	r3, [pc, #132]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2d2:	8a5b      	ldrh	r3, [r3, #18]
 800d2d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d2d8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800d2da:	88fa      	ldrh	r2, [r7, #6]
 800d2dc:	8afb      	ldrh	r3, [r7, #22]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d318      	bcc.n	800d314 <TRACE_AllocateBufer+0xb4>
 800d2e2:	4b1d      	ldr	r3, [pc, #116]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2e4:	8a1b      	ldrh	r3, [r3, #16]
 800d2e6:	88fa      	ldrh	r2, [r7, #6]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d213      	bcs.n	800d314 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800d2ec:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800d2f2:	4b19      	ldr	r3, [pc, #100]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2f4:	8a5a      	ldrh	r2, [r3, #18]
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2f8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800d2fa:	4b17      	ldr	r3, [pc, #92]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d2fc:	8a1b      	ldrh	r3, [r3, #16]
 800d2fe:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800d300:	4b15      	ldr	r3, [pc, #84]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d302:	2200      	movs	r2, #0
 800d304:	825a      	strh	r2, [r3, #18]
 800d306:	e005      	b.n	800d314 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800d308:	4b13      	ldr	r3, [pc, #76]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d30a:	8a1a      	ldrh	r2, [r3, #16]
 800d30c:	4b12      	ldr	r3, [pc, #72]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d30e:	8a5b      	ldrh	r3, [r3, #18]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800d314:	8afa      	ldrh	r2, [r7, #22]
 800d316:	88fb      	ldrh	r3, [r7, #6]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d90f      	bls.n	800d33c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800d31c:	4b0e      	ldr	r3, [pc, #56]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d31e:	8a5a      	ldrh	r2, [r3, #18]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800d324:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d326:	8a5a      	ldrh	r2, [r3, #18]
 800d328:	88fb      	ldrh	r3, [r7, #6]
 800d32a:	4413      	add	r3, r2
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d332:	b29a      	uxth	r2, r3
 800d334:	4b08      	ldr	r3, [pc, #32]	; (800d358 <TRACE_AllocateBufer+0xf8>)
 800d336:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	82bb      	strh	r3, [r7, #20]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	f383 8810 	msr	PRIMASK, r3
}
 800d346:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800d348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	bc80      	pop	{r7}
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	20001784 	.word	0x20001784

0800d35c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d362:	f3ef 8310 	mrs	r3, PRIMASK
 800d366:	607b      	str	r3, [r7, #4]
  return(result);
 800d368:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d36a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d36c:	b672      	cpsid	i
}
 800d36e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800d370:	4b08      	ldr	r3, [pc, #32]	; (800d394 <TRACE_Lock+0x38>)
 800d372:	8adb      	ldrh	r3, [r3, #22]
 800d374:	3301      	adds	r3, #1
 800d376:	b29a      	uxth	r2, r3
 800d378:	4b06      	ldr	r3, [pc, #24]	; (800d394 <TRACE_Lock+0x38>)
 800d37a:	82da      	strh	r2, [r3, #22]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	f383 8810 	msr	PRIMASK, r3
}
 800d386:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bc80      	pop	{r7}
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	20001784 	.word	0x20001784

0800d398 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d39e:	f3ef 8310 	mrs	r3, PRIMASK
 800d3a2:	607b      	str	r3, [r7, #4]
  return(result);
 800d3a4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800d3a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3a8:	b672      	cpsid	i
}
 800d3aa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800d3ac:	4b08      	ldr	r3, [pc, #32]	; (800d3d0 <TRACE_UnLock+0x38>)
 800d3ae:	8adb      	ldrh	r3, [r3, #22]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <TRACE_UnLock+0x38>)
 800d3b6:	82da      	strh	r2, [r3, #22]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f383 8810 	msr	PRIMASK, r3
}
 800d3c2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800d3c4:	bf00      	nop
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bc80      	pop	{r7}
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	20001784 	.word	0x20001784

0800d3d4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800d3d8:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <TRACE_IsLocked+0x1c>)
 800d3da:	8adb      	ldrh	r3, [r3, #22]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bf14      	ite	ne
 800d3e0:	2301      	movne	r3, #1
 800d3e2:	2300      	moveq	r3, #0
 800d3e4:	b2db      	uxtb	r3, r3
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bc80      	pop	{r7}
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	20001784 	.word	0x20001784

0800d3f4 <__errno>:
 800d3f4:	4b01      	ldr	r3, [pc, #4]	; (800d3fc <__errno+0x8>)
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000fc0 	.word	0x20000fc0

0800d400 <__libc_init_array>:
 800d400:	b570      	push	{r4, r5, r6, lr}
 800d402:	4d0d      	ldr	r5, [pc, #52]	; (800d438 <__libc_init_array+0x38>)
 800d404:	4c0d      	ldr	r4, [pc, #52]	; (800d43c <__libc_init_array+0x3c>)
 800d406:	1b64      	subs	r4, r4, r5
 800d408:	10a4      	asrs	r4, r4, #2
 800d40a:	2600      	movs	r6, #0
 800d40c:	42a6      	cmp	r6, r4
 800d40e:	d109      	bne.n	800d424 <__libc_init_array+0x24>
 800d410:	4d0b      	ldr	r5, [pc, #44]	; (800d440 <__libc_init_array+0x40>)
 800d412:	4c0c      	ldr	r4, [pc, #48]	; (800d444 <__libc_init_array+0x44>)
 800d414:	f004 fca4 	bl	8011d60 <_init>
 800d418:	1b64      	subs	r4, r4, r5
 800d41a:	10a4      	asrs	r4, r4, #2
 800d41c:	2600      	movs	r6, #0
 800d41e:	42a6      	cmp	r6, r4
 800d420:	d105      	bne.n	800d42e <__libc_init_array+0x2e>
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	f855 3b04 	ldr.w	r3, [r5], #4
 800d428:	4798      	blx	r3
 800d42a:	3601      	adds	r6, #1
 800d42c:	e7ee      	b.n	800d40c <__libc_init_array+0xc>
 800d42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d432:	4798      	blx	r3
 800d434:	3601      	adds	r6, #1
 800d436:	e7f2      	b.n	800d41e <__libc_init_array+0x1e>
 800d438:	08012914 	.word	0x08012914
 800d43c:	08012914 	.word	0x08012914
 800d440:	08012914 	.word	0x08012914
 800d444:	08012918 	.word	0x08012918

0800d448 <__itoa>:
 800d448:	1e93      	subs	r3, r2, #2
 800d44a:	2b22      	cmp	r3, #34	; 0x22
 800d44c:	b510      	push	{r4, lr}
 800d44e:	460c      	mov	r4, r1
 800d450:	d904      	bls.n	800d45c <__itoa+0x14>
 800d452:	2300      	movs	r3, #0
 800d454:	700b      	strb	r3, [r1, #0]
 800d456:	461c      	mov	r4, r3
 800d458:	4620      	mov	r0, r4
 800d45a:	bd10      	pop	{r4, pc}
 800d45c:	2a0a      	cmp	r2, #10
 800d45e:	d109      	bne.n	800d474 <__itoa+0x2c>
 800d460:	2800      	cmp	r0, #0
 800d462:	da07      	bge.n	800d474 <__itoa+0x2c>
 800d464:	232d      	movs	r3, #45	; 0x2d
 800d466:	700b      	strb	r3, [r1, #0]
 800d468:	4240      	negs	r0, r0
 800d46a:	2101      	movs	r1, #1
 800d46c:	4421      	add	r1, r4
 800d46e:	f001 fd5b 	bl	800ef28 <__utoa>
 800d472:	e7f1      	b.n	800d458 <__itoa+0x10>
 800d474:	2100      	movs	r1, #0
 800d476:	e7f9      	b.n	800d46c <__itoa+0x24>

0800d478 <itoa>:
 800d478:	f7ff bfe6 	b.w	800d448 <__itoa>

0800d47c <memcpy>:
 800d47c:	440a      	add	r2, r1
 800d47e:	4291      	cmp	r1, r2
 800d480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d484:	d100      	bne.n	800d488 <memcpy+0xc>
 800d486:	4770      	bx	lr
 800d488:	b510      	push	{r4, lr}
 800d48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d492:	4291      	cmp	r1, r2
 800d494:	d1f9      	bne.n	800d48a <memcpy+0xe>
 800d496:	bd10      	pop	{r4, pc}

0800d498 <memset>:
 800d498:	4402      	add	r2, r0
 800d49a:	4603      	mov	r3, r0
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d100      	bne.n	800d4a2 <memset+0xa>
 800d4a0:	4770      	bx	lr
 800d4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4a6:	e7f9      	b.n	800d49c <memset+0x4>

0800d4a8 <__cvt>:
 800d4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ac:	b088      	sub	sp, #32
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	461f      	mov	r7, r3
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	bfb8      	it	lt
 800d4b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d4ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d4be:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d4c2:	bfb6      	itet	lt
 800d4c4:	461f      	movlt	r7, r3
 800d4c6:	2300      	movge	r3, #0
 800d4c8:	232d      	movlt	r3, #45	; 0x2d
 800d4ca:	7013      	strb	r3, [r2, #0]
 800d4cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4ce:	f023 0820 	bic.w	r8, r3, #32
 800d4d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4d6:	d005      	beq.n	800d4e4 <__cvt+0x3c>
 800d4d8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4dc:	d100      	bne.n	800d4e0 <__cvt+0x38>
 800d4de:	3501      	adds	r5, #1
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	e000      	b.n	800d4e6 <__cvt+0x3e>
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	aa07      	add	r2, sp, #28
 800d4e8:	9204      	str	r2, [sp, #16]
 800d4ea:	aa06      	add	r2, sp, #24
 800d4ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d4f0:	e9cd 3500 	strd	r3, r5, [sp]
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	463b      	mov	r3, r7
 800d4f8:	f001 fde2 	bl	800f0c0 <_dtoa_r>
 800d4fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d500:	4606      	mov	r6, r0
 800d502:	d102      	bne.n	800d50a <__cvt+0x62>
 800d504:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d506:	07db      	lsls	r3, r3, #31
 800d508:	d522      	bpl.n	800d550 <__cvt+0xa8>
 800d50a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d50e:	eb06 0905 	add.w	r9, r6, r5
 800d512:	d110      	bne.n	800d536 <__cvt+0x8e>
 800d514:	7833      	ldrb	r3, [r6, #0]
 800d516:	2b30      	cmp	r3, #48	; 0x30
 800d518:	d10a      	bne.n	800d530 <__cvt+0x88>
 800d51a:	2200      	movs	r2, #0
 800d51c:	2300      	movs	r3, #0
 800d51e:	4620      	mov	r0, r4
 800d520:	4639      	mov	r1, r7
 800d522:	f7f3 faa9 	bl	8000a78 <__aeabi_dcmpeq>
 800d526:	b918      	cbnz	r0, 800d530 <__cvt+0x88>
 800d528:	f1c5 0501 	rsb	r5, r5, #1
 800d52c:	f8ca 5000 	str.w	r5, [sl]
 800d530:	f8da 3000 	ldr.w	r3, [sl]
 800d534:	4499      	add	r9, r3
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	4620      	mov	r0, r4
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 fa9b 	bl	8000a78 <__aeabi_dcmpeq>
 800d542:	b108      	cbz	r0, 800d548 <__cvt+0xa0>
 800d544:	f8cd 901c 	str.w	r9, [sp, #28]
 800d548:	2230      	movs	r2, #48	; 0x30
 800d54a:	9b07      	ldr	r3, [sp, #28]
 800d54c:	454b      	cmp	r3, r9
 800d54e:	d307      	bcc.n	800d560 <__cvt+0xb8>
 800d550:	9b07      	ldr	r3, [sp, #28]
 800d552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d554:	1b9b      	subs	r3, r3, r6
 800d556:	4630      	mov	r0, r6
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	b008      	add	sp, #32
 800d55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d560:	1c59      	adds	r1, r3, #1
 800d562:	9107      	str	r1, [sp, #28]
 800d564:	701a      	strb	r2, [r3, #0]
 800d566:	e7f0      	b.n	800d54a <__cvt+0xa2>

0800d568 <__exponent>:
 800d568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d56a:	4603      	mov	r3, r0
 800d56c:	2900      	cmp	r1, #0
 800d56e:	bfb8      	it	lt
 800d570:	4249      	neglt	r1, r1
 800d572:	f803 2b02 	strb.w	r2, [r3], #2
 800d576:	bfb4      	ite	lt
 800d578:	222d      	movlt	r2, #45	; 0x2d
 800d57a:	222b      	movge	r2, #43	; 0x2b
 800d57c:	2909      	cmp	r1, #9
 800d57e:	7042      	strb	r2, [r0, #1]
 800d580:	dd2a      	ble.n	800d5d8 <__exponent+0x70>
 800d582:	f10d 0407 	add.w	r4, sp, #7
 800d586:	46a4      	mov	ip, r4
 800d588:	270a      	movs	r7, #10
 800d58a:	46a6      	mov	lr, r4
 800d58c:	460a      	mov	r2, r1
 800d58e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d592:	fb07 1516 	mls	r5, r7, r6, r1
 800d596:	3530      	adds	r5, #48	; 0x30
 800d598:	2a63      	cmp	r2, #99	; 0x63
 800d59a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d59e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	dcf1      	bgt.n	800d58a <__exponent+0x22>
 800d5a6:	3130      	adds	r1, #48	; 0x30
 800d5a8:	f1ae 0502 	sub.w	r5, lr, #2
 800d5ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5b0:	1c44      	adds	r4, r0, #1
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	4561      	cmp	r1, ip
 800d5b6:	d30a      	bcc.n	800d5ce <__exponent+0x66>
 800d5b8:	f10d 0209 	add.w	r2, sp, #9
 800d5bc:	eba2 020e 	sub.w	r2, r2, lr
 800d5c0:	4565      	cmp	r5, ip
 800d5c2:	bf88      	it	hi
 800d5c4:	2200      	movhi	r2, #0
 800d5c6:	4413      	add	r3, r2
 800d5c8:	1a18      	subs	r0, r3, r0
 800d5ca:	b003      	add	sp, #12
 800d5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5d6:	e7ed      	b.n	800d5b4 <__exponent+0x4c>
 800d5d8:	2330      	movs	r3, #48	; 0x30
 800d5da:	3130      	adds	r1, #48	; 0x30
 800d5dc:	7083      	strb	r3, [r0, #2]
 800d5de:	70c1      	strb	r1, [r0, #3]
 800d5e0:	1d03      	adds	r3, r0, #4
 800d5e2:	e7f1      	b.n	800d5c8 <__exponent+0x60>

0800d5e4 <_printf_float>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	b091      	sub	sp, #68	; 0x44
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d5f0:	4616      	mov	r6, r2
 800d5f2:	461f      	mov	r7, r3
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	f002 feb7 	bl	8010368 <_localeconv_r>
 800d5fa:	6803      	ldr	r3, [r0, #0]
 800d5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f2 fdbe 	bl	8000180 <strlen>
 800d604:	2300      	movs	r3, #0
 800d606:	930e      	str	r3, [sp, #56]	; 0x38
 800d608:	f8d8 3000 	ldr.w	r3, [r8]
 800d60c:	900a      	str	r0, [sp, #40]	; 0x28
 800d60e:	3307      	adds	r3, #7
 800d610:	f023 0307 	bic.w	r3, r3, #7
 800d614:	f103 0208 	add.w	r2, r3, #8
 800d618:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d61c:	f8d4 b000 	ldr.w	fp, [r4]
 800d620:	f8c8 2000 	str.w	r2, [r8]
 800d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d628:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d62c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d630:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d634:	930b      	str	r3, [sp, #44]	; 0x2c
 800d636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d638:	4b9c      	ldr	r3, [pc, #624]	; (800d8ac <_printf_float+0x2c8>)
 800d63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d63e:	4640      	mov	r0, r8
 800d640:	f7f3 fa4c 	bl	8000adc <__aeabi_dcmpun>
 800d644:	bb70      	cbnz	r0, 800d6a4 <_printf_float+0xc0>
 800d646:	4b99      	ldr	r3, [pc, #612]	; (800d8ac <_printf_float+0x2c8>)
 800d648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d64a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d64e:	4640      	mov	r0, r8
 800d650:	f7f3 fa26 	bl	8000aa0 <__aeabi_dcmple>
 800d654:	bb30      	cbnz	r0, 800d6a4 <_printf_float+0xc0>
 800d656:	2200      	movs	r2, #0
 800d658:	2300      	movs	r3, #0
 800d65a:	4640      	mov	r0, r8
 800d65c:	4651      	mov	r1, sl
 800d65e:	f7f3 fa15 	bl	8000a8c <__aeabi_dcmplt>
 800d662:	b110      	cbz	r0, 800d66a <_printf_float+0x86>
 800d664:	232d      	movs	r3, #45	; 0x2d
 800d666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d66a:	4b91      	ldr	r3, [pc, #580]	; (800d8b0 <_printf_float+0x2cc>)
 800d66c:	4891      	ldr	r0, [pc, #580]	; (800d8b4 <_printf_float+0x2d0>)
 800d66e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d672:	bf94      	ite	ls
 800d674:	4698      	movls	r8, r3
 800d676:	4680      	movhi	r8, r0
 800d678:	2303      	movs	r3, #3
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	f02b 0304 	bic.w	r3, fp, #4
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	f04f 0a00 	mov.w	sl, #0
 800d686:	9700      	str	r7, [sp, #0]
 800d688:	4633      	mov	r3, r6
 800d68a:	aa0f      	add	r2, sp, #60	; 0x3c
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	f000 f9d2 	bl	800da38 <_printf_common>
 800d694:	3001      	adds	r0, #1
 800d696:	f040 808f 	bne.w	800d7b8 <_printf_float+0x1d4>
 800d69a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d69e:	b011      	add	sp, #68	; 0x44
 800d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	4642      	mov	r2, r8
 800d6a6:	4653      	mov	r3, sl
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4651      	mov	r1, sl
 800d6ac:	f7f3 fa16 	bl	8000adc <__aeabi_dcmpun>
 800d6b0:	b140      	cbz	r0, 800d6c4 <_printf_float+0xe0>
 800d6b2:	f1ba 0f00 	cmp.w	sl, #0
 800d6b6:	bfbc      	itt	lt
 800d6b8:	232d      	movlt	r3, #45	; 0x2d
 800d6ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6be:	487e      	ldr	r0, [pc, #504]	; (800d8b8 <_printf_float+0x2d4>)
 800d6c0:	4b7e      	ldr	r3, [pc, #504]	; (800d8bc <_printf_float+0x2d8>)
 800d6c2:	e7d4      	b.n	800d66e <_printf_float+0x8a>
 800d6c4:	6863      	ldr	r3, [r4, #4]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6cc:	d142      	bne.n	800d754 <_printf_float+0x170>
 800d6ce:	2306      	movs	r3, #6
 800d6d0:	6063      	str	r3, [r4, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	9206      	str	r2, [sp, #24]
 800d6d6:	aa0e      	add	r2, sp, #56	; 0x38
 800d6d8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d6dc:	aa0d      	add	r2, sp, #52	; 0x34
 800d6de:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d6e2:	9203      	str	r2, [sp, #12]
 800d6e4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d6e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	6863      	ldr	r3, [r4, #4]
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	4642      	mov	r2, r8
 800d6f4:	4653      	mov	r3, sl
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6fa:	f7ff fed5 	bl	800d4a8 <__cvt>
 800d6fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d700:	2947      	cmp	r1, #71	; 0x47
 800d702:	4680      	mov	r8, r0
 800d704:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d706:	d108      	bne.n	800d71a <_printf_float+0x136>
 800d708:	1cc8      	adds	r0, r1, #3
 800d70a:	db02      	blt.n	800d712 <_printf_float+0x12e>
 800d70c:	6863      	ldr	r3, [r4, #4]
 800d70e:	4299      	cmp	r1, r3
 800d710:	dd40      	ble.n	800d794 <_printf_float+0x1b0>
 800d712:	f1a9 0902 	sub.w	r9, r9, #2
 800d716:	fa5f f989 	uxtb.w	r9, r9
 800d71a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d71e:	d81f      	bhi.n	800d760 <_printf_float+0x17c>
 800d720:	3901      	subs	r1, #1
 800d722:	464a      	mov	r2, r9
 800d724:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d728:	910d      	str	r1, [sp, #52]	; 0x34
 800d72a:	f7ff ff1d 	bl	800d568 <__exponent>
 800d72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d730:	1813      	adds	r3, r2, r0
 800d732:	2a01      	cmp	r2, #1
 800d734:	4682      	mov	sl, r0
 800d736:	6123      	str	r3, [r4, #16]
 800d738:	dc02      	bgt.n	800d740 <_printf_float+0x15c>
 800d73a:	6822      	ldr	r2, [r4, #0]
 800d73c:	07d2      	lsls	r2, r2, #31
 800d73e:	d501      	bpl.n	800d744 <_printf_float+0x160>
 800d740:	3301      	adds	r3, #1
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d09c      	beq.n	800d686 <_printf_float+0xa2>
 800d74c:	232d      	movs	r3, #45	; 0x2d
 800d74e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d752:	e798      	b.n	800d686 <_printf_float+0xa2>
 800d754:	2947      	cmp	r1, #71	; 0x47
 800d756:	d1bc      	bne.n	800d6d2 <_printf_float+0xee>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1ba      	bne.n	800d6d2 <_printf_float+0xee>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e7b7      	b.n	800d6d0 <_printf_float+0xec>
 800d760:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d764:	d118      	bne.n	800d798 <_printf_float+0x1b4>
 800d766:	2900      	cmp	r1, #0
 800d768:	6863      	ldr	r3, [r4, #4]
 800d76a:	dd0b      	ble.n	800d784 <_printf_float+0x1a0>
 800d76c:	6121      	str	r1, [r4, #16]
 800d76e:	b913      	cbnz	r3, 800d776 <_printf_float+0x192>
 800d770:	6822      	ldr	r2, [r4, #0]
 800d772:	07d0      	lsls	r0, r2, #31
 800d774:	d502      	bpl.n	800d77c <_printf_float+0x198>
 800d776:	3301      	adds	r3, #1
 800d778:	440b      	add	r3, r1
 800d77a:	6123      	str	r3, [r4, #16]
 800d77c:	65a1      	str	r1, [r4, #88]	; 0x58
 800d77e:	f04f 0a00 	mov.w	sl, #0
 800d782:	e7df      	b.n	800d744 <_printf_float+0x160>
 800d784:	b913      	cbnz	r3, 800d78c <_printf_float+0x1a8>
 800d786:	6822      	ldr	r2, [r4, #0]
 800d788:	07d2      	lsls	r2, r2, #31
 800d78a:	d501      	bpl.n	800d790 <_printf_float+0x1ac>
 800d78c:	3302      	adds	r3, #2
 800d78e:	e7f4      	b.n	800d77a <_printf_float+0x196>
 800d790:	2301      	movs	r3, #1
 800d792:	e7f2      	b.n	800d77a <_printf_float+0x196>
 800d794:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d79a:	4299      	cmp	r1, r3
 800d79c:	db05      	blt.n	800d7aa <_printf_float+0x1c6>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	6121      	str	r1, [r4, #16]
 800d7a2:	07d8      	lsls	r0, r3, #31
 800d7a4:	d5ea      	bpl.n	800d77c <_printf_float+0x198>
 800d7a6:	1c4b      	adds	r3, r1, #1
 800d7a8:	e7e7      	b.n	800d77a <_printf_float+0x196>
 800d7aa:	2900      	cmp	r1, #0
 800d7ac:	bfd4      	ite	le
 800d7ae:	f1c1 0202 	rsble	r2, r1, #2
 800d7b2:	2201      	movgt	r2, #1
 800d7b4:	4413      	add	r3, r2
 800d7b6:	e7e0      	b.n	800d77a <_printf_float+0x196>
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	055a      	lsls	r2, r3, #21
 800d7bc:	d407      	bmi.n	800d7ce <_printf_float+0x1ea>
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	4642      	mov	r2, r8
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	47b8      	blx	r7
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d12b      	bne.n	800d824 <_printf_float+0x240>
 800d7cc:	e765      	b.n	800d69a <_printf_float+0xb6>
 800d7ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7d2:	f240 80dc 	bls.w	800d98e <_printf_float+0x3aa>
 800d7d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f7f3 f94b 	bl	8000a78 <__aeabi_dcmpeq>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d033      	beq.n	800d84e <_printf_float+0x26a>
 800d7e6:	4a36      	ldr	r2, [pc, #216]	; (800d8c0 <_printf_float+0x2dc>)
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	4631      	mov	r1, r6
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b8      	blx	r7
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	f43f af52 	beq.w	800d69a <_printf_float+0xb6>
 800d7f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	db02      	blt.n	800d804 <_printf_float+0x220>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	07d8      	lsls	r0, r3, #31
 800d802:	d50f      	bpl.n	800d824 <_printf_float+0x240>
 800d804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d808:	4631      	mov	r1, r6
 800d80a:	4628      	mov	r0, r5
 800d80c:	47b8      	blx	r7
 800d80e:	3001      	adds	r0, #1
 800d810:	f43f af43 	beq.w	800d69a <_printf_float+0xb6>
 800d814:	f04f 0800 	mov.w	r8, #0
 800d818:	f104 091a 	add.w	r9, r4, #26
 800d81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d81e:	3b01      	subs	r3, #1
 800d820:	4543      	cmp	r3, r8
 800d822:	dc09      	bgt.n	800d838 <_printf_float+0x254>
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	079b      	lsls	r3, r3, #30
 800d828:	f100 8101 	bmi.w	800da2e <_printf_float+0x44a>
 800d82c:	68e0      	ldr	r0, [r4, #12]
 800d82e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d830:	4298      	cmp	r0, r3
 800d832:	bfb8      	it	lt
 800d834:	4618      	movlt	r0, r3
 800d836:	e732      	b.n	800d69e <_printf_float+0xba>
 800d838:	2301      	movs	r3, #1
 800d83a:	464a      	mov	r2, r9
 800d83c:	4631      	mov	r1, r6
 800d83e:	4628      	mov	r0, r5
 800d840:	47b8      	blx	r7
 800d842:	3001      	adds	r0, #1
 800d844:	f43f af29 	beq.w	800d69a <_printf_float+0xb6>
 800d848:	f108 0801 	add.w	r8, r8, #1
 800d84c:	e7e6      	b.n	800d81c <_printf_float+0x238>
 800d84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d850:	2b00      	cmp	r3, #0
 800d852:	dc37      	bgt.n	800d8c4 <_printf_float+0x2e0>
 800d854:	4a1a      	ldr	r2, [pc, #104]	; (800d8c0 <_printf_float+0x2dc>)
 800d856:	2301      	movs	r3, #1
 800d858:	4631      	mov	r1, r6
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	f43f af1b 	beq.w	800d69a <_printf_float+0xb6>
 800d864:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d868:	4313      	orrs	r3, r2
 800d86a:	d102      	bne.n	800d872 <_printf_float+0x28e>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	07d9      	lsls	r1, r3, #31
 800d870:	d5d8      	bpl.n	800d824 <_printf_float+0x240>
 800d872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d876:	4631      	mov	r1, r6
 800d878:	4628      	mov	r0, r5
 800d87a:	47b8      	blx	r7
 800d87c:	3001      	adds	r0, #1
 800d87e:	f43f af0c 	beq.w	800d69a <_printf_float+0xb6>
 800d882:	f04f 0900 	mov.w	r9, #0
 800d886:	f104 0a1a 	add.w	sl, r4, #26
 800d88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d88c:	425b      	negs	r3, r3
 800d88e:	454b      	cmp	r3, r9
 800d890:	dc01      	bgt.n	800d896 <_printf_float+0x2b2>
 800d892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d894:	e794      	b.n	800d7c0 <_printf_float+0x1dc>
 800d896:	2301      	movs	r3, #1
 800d898:	4652      	mov	r2, sl
 800d89a:	4631      	mov	r1, r6
 800d89c:	4628      	mov	r0, r5
 800d89e:	47b8      	blx	r7
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	f43f aefa 	beq.w	800d69a <_printf_float+0xb6>
 800d8a6:	f109 0901 	add.w	r9, r9, #1
 800d8aa:	e7ee      	b.n	800d88a <_printf_float+0x2a6>
 800d8ac:	7fefffff 	.word	0x7fefffff
 800d8b0:	08012444 	.word	0x08012444
 800d8b4:	08012448 	.word	0x08012448
 800d8b8:	08012450 	.word	0x08012450
 800d8bc:	0801244c 	.word	0x0801244c
 800d8c0:	08012454 	.word	0x08012454
 800d8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	bfa8      	it	ge
 800d8cc:	461a      	movge	r2, r3
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	4691      	mov	r9, r2
 800d8d2:	dc37      	bgt.n	800d944 <_printf_float+0x360>
 800d8d4:	f04f 0b00 	mov.w	fp, #0
 800d8d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8dc:	f104 021a 	add.w	r2, r4, #26
 800d8e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d8e4:	ebaa 0309 	sub.w	r3, sl, r9
 800d8e8:	455b      	cmp	r3, fp
 800d8ea:	dc33      	bgt.n	800d954 <_printf_float+0x370>
 800d8ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	db3b      	blt.n	800d96c <_printf_float+0x388>
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	07da      	lsls	r2, r3, #31
 800d8f8:	d438      	bmi.n	800d96c <_printf_float+0x388>
 800d8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d8fe:	eba3 020a 	sub.w	r2, r3, sl
 800d902:	eba3 0901 	sub.w	r9, r3, r1
 800d906:	4591      	cmp	r9, r2
 800d908:	bfa8      	it	ge
 800d90a:	4691      	movge	r9, r2
 800d90c:	f1b9 0f00 	cmp.w	r9, #0
 800d910:	dc34      	bgt.n	800d97c <_printf_float+0x398>
 800d912:	f04f 0800 	mov.w	r8, #0
 800d916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d91a:	f104 0a1a 	add.w	sl, r4, #26
 800d91e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d922:	1a9b      	subs	r3, r3, r2
 800d924:	eba3 0309 	sub.w	r3, r3, r9
 800d928:	4543      	cmp	r3, r8
 800d92a:	f77f af7b 	ble.w	800d824 <_printf_float+0x240>
 800d92e:	2301      	movs	r3, #1
 800d930:	4652      	mov	r2, sl
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f aeae 	beq.w	800d69a <_printf_float+0xb6>
 800d93e:	f108 0801 	add.w	r8, r8, #1
 800d942:	e7ec      	b.n	800d91e <_printf_float+0x33a>
 800d944:	4613      	mov	r3, r2
 800d946:	4631      	mov	r1, r6
 800d948:	4642      	mov	r2, r8
 800d94a:	4628      	mov	r0, r5
 800d94c:	47b8      	blx	r7
 800d94e:	3001      	adds	r0, #1
 800d950:	d1c0      	bne.n	800d8d4 <_printf_float+0x2f0>
 800d952:	e6a2      	b.n	800d69a <_printf_float+0xb6>
 800d954:	2301      	movs	r3, #1
 800d956:	4631      	mov	r1, r6
 800d958:	4628      	mov	r0, r5
 800d95a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d95c:	47b8      	blx	r7
 800d95e:	3001      	adds	r0, #1
 800d960:	f43f ae9b 	beq.w	800d69a <_printf_float+0xb6>
 800d964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d966:	f10b 0b01 	add.w	fp, fp, #1
 800d96a:	e7b9      	b.n	800d8e0 <_printf_float+0x2fc>
 800d96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d970:	4631      	mov	r1, r6
 800d972:	4628      	mov	r0, r5
 800d974:	47b8      	blx	r7
 800d976:	3001      	adds	r0, #1
 800d978:	d1bf      	bne.n	800d8fa <_printf_float+0x316>
 800d97a:	e68e      	b.n	800d69a <_printf_float+0xb6>
 800d97c:	464b      	mov	r3, r9
 800d97e:	eb08 020a 	add.w	r2, r8, sl
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	d1c2      	bne.n	800d912 <_printf_float+0x32e>
 800d98c:	e685      	b.n	800d69a <_printf_float+0xb6>
 800d98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d990:	2a01      	cmp	r2, #1
 800d992:	dc01      	bgt.n	800d998 <_printf_float+0x3b4>
 800d994:	07db      	lsls	r3, r3, #31
 800d996:	d537      	bpl.n	800da08 <_printf_float+0x424>
 800d998:	2301      	movs	r3, #1
 800d99a:	4642      	mov	r2, r8
 800d99c:	4631      	mov	r1, r6
 800d99e:	4628      	mov	r0, r5
 800d9a0:	47b8      	blx	r7
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	f43f ae79 	beq.w	800d69a <_printf_float+0xb6>
 800d9a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	47b8      	blx	r7
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	f43f ae71 	beq.w	800d69a <_printf_float+0xb6>
 800d9b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f7f3 f85a 	bl	8000a78 <__aeabi_dcmpeq>
 800d9c4:	b9d8      	cbnz	r0, 800d9fe <_printf_float+0x41a>
 800d9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9c8:	f108 0201 	add.w	r2, r8, #1
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d10e      	bne.n	800d9f6 <_printf_float+0x412>
 800d9d8:	e65f      	b.n	800d69a <_printf_float+0xb6>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	464a      	mov	r2, r9
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	47b8      	blx	r7
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	f43f ae58 	beq.w	800d69a <_printf_float+0xb6>
 800d9ea:	f108 0801 	add.w	r8, r8, #1
 800d9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	4543      	cmp	r3, r8
 800d9f4:	dcf1      	bgt.n	800d9da <_printf_float+0x3f6>
 800d9f6:	4653      	mov	r3, sl
 800d9f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9fc:	e6e1      	b.n	800d7c2 <_printf_float+0x1de>
 800d9fe:	f04f 0800 	mov.w	r8, #0
 800da02:	f104 091a 	add.w	r9, r4, #26
 800da06:	e7f2      	b.n	800d9ee <_printf_float+0x40a>
 800da08:	2301      	movs	r3, #1
 800da0a:	4642      	mov	r2, r8
 800da0c:	e7df      	b.n	800d9ce <_printf_float+0x3ea>
 800da0e:	2301      	movs	r3, #1
 800da10:	464a      	mov	r2, r9
 800da12:	4631      	mov	r1, r6
 800da14:	4628      	mov	r0, r5
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	f43f ae3e 	beq.w	800d69a <_printf_float+0xb6>
 800da1e:	f108 0801 	add.w	r8, r8, #1
 800da22:	68e3      	ldr	r3, [r4, #12]
 800da24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da26:	1a5b      	subs	r3, r3, r1
 800da28:	4543      	cmp	r3, r8
 800da2a:	dcf0      	bgt.n	800da0e <_printf_float+0x42a>
 800da2c:	e6fe      	b.n	800d82c <_printf_float+0x248>
 800da2e:	f04f 0800 	mov.w	r8, #0
 800da32:	f104 0919 	add.w	r9, r4, #25
 800da36:	e7f4      	b.n	800da22 <_printf_float+0x43e>

0800da38 <_printf_common>:
 800da38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da3c:	4616      	mov	r6, r2
 800da3e:	4699      	mov	r9, r3
 800da40:	688a      	ldr	r2, [r1, #8]
 800da42:	690b      	ldr	r3, [r1, #16]
 800da44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da48:	4293      	cmp	r3, r2
 800da4a:	bfb8      	it	lt
 800da4c:	4613      	movlt	r3, r2
 800da4e:	6033      	str	r3, [r6, #0]
 800da50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da54:	4607      	mov	r7, r0
 800da56:	460c      	mov	r4, r1
 800da58:	b10a      	cbz	r2, 800da5e <_printf_common+0x26>
 800da5a:	3301      	adds	r3, #1
 800da5c:	6033      	str	r3, [r6, #0]
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	0699      	lsls	r1, r3, #26
 800da62:	bf42      	ittt	mi
 800da64:	6833      	ldrmi	r3, [r6, #0]
 800da66:	3302      	addmi	r3, #2
 800da68:	6033      	strmi	r3, [r6, #0]
 800da6a:	6825      	ldr	r5, [r4, #0]
 800da6c:	f015 0506 	ands.w	r5, r5, #6
 800da70:	d106      	bne.n	800da80 <_printf_common+0x48>
 800da72:	f104 0a19 	add.w	sl, r4, #25
 800da76:	68e3      	ldr	r3, [r4, #12]
 800da78:	6832      	ldr	r2, [r6, #0]
 800da7a:	1a9b      	subs	r3, r3, r2
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	dc26      	bgt.n	800dace <_printf_common+0x96>
 800da80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da84:	1e13      	subs	r3, r2, #0
 800da86:	6822      	ldr	r2, [r4, #0]
 800da88:	bf18      	it	ne
 800da8a:	2301      	movne	r3, #1
 800da8c:	0692      	lsls	r2, r2, #26
 800da8e:	d42b      	bmi.n	800dae8 <_printf_common+0xb0>
 800da90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da94:	4649      	mov	r1, r9
 800da96:	4638      	mov	r0, r7
 800da98:	47c0      	blx	r8
 800da9a:	3001      	adds	r0, #1
 800da9c:	d01e      	beq.n	800dadc <_printf_common+0xa4>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	68e5      	ldr	r5, [r4, #12]
 800daa2:	6832      	ldr	r2, [r6, #0]
 800daa4:	f003 0306 	and.w	r3, r3, #6
 800daa8:	2b04      	cmp	r3, #4
 800daaa:	bf08      	it	eq
 800daac:	1aad      	subeq	r5, r5, r2
 800daae:	68a3      	ldr	r3, [r4, #8]
 800dab0:	6922      	ldr	r2, [r4, #16]
 800dab2:	bf0c      	ite	eq
 800dab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dab8:	2500      	movne	r5, #0
 800daba:	4293      	cmp	r3, r2
 800dabc:	bfc4      	itt	gt
 800dabe:	1a9b      	subgt	r3, r3, r2
 800dac0:	18ed      	addgt	r5, r5, r3
 800dac2:	2600      	movs	r6, #0
 800dac4:	341a      	adds	r4, #26
 800dac6:	42b5      	cmp	r5, r6
 800dac8:	d11a      	bne.n	800db00 <_printf_common+0xc8>
 800daca:	2000      	movs	r0, #0
 800dacc:	e008      	b.n	800dae0 <_printf_common+0xa8>
 800dace:	2301      	movs	r3, #1
 800dad0:	4652      	mov	r2, sl
 800dad2:	4649      	mov	r1, r9
 800dad4:	4638      	mov	r0, r7
 800dad6:	47c0      	blx	r8
 800dad8:	3001      	adds	r0, #1
 800dada:	d103      	bne.n	800dae4 <_printf_common+0xac>
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae4:	3501      	adds	r5, #1
 800dae6:	e7c6      	b.n	800da76 <_printf_common+0x3e>
 800dae8:	18e1      	adds	r1, r4, r3
 800daea:	1c5a      	adds	r2, r3, #1
 800daec:	2030      	movs	r0, #48	; 0x30
 800daee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800daf2:	4422      	add	r2, r4
 800daf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800daf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dafc:	3302      	adds	r3, #2
 800dafe:	e7c7      	b.n	800da90 <_printf_common+0x58>
 800db00:	2301      	movs	r3, #1
 800db02:	4622      	mov	r2, r4
 800db04:	4649      	mov	r1, r9
 800db06:	4638      	mov	r0, r7
 800db08:	47c0      	blx	r8
 800db0a:	3001      	adds	r0, #1
 800db0c:	d0e6      	beq.n	800dadc <_printf_common+0xa4>
 800db0e:	3601      	adds	r6, #1
 800db10:	e7d9      	b.n	800dac6 <_printf_common+0x8e>
	...

0800db14 <_printf_i>:
 800db14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db18:	7e0f      	ldrb	r7, [r1, #24]
 800db1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db1c:	2f78      	cmp	r7, #120	; 0x78
 800db1e:	4691      	mov	r9, r2
 800db20:	4680      	mov	r8, r0
 800db22:	460c      	mov	r4, r1
 800db24:	469a      	mov	sl, r3
 800db26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db2a:	d807      	bhi.n	800db3c <_printf_i+0x28>
 800db2c:	2f62      	cmp	r7, #98	; 0x62
 800db2e:	d80a      	bhi.n	800db46 <_printf_i+0x32>
 800db30:	2f00      	cmp	r7, #0
 800db32:	f000 80d8 	beq.w	800dce6 <_printf_i+0x1d2>
 800db36:	2f58      	cmp	r7, #88	; 0x58
 800db38:	f000 80a3 	beq.w	800dc82 <_printf_i+0x16e>
 800db3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db44:	e03a      	b.n	800dbbc <_printf_i+0xa8>
 800db46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db4a:	2b15      	cmp	r3, #21
 800db4c:	d8f6      	bhi.n	800db3c <_printf_i+0x28>
 800db4e:	a101      	add	r1, pc, #4	; (adr r1, 800db54 <_printf_i+0x40>)
 800db50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db54:	0800dbad 	.word	0x0800dbad
 800db58:	0800dbc1 	.word	0x0800dbc1
 800db5c:	0800db3d 	.word	0x0800db3d
 800db60:	0800db3d 	.word	0x0800db3d
 800db64:	0800db3d 	.word	0x0800db3d
 800db68:	0800db3d 	.word	0x0800db3d
 800db6c:	0800dbc1 	.word	0x0800dbc1
 800db70:	0800db3d 	.word	0x0800db3d
 800db74:	0800db3d 	.word	0x0800db3d
 800db78:	0800db3d 	.word	0x0800db3d
 800db7c:	0800db3d 	.word	0x0800db3d
 800db80:	0800dccd 	.word	0x0800dccd
 800db84:	0800dbf1 	.word	0x0800dbf1
 800db88:	0800dcaf 	.word	0x0800dcaf
 800db8c:	0800db3d 	.word	0x0800db3d
 800db90:	0800db3d 	.word	0x0800db3d
 800db94:	0800dcef 	.word	0x0800dcef
 800db98:	0800db3d 	.word	0x0800db3d
 800db9c:	0800dbf1 	.word	0x0800dbf1
 800dba0:	0800db3d 	.word	0x0800db3d
 800dba4:	0800db3d 	.word	0x0800db3d
 800dba8:	0800dcb7 	.word	0x0800dcb7
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	1d1a      	adds	r2, r3, #4
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	602a      	str	r2, [r5, #0]
 800dbb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e0a3      	b.n	800dd08 <_printf_i+0x1f4>
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	6829      	ldr	r1, [r5, #0]
 800dbc4:	0606      	lsls	r6, r0, #24
 800dbc6:	f101 0304 	add.w	r3, r1, #4
 800dbca:	d50a      	bpl.n	800dbe2 <_printf_i+0xce>
 800dbcc:	680e      	ldr	r6, [r1, #0]
 800dbce:	602b      	str	r3, [r5, #0]
 800dbd0:	2e00      	cmp	r6, #0
 800dbd2:	da03      	bge.n	800dbdc <_printf_i+0xc8>
 800dbd4:	232d      	movs	r3, #45	; 0x2d
 800dbd6:	4276      	negs	r6, r6
 800dbd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbdc:	485e      	ldr	r0, [pc, #376]	; (800dd58 <_printf_i+0x244>)
 800dbde:	230a      	movs	r3, #10
 800dbe0:	e019      	b.n	800dc16 <_printf_i+0x102>
 800dbe2:	680e      	ldr	r6, [r1, #0]
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbea:	bf18      	it	ne
 800dbec:	b236      	sxthne	r6, r6
 800dbee:	e7ef      	b.n	800dbd0 <_printf_i+0xbc>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	6820      	ldr	r0, [r4, #0]
 800dbf4:	1d19      	adds	r1, r3, #4
 800dbf6:	6029      	str	r1, [r5, #0]
 800dbf8:	0601      	lsls	r1, r0, #24
 800dbfa:	d501      	bpl.n	800dc00 <_printf_i+0xec>
 800dbfc:	681e      	ldr	r6, [r3, #0]
 800dbfe:	e002      	b.n	800dc06 <_printf_i+0xf2>
 800dc00:	0646      	lsls	r6, r0, #25
 800dc02:	d5fb      	bpl.n	800dbfc <_printf_i+0xe8>
 800dc04:	881e      	ldrh	r6, [r3, #0]
 800dc06:	4854      	ldr	r0, [pc, #336]	; (800dd58 <_printf_i+0x244>)
 800dc08:	2f6f      	cmp	r7, #111	; 0x6f
 800dc0a:	bf0c      	ite	eq
 800dc0c:	2308      	moveq	r3, #8
 800dc0e:	230a      	movne	r3, #10
 800dc10:	2100      	movs	r1, #0
 800dc12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc16:	6865      	ldr	r5, [r4, #4]
 800dc18:	60a5      	str	r5, [r4, #8]
 800dc1a:	2d00      	cmp	r5, #0
 800dc1c:	bfa2      	ittt	ge
 800dc1e:	6821      	ldrge	r1, [r4, #0]
 800dc20:	f021 0104 	bicge.w	r1, r1, #4
 800dc24:	6021      	strge	r1, [r4, #0]
 800dc26:	b90e      	cbnz	r6, 800dc2c <_printf_i+0x118>
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	d04d      	beq.n	800dcc8 <_printf_i+0x1b4>
 800dc2c:	4615      	mov	r5, r2
 800dc2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc32:	fb03 6711 	mls	r7, r3, r1, r6
 800dc36:	5dc7      	ldrb	r7, [r0, r7]
 800dc38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc3c:	4637      	mov	r7, r6
 800dc3e:	42bb      	cmp	r3, r7
 800dc40:	460e      	mov	r6, r1
 800dc42:	d9f4      	bls.n	800dc2e <_printf_i+0x11a>
 800dc44:	2b08      	cmp	r3, #8
 800dc46:	d10b      	bne.n	800dc60 <_printf_i+0x14c>
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	07de      	lsls	r6, r3, #31
 800dc4c:	d508      	bpl.n	800dc60 <_printf_i+0x14c>
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	6861      	ldr	r1, [r4, #4]
 800dc52:	4299      	cmp	r1, r3
 800dc54:	bfde      	ittt	le
 800dc56:	2330      	movle	r3, #48	; 0x30
 800dc58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dc60:	1b52      	subs	r2, r2, r5
 800dc62:	6122      	str	r2, [r4, #16]
 800dc64:	f8cd a000 	str.w	sl, [sp]
 800dc68:	464b      	mov	r3, r9
 800dc6a:	aa03      	add	r2, sp, #12
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4640      	mov	r0, r8
 800dc70:	f7ff fee2 	bl	800da38 <_printf_common>
 800dc74:	3001      	adds	r0, #1
 800dc76:	d14c      	bne.n	800dd12 <_printf_i+0x1fe>
 800dc78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc7c:	b004      	add	sp, #16
 800dc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc82:	4835      	ldr	r0, [pc, #212]	; (800dd58 <_printf_i+0x244>)
 800dc84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc88:	6829      	ldr	r1, [r5, #0]
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc90:	6029      	str	r1, [r5, #0]
 800dc92:	061d      	lsls	r5, r3, #24
 800dc94:	d514      	bpl.n	800dcc0 <_printf_i+0x1ac>
 800dc96:	07df      	lsls	r7, r3, #31
 800dc98:	bf44      	itt	mi
 800dc9a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc9e:	6023      	strmi	r3, [r4, #0]
 800dca0:	b91e      	cbnz	r6, 800dcaa <_printf_i+0x196>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	f023 0320 	bic.w	r3, r3, #32
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	2310      	movs	r3, #16
 800dcac:	e7b0      	b.n	800dc10 <_printf_i+0xfc>
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	f043 0320 	orr.w	r3, r3, #32
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	2378      	movs	r3, #120	; 0x78
 800dcb8:	4828      	ldr	r0, [pc, #160]	; (800dd5c <_printf_i+0x248>)
 800dcba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcbe:	e7e3      	b.n	800dc88 <_printf_i+0x174>
 800dcc0:	0659      	lsls	r1, r3, #25
 800dcc2:	bf48      	it	mi
 800dcc4:	b2b6      	uxthmi	r6, r6
 800dcc6:	e7e6      	b.n	800dc96 <_printf_i+0x182>
 800dcc8:	4615      	mov	r5, r2
 800dcca:	e7bb      	b.n	800dc44 <_printf_i+0x130>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	6826      	ldr	r6, [r4, #0]
 800dcd0:	6961      	ldr	r1, [r4, #20]
 800dcd2:	1d18      	adds	r0, r3, #4
 800dcd4:	6028      	str	r0, [r5, #0]
 800dcd6:	0635      	lsls	r5, r6, #24
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	d501      	bpl.n	800dce0 <_printf_i+0x1cc>
 800dcdc:	6019      	str	r1, [r3, #0]
 800dcde:	e002      	b.n	800dce6 <_printf_i+0x1d2>
 800dce0:	0670      	lsls	r0, r6, #25
 800dce2:	d5fb      	bpl.n	800dcdc <_printf_i+0x1c8>
 800dce4:	8019      	strh	r1, [r3, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	6123      	str	r3, [r4, #16]
 800dcea:	4615      	mov	r5, r2
 800dcec:	e7ba      	b.n	800dc64 <_printf_i+0x150>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	1d1a      	adds	r2, r3, #4
 800dcf2:	602a      	str	r2, [r5, #0]
 800dcf4:	681d      	ldr	r5, [r3, #0]
 800dcf6:	6862      	ldr	r2, [r4, #4]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f7f2 fa48 	bl	8000190 <memchr>
 800dd00:	b108      	cbz	r0, 800dd06 <_printf_i+0x1f2>
 800dd02:	1b40      	subs	r0, r0, r5
 800dd04:	6060      	str	r0, [r4, #4]
 800dd06:	6863      	ldr	r3, [r4, #4]
 800dd08:	6123      	str	r3, [r4, #16]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd10:	e7a8      	b.n	800dc64 <_printf_i+0x150>
 800dd12:	6923      	ldr	r3, [r4, #16]
 800dd14:	462a      	mov	r2, r5
 800dd16:	4649      	mov	r1, r9
 800dd18:	4640      	mov	r0, r8
 800dd1a:	47d0      	blx	sl
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d0ab      	beq.n	800dc78 <_printf_i+0x164>
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	079b      	lsls	r3, r3, #30
 800dd24:	d413      	bmi.n	800dd4e <_printf_i+0x23a>
 800dd26:	68e0      	ldr	r0, [r4, #12]
 800dd28:	9b03      	ldr	r3, [sp, #12]
 800dd2a:	4298      	cmp	r0, r3
 800dd2c:	bfb8      	it	lt
 800dd2e:	4618      	movlt	r0, r3
 800dd30:	e7a4      	b.n	800dc7c <_printf_i+0x168>
 800dd32:	2301      	movs	r3, #1
 800dd34:	4632      	mov	r2, r6
 800dd36:	4649      	mov	r1, r9
 800dd38:	4640      	mov	r0, r8
 800dd3a:	47d0      	blx	sl
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	d09b      	beq.n	800dc78 <_printf_i+0x164>
 800dd40:	3501      	adds	r5, #1
 800dd42:	68e3      	ldr	r3, [r4, #12]
 800dd44:	9903      	ldr	r1, [sp, #12]
 800dd46:	1a5b      	subs	r3, r3, r1
 800dd48:	42ab      	cmp	r3, r5
 800dd4a:	dcf2      	bgt.n	800dd32 <_printf_i+0x21e>
 800dd4c:	e7eb      	b.n	800dd26 <_printf_i+0x212>
 800dd4e:	2500      	movs	r5, #0
 800dd50:	f104 0619 	add.w	r6, r4, #25
 800dd54:	e7f5      	b.n	800dd42 <_printf_i+0x22e>
 800dd56:	bf00      	nop
 800dd58:	08012456 	.word	0x08012456
 800dd5c:	08012467 	.word	0x08012467

0800dd60 <_scanf_float>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	b087      	sub	sp, #28
 800dd66:	4617      	mov	r7, r2
 800dd68:	9303      	str	r3, [sp, #12]
 800dd6a:	688b      	ldr	r3, [r1, #8]
 800dd6c:	1e5a      	subs	r2, r3, #1
 800dd6e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dd72:	bf83      	ittte	hi
 800dd74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd78:	195b      	addhi	r3, r3, r5
 800dd7a:	9302      	strhi	r3, [sp, #8]
 800dd7c:	2300      	movls	r3, #0
 800dd7e:	bf86      	itte	hi
 800dd80:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd84:	608b      	strhi	r3, [r1, #8]
 800dd86:	9302      	strls	r3, [sp, #8]
 800dd88:	680b      	ldr	r3, [r1, #0]
 800dd8a:	468b      	mov	fp, r1
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dd92:	f84b 3b1c 	str.w	r3, [fp], #28
 800dd96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd9a:	4680      	mov	r8, r0
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	465e      	mov	r6, fp
 800dda0:	46aa      	mov	sl, r5
 800dda2:	46a9      	mov	r9, r5
 800dda4:	9501      	str	r5, [sp, #4]
 800dda6:	68a2      	ldr	r2, [r4, #8]
 800dda8:	b152      	cbz	r2, 800ddc0 <_scanf_float+0x60>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b4e      	cmp	r3, #78	; 0x4e
 800ddb0:	d864      	bhi.n	800de7c <_scanf_float+0x11c>
 800ddb2:	2b40      	cmp	r3, #64	; 0x40
 800ddb4:	d83c      	bhi.n	800de30 <_scanf_float+0xd0>
 800ddb6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ddba:	b2c8      	uxtb	r0, r1
 800ddbc:	280e      	cmp	r0, #14
 800ddbe:	d93a      	bls.n	800de36 <_scanf_float+0xd6>
 800ddc0:	f1b9 0f00 	cmp.w	r9, #0
 800ddc4:	d003      	beq.n	800ddce <_scanf_float+0x6e>
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ddd2:	f1ba 0f01 	cmp.w	sl, #1
 800ddd6:	f200 8113 	bhi.w	800e000 <_scanf_float+0x2a0>
 800ddda:	455e      	cmp	r6, fp
 800dddc:	f200 8105 	bhi.w	800dfea <_scanf_float+0x28a>
 800dde0:	2501      	movs	r5, #1
 800dde2:	4628      	mov	r0, r5
 800dde4:	b007      	add	sp, #28
 800dde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ddee:	2a0d      	cmp	r2, #13
 800ddf0:	d8e6      	bhi.n	800ddc0 <_scanf_float+0x60>
 800ddf2:	a101      	add	r1, pc, #4	; (adr r1, 800ddf8 <_scanf_float+0x98>)
 800ddf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ddf8:	0800df37 	.word	0x0800df37
 800ddfc:	0800ddc1 	.word	0x0800ddc1
 800de00:	0800ddc1 	.word	0x0800ddc1
 800de04:	0800ddc1 	.word	0x0800ddc1
 800de08:	0800df97 	.word	0x0800df97
 800de0c:	0800df6f 	.word	0x0800df6f
 800de10:	0800ddc1 	.word	0x0800ddc1
 800de14:	0800ddc1 	.word	0x0800ddc1
 800de18:	0800df45 	.word	0x0800df45
 800de1c:	0800ddc1 	.word	0x0800ddc1
 800de20:	0800ddc1 	.word	0x0800ddc1
 800de24:	0800ddc1 	.word	0x0800ddc1
 800de28:	0800ddc1 	.word	0x0800ddc1
 800de2c:	0800defd 	.word	0x0800defd
 800de30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800de34:	e7db      	b.n	800ddee <_scanf_float+0x8e>
 800de36:	290e      	cmp	r1, #14
 800de38:	d8c2      	bhi.n	800ddc0 <_scanf_float+0x60>
 800de3a:	a001      	add	r0, pc, #4	; (adr r0, 800de40 <_scanf_float+0xe0>)
 800de3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800de40:	0800deef 	.word	0x0800deef
 800de44:	0800ddc1 	.word	0x0800ddc1
 800de48:	0800deef 	.word	0x0800deef
 800de4c:	0800df83 	.word	0x0800df83
 800de50:	0800ddc1 	.word	0x0800ddc1
 800de54:	0800de9d 	.word	0x0800de9d
 800de58:	0800ded9 	.word	0x0800ded9
 800de5c:	0800ded9 	.word	0x0800ded9
 800de60:	0800ded9 	.word	0x0800ded9
 800de64:	0800ded9 	.word	0x0800ded9
 800de68:	0800ded9 	.word	0x0800ded9
 800de6c:	0800ded9 	.word	0x0800ded9
 800de70:	0800ded9 	.word	0x0800ded9
 800de74:	0800ded9 	.word	0x0800ded9
 800de78:	0800ded9 	.word	0x0800ded9
 800de7c:	2b6e      	cmp	r3, #110	; 0x6e
 800de7e:	d809      	bhi.n	800de94 <_scanf_float+0x134>
 800de80:	2b60      	cmp	r3, #96	; 0x60
 800de82:	d8b2      	bhi.n	800ddea <_scanf_float+0x8a>
 800de84:	2b54      	cmp	r3, #84	; 0x54
 800de86:	d077      	beq.n	800df78 <_scanf_float+0x218>
 800de88:	2b59      	cmp	r3, #89	; 0x59
 800de8a:	d199      	bne.n	800ddc0 <_scanf_float+0x60>
 800de8c:	2d07      	cmp	r5, #7
 800de8e:	d197      	bne.n	800ddc0 <_scanf_float+0x60>
 800de90:	2508      	movs	r5, #8
 800de92:	e029      	b.n	800dee8 <_scanf_float+0x188>
 800de94:	2b74      	cmp	r3, #116	; 0x74
 800de96:	d06f      	beq.n	800df78 <_scanf_float+0x218>
 800de98:	2b79      	cmp	r3, #121	; 0x79
 800de9a:	e7f6      	b.n	800de8a <_scanf_float+0x12a>
 800de9c:	6821      	ldr	r1, [r4, #0]
 800de9e:	05c8      	lsls	r0, r1, #23
 800dea0:	d51a      	bpl.n	800ded8 <_scanf_float+0x178>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dea8:	6021      	str	r1, [r4, #0]
 800deaa:	f109 0901 	add.w	r9, r9, #1
 800deae:	b11b      	cbz	r3, 800deb8 <_scanf_float+0x158>
 800deb0:	3b01      	subs	r3, #1
 800deb2:	3201      	adds	r2, #1
 800deb4:	9302      	str	r3, [sp, #8]
 800deb6:	60a2      	str	r2, [r4, #8]
 800deb8:	68a3      	ldr	r3, [r4, #8]
 800deba:	3b01      	subs	r3, #1
 800debc:	60a3      	str	r3, [r4, #8]
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	3301      	adds	r3, #1
 800dec2:	6123      	str	r3, [r4, #16]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	607b      	str	r3, [r7, #4]
 800decc:	f340 8084 	ble.w	800dfd8 <_scanf_float+0x278>
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	603b      	str	r3, [r7, #0]
 800ded6:	e766      	b.n	800dda6 <_scanf_float+0x46>
 800ded8:	eb1a 0f05 	cmn.w	sl, r5
 800dedc:	f47f af70 	bne.w	800ddc0 <_scanf_float+0x60>
 800dee0:	6822      	ldr	r2, [r4, #0]
 800dee2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dee6:	6022      	str	r2, [r4, #0]
 800dee8:	f806 3b01 	strb.w	r3, [r6], #1
 800deec:	e7e4      	b.n	800deb8 <_scanf_float+0x158>
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	0610      	lsls	r0, r2, #24
 800def2:	f57f af65 	bpl.w	800ddc0 <_scanf_float+0x60>
 800def6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800defa:	e7f4      	b.n	800dee6 <_scanf_float+0x186>
 800defc:	f1ba 0f00 	cmp.w	sl, #0
 800df00:	d10e      	bne.n	800df20 <_scanf_float+0x1c0>
 800df02:	f1b9 0f00 	cmp.w	r9, #0
 800df06:	d10e      	bne.n	800df26 <_scanf_float+0x1c6>
 800df08:	6822      	ldr	r2, [r4, #0]
 800df0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df12:	d108      	bne.n	800df26 <_scanf_float+0x1c6>
 800df14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df18:	6022      	str	r2, [r4, #0]
 800df1a:	f04f 0a01 	mov.w	sl, #1
 800df1e:	e7e3      	b.n	800dee8 <_scanf_float+0x188>
 800df20:	f1ba 0f02 	cmp.w	sl, #2
 800df24:	d055      	beq.n	800dfd2 <_scanf_float+0x272>
 800df26:	2d01      	cmp	r5, #1
 800df28:	d002      	beq.n	800df30 <_scanf_float+0x1d0>
 800df2a:	2d04      	cmp	r5, #4
 800df2c:	f47f af48 	bne.w	800ddc0 <_scanf_float+0x60>
 800df30:	3501      	adds	r5, #1
 800df32:	b2ed      	uxtb	r5, r5
 800df34:	e7d8      	b.n	800dee8 <_scanf_float+0x188>
 800df36:	f1ba 0f01 	cmp.w	sl, #1
 800df3a:	f47f af41 	bne.w	800ddc0 <_scanf_float+0x60>
 800df3e:	f04f 0a02 	mov.w	sl, #2
 800df42:	e7d1      	b.n	800dee8 <_scanf_float+0x188>
 800df44:	b97d      	cbnz	r5, 800df66 <_scanf_float+0x206>
 800df46:	f1b9 0f00 	cmp.w	r9, #0
 800df4a:	f47f af3c 	bne.w	800ddc6 <_scanf_float+0x66>
 800df4e:	6822      	ldr	r2, [r4, #0]
 800df50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df58:	f47f af39 	bne.w	800ddce <_scanf_float+0x6e>
 800df5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df60:	6022      	str	r2, [r4, #0]
 800df62:	2501      	movs	r5, #1
 800df64:	e7c0      	b.n	800dee8 <_scanf_float+0x188>
 800df66:	2d03      	cmp	r5, #3
 800df68:	d0e2      	beq.n	800df30 <_scanf_float+0x1d0>
 800df6a:	2d05      	cmp	r5, #5
 800df6c:	e7de      	b.n	800df2c <_scanf_float+0x1cc>
 800df6e:	2d02      	cmp	r5, #2
 800df70:	f47f af26 	bne.w	800ddc0 <_scanf_float+0x60>
 800df74:	2503      	movs	r5, #3
 800df76:	e7b7      	b.n	800dee8 <_scanf_float+0x188>
 800df78:	2d06      	cmp	r5, #6
 800df7a:	f47f af21 	bne.w	800ddc0 <_scanf_float+0x60>
 800df7e:	2507      	movs	r5, #7
 800df80:	e7b2      	b.n	800dee8 <_scanf_float+0x188>
 800df82:	6822      	ldr	r2, [r4, #0]
 800df84:	0591      	lsls	r1, r2, #22
 800df86:	f57f af1b 	bpl.w	800ddc0 <_scanf_float+0x60>
 800df8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800df8e:	6022      	str	r2, [r4, #0]
 800df90:	f8cd 9004 	str.w	r9, [sp, #4]
 800df94:	e7a8      	b.n	800dee8 <_scanf_float+0x188>
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800df9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dfa0:	d006      	beq.n	800dfb0 <_scanf_float+0x250>
 800dfa2:	0550      	lsls	r0, r2, #21
 800dfa4:	f57f af0c 	bpl.w	800ddc0 <_scanf_float+0x60>
 800dfa8:	f1b9 0f00 	cmp.w	r9, #0
 800dfac:	f43f af0f 	beq.w	800ddce <_scanf_float+0x6e>
 800dfb0:	0591      	lsls	r1, r2, #22
 800dfb2:	bf58      	it	pl
 800dfb4:	9901      	ldrpl	r1, [sp, #4]
 800dfb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfba:	bf58      	it	pl
 800dfbc:	eba9 0101 	subpl.w	r1, r9, r1
 800dfc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dfc4:	bf58      	it	pl
 800dfc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dfca:	6022      	str	r2, [r4, #0]
 800dfcc:	f04f 0900 	mov.w	r9, #0
 800dfd0:	e78a      	b.n	800dee8 <_scanf_float+0x188>
 800dfd2:	f04f 0a03 	mov.w	sl, #3
 800dfd6:	e787      	b.n	800dee8 <_scanf_float+0x188>
 800dfd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4640      	mov	r0, r8
 800dfe0:	4798      	blx	r3
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	f43f aedf 	beq.w	800dda6 <_scanf_float+0x46>
 800dfe8:	e6ea      	b.n	800ddc0 <_scanf_float+0x60>
 800dfea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dff2:	463a      	mov	r2, r7
 800dff4:	4640      	mov	r0, r8
 800dff6:	4798      	blx	r3
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	3b01      	subs	r3, #1
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	e6ec      	b.n	800ddda <_scanf_float+0x7a>
 800e000:	1e6b      	subs	r3, r5, #1
 800e002:	2b06      	cmp	r3, #6
 800e004:	d825      	bhi.n	800e052 <_scanf_float+0x2f2>
 800e006:	2d02      	cmp	r5, #2
 800e008:	d836      	bhi.n	800e078 <_scanf_float+0x318>
 800e00a:	455e      	cmp	r6, fp
 800e00c:	f67f aee8 	bls.w	800dde0 <_scanf_float+0x80>
 800e010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e014:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e018:	463a      	mov	r2, r7
 800e01a:	4640      	mov	r0, r8
 800e01c:	4798      	blx	r3
 800e01e:	6923      	ldr	r3, [r4, #16]
 800e020:	3b01      	subs	r3, #1
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	e7f1      	b.n	800e00a <_scanf_float+0x2aa>
 800e026:	9802      	ldr	r0, [sp, #8]
 800e028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e02c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e030:	9002      	str	r0, [sp, #8]
 800e032:	463a      	mov	r2, r7
 800e034:	4640      	mov	r0, r8
 800e036:	4798      	blx	r3
 800e038:	6923      	ldr	r3, [r4, #16]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	6123      	str	r3, [r4, #16]
 800e03e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e042:	fa5f fa8a 	uxtb.w	sl, sl
 800e046:	f1ba 0f02 	cmp.w	sl, #2
 800e04a:	d1ec      	bne.n	800e026 <_scanf_float+0x2c6>
 800e04c:	3d03      	subs	r5, #3
 800e04e:	b2ed      	uxtb	r5, r5
 800e050:	1b76      	subs	r6, r6, r5
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	05da      	lsls	r2, r3, #23
 800e056:	d52f      	bpl.n	800e0b8 <_scanf_float+0x358>
 800e058:	055b      	lsls	r3, r3, #21
 800e05a:	d510      	bpl.n	800e07e <_scanf_float+0x31e>
 800e05c:	455e      	cmp	r6, fp
 800e05e:	f67f aebf 	bls.w	800dde0 <_scanf_float+0x80>
 800e062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e06a:	463a      	mov	r2, r7
 800e06c:	4640      	mov	r0, r8
 800e06e:	4798      	blx	r3
 800e070:	6923      	ldr	r3, [r4, #16]
 800e072:	3b01      	subs	r3, #1
 800e074:	6123      	str	r3, [r4, #16]
 800e076:	e7f1      	b.n	800e05c <_scanf_float+0x2fc>
 800e078:	46aa      	mov	sl, r5
 800e07a:	9602      	str	r6, [sp, #8]
 800e07c:	e7df      	b.n	800e03e <_scanf_float+0x2de>
 800e07e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	2965      	cmp	r1, #101	; 0x65
 800e086:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e08a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e08e:	6123      	str	r3, [r4, #16]
 800e090:	d00c      	beq.n	800e0ac <_scanf_float+0x34c>
 800e092:	2945      	cmp	r1, #69	; 0x45
 800e094:	d00a      	beq.n	800e0ac <_scanf_float+0x34c>
 800e096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e09a:	463a      	mov	r2, r7
 800e09c:	4640      	mov	r0, r8
 800e09e:	4798      	blx	r3
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	1eb5      	subs	r5, r6, #2
 800e0aa:	6123      	str	r3, [r4, #16]
 800e0ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0b0:	463a      	mov	r2, r7
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	4798      	blx	r3
 800e0b6:	462e      	mov	r6, r5
 800e0b8:	6825      	ldr	r5, [r4, #0]
 800e0ba:	f015 0510 	ands.w	r5, r5, #16
 800e0be:	d155      	bne.n	800e16c <_scanf_float+0x40c>
 800e0c0:	7035      	strb	r5, [r6, #0]
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e0c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0cc:	d11b      	bne.n	800e106 <_scanf_float+0x3a6>
 800e0ce:	9b01      	ldr	r3, [sp, #4]
 800e0d0:	454b      	cmp	r3, r9
 800e0d2:	eba3 0209 	sub.w	r2, r3, r9
 800e0d6:	d123      	bne.n	800e120 <_scanf_float+0x3c0>
 800e0d8:	2200      	movs	r2, #0
 800e0da:	4659      	mov	r1, fp
 800e0dc:	4640      	mov	r0, r8
 800e0de:	f000 fe9f 	bl	800ee20 <_strtod_r>
 800e0e2:	6822      	ldr	r2, [r4, #0]
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	f012 0f02 	tst.w	r2, #2
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	460f      	mov	r7, r1
 800e0f0:	d021      	beq.n	800e136 <_scanf_float+0x3d6>
 800e0f2:	1d1a      	adds	r2, r3, #4
 800e0f4:	9903      	ldr	r1, [sp, #12]
 800e0f6:	600a      	str	r2, [r1, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	e9c3 6700 	strd	r6, r7, [r3]
 800e0fe:	68e3      	ldr	r3, [r4, #12]
 800e100:	3301      	adds	r3, #1
 800e102:	60e3      	str	r3, [r4, #12]
 800e104:	e66d      	b.n	800dde2 <_scanf_float+0x82>
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0e5      	beq.n	800e0d8 <_scanf_float+0x378>
 800e10c:	9905      	ldr	r1, [sp, #20]
 800e10e:	230a      	movs	r3, #10
 800e110:	462a      	mov	r2, r5
 800e112:	3101      	adds	r1, #1
 800e114:	4640      	mov	r0, r8
 800e116:	f000 ff05 	bl	800ef24 <_strtol_r>
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	9e05      	ldr	r6, [sp, #20]
 800e11e:	1ac2      	subs	r2, r0, r3
 800e120:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e124:	429e      	cmp	r6, r3
 800e126:	bf28      	it	cs
 800e128:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e12c:	4910      	ldr	r1, [pc, #64]	; (800e170 <_scanf_float+0x410>)
 800e12e:	4630      	mov	r0, r6
 800e130:	f000 f826 	bl	800e180 <siprintf>
 800e134:	e7d0      	b.n	800e0d8 <_scanf_float+0x378>
 800e136:	f012 0f04 	tst.w	r2, #4
 800e13a:	f103 0204 	add.w	r2, r3, #4
 800e13e:	d1d9      	bne.n	800e0f4 <_scanf_float+0x394>
 800e140:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e144:	f8cc 2000 	str.w	r2, [ip]
 800e148:	f8d3 8000 	ldr.w	r8, [r3]
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	f7f2 fcc4 	bl	8000adc <__aeabi_dcmpun>
 800e154:	b128      	cbz	r0, 800e162 <_scanf_float+0x402>
 800e156:	4807      	ldr	r0, [pc, #28]	; (800e174 <_scanf_float+0x414>)
 800e158:	f000 f80e 	bl	800e178 <nanf>
 800e15c:	f8c8 0000 	str.w	r0, [r8]
 800e160:	e7cd      	b.n	800e0fe <_scanf_float+0x39e>
 800e162:	4630      	mov	r0, r6
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 fd17 	bl	8000b98 <__aeabi_d2f>
 800e16a:	e7f7      	b.n	800e15c <_scanf_float+0x3fc>
 800e16c:	2500      	movs	r5, #0
 800e16e:	e638      	b.n	800dde2 <_scanf_float+0x82>
 800e170:	08012478 	.word	0x08012478
 800e174:	080128a8 	.word	0x080128a8

0800e178 <nanf>:
 800e178:	4800      	ldr	r0, [pc, #0]	; (800e17c <nanf+0x4>)
 800e17a:	4770      	bx	lr
 800e17c:	7fc00000 	.word	0x7fc00000

0800e180 <siprintf>:
 800e180:	b40e      	push	{r1, r2, r3}
 800e182:	b500      	push	{lr}
 800e184:	b09c      	sub	sp, #112	; 0x70
 800e186:	ab1d      	add	r3, sp, #116	; 0x74
 800e188:	9002      	str	r0, [sp, #8]
 800e18a:	9006      	str	r0, [sp, #24]
 800e18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e190:	4809      	ldr	r0, [pc, #36]	; (800e1b8 <siprintf+0x38>)
 800e192:	9107      	str	r1, [sp, #28]
 800e194:	9104      	str	r1, [sp, #16]
 800e196:	4909      	ldr	r1, [pc, #36]	; (800e1bc <siprintf+0x3c>)
 800e198:	f853 2b04 	ldr.w	r2, [r3], #4
 800e19c:	9105      	str	r1, [sp, #20]
 800e19e:	6800      	ldr	r0, [r0, #0]
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	a902      	add	r1, sp, #8
 800e1a4:	f002 ff00 	bl	8010fa8 <_svfiprintf_r>
 800e1a8:	9b02      	ldr	r3, [sp, #8]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	701a      	strb	r2, [r3, #0]
 800e1ae:	b01c      	add	sp, #112	; 0x70
 800e1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b4:	b003      	add	sp, #12
 800e1b6:	4770      	bx	lr
 800e1b8:	20000fc0 	.word	0x20000fc0
 800e1bc:	ffff0208 	.word	0xffff0208

0800e1c0 <strncmp>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	b172      	cbz	r2, 800e1e4 <strncmp+0x24>
 800e1c6:	3901      	subs	r1, #1
 800e1c8:	1884      	adds	r4, r0, r2
 800e1ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1d2:	4290      	cmp	r0, r2
 800e1d4:	d101      	bne.n	800e1da <strncmp+0x1a>
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	d101      	bne.n	800e1de <strncmp+0x1e>
 800e1da:	1a80      	subs	r0, r0, r2
 800e1dc:	bd10      	pop	{r4, pc}
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d1f3      	bne.n	800e1ca <strncmp+0xa>
 800e1e2:	e7fa      	b.n	800e1da <strncmp+0x1a>
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	e7f9      	b.n	800e1dc <strncmp+0x1c>

0800e1e8 <strncpy>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	3901      	subs	r1, #1
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	b132      	cbz	r2, 800e1fe <strncpy+0x16>
 800e1f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1f4:	f803 4b01 	strb.w	r4, [r3], #1
 800e1f8:	3a01      	subs	r2, #1
 800e1fa:	2c00      	cmp	r4, #0
 800e1fc:	d1f7      	bne.n	800e1ee <strncpy+0x6>
 800e1fe:	441a      	add	r2, r3
 800e200:	2100      	movs	r1, #0
 800e202:	4293      	cmp	r3, r2
 800e204:	d100      	bne.n	800e208 <strncpy+0x20>
 800e206:	bd10      	pop	{r4, pc}
 800e208:	f803 1b01 	strb.w	r1, [r3], #1
 800e20c:	e7f9      	b.n	800e202 <strncpy+0x1a>

0800e20e <sulp>:
 800e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e212:	460f      	mov	r7, r1
 800e214:	4690      	mov	r8, r2
 800e216:	f002 fc31 	bl	8010a7c <__ulp>
 800e21a:	4604      	mov	r4, r0
 800e21c:	460d      	mov	r5, r1
 800e21e:	f1b8 0f00 	cmp.w	r8, #0
 800e222:	d011      	beq.n	800e248 <sulp+0x3a>
 800e224:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e228:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	dd0b      	ble.n	800e248 <sulp+0x3a>
 800e230:	051b      	lsls	r3, r3, #20
 800e232:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e236:	2400      	movs	r4, #0
 800e238:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e23c:	4622      	mov	r2, r4
 800e23e:	462b      	mov	r3, r5
 800e240:	f7f2 f9b2 	bl	80005a8 <__aeabi_dmul>
 800e244:	4604      	mov	r4, r0
 800e246:	460d      	mov	r5, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e250 <_strtod_l>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	b09f      	sub	sp, #124	; 0x7c
 800e256:	469b      	mov	fp, r3
 800e258:	2300      	movs	r3, #0
 800e25a:	931a      	str	r3, [sp, #104]	; 0x68
 800e25c:	4b9e      	ldr	r3, [pc, #632]	; (800e4d8 <_strtod_l+0x288>)
 800e25e:	9215      	str	r2, [sp, #84]	; 0x54
 800e260:	681f      	ldr	r7, [r3, #0]
 800e262:	4682      	mov	sl, r0
 800e264:	4638      	mov	r0, r7
 800e266:	460e      	mov	r6, r1
 800e268:	f7f1 ff8a 	bl	8000180 <strlen>
 800e26c:	f04f 0800 	mov.w	r8, #0
 800e270:	4604      	mov	r4, r0
 800e272:	f04f 0900 	mov.w	r9, #0
 800e276:	9619      	str	r6, [sp, #100]	; 0x64
 800e278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e27a:	781a      	ldrb	r2, [r3, #0]
 800e27c:	2a2b      	cmp	r2, #43	; 0x2b
 800e27e:	d04c      	beq.n	800e31a <_strtod_l+0xca>
 800e280:	d83a      	bhi.n	800e2f8 <_strtod_l+0xa8>
 800e282:	2a0d      	cmp	r2, #13
 800e284:	d833      	bhi.n	800e2ee <_strtod_l+0x9e>
 800e286:	2a08      	cmp	r2, #8
 800e288:	d833      	bhi.n	800e2f2 <_strtod_l+0xa2>
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d03d      	beq.n	800e30a <_strtod_l+0xba>
 800e28e:	2300      	movs	r3, #0
 800e290:	930a      	str	r3, [sp, #40]	; 0x28
 800e292:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e294:	782b      	ldrb	r3, [r5, #0]
 800e296:	2b30      	cmp	r3, #48	; 0x30
 800e298:	f040 80aa 	bne.w	800e3f0 <_strtod_l+0x1a0>
 800e29c:	786b      	ldrb	r3, [r5, #1]
 800e29e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2a2:	2b58      	cmp	r3, #88	; 0x58
 800e2a4:	d166      	bne.n	800e374 <_strtod_l+0x124>
 800e2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a8:	9301      	str	r3, [sp, #4]
 800e2aa:	ab1a      	add	r3, sp, #104	; 0x68
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4a8b      	ldr	r2, [pc, #556]	; (800e4dc <_strtod_l+0x28c>)
 800e2b0:	f8cd b008 	str.w	fp, [sp, #8]
 800e2b4:	ab1b      	add	r3, sp, #108	; 0x6c
 800e2b6:	a919      	add	r1, sp, #100	; 0x64
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	f001 fd57 	bl	800fd6c <__gethex>
 800e2be:	f010 0607 	ands.w	r6, r0, #7
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	d005      	beq.n	800e2d2 <_strtod_l+0x82>
 800e2c6:	2e06      	cmp	r6, #6
 800e2c8:	d129      	bne.n	800e31e <_strtod_l+0xce>
 800e2ca:	3501      	adds	r5, #1
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	9519      	str	r5, [sp, #100]	; 0x64
 800e2d0:	930a      	str	r3, [sp, #40]	; 0x28
 800e2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f040 858a 	bne.w	800edee <_strtod_l+0xb9e>
 800e2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2dc:	b1d3      	cbz	r3, 800e314 <_strtod_l+0xc4>
 800e2de:	4642      	mov	r2, r8
 800e2e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e2e4:	4610      	mov	r0, r2
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	b01f      	add	sp, #124	; 0x7c
 800e2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ee:	2a20      	cmp	r2, #32
 800e2f0:	d1cd      	bne.n	800e28e <_strtod_l+0x3e>
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	9319      	str	r3, [sp, #100]	; 0x64
 800e2f6:	e7bf      	b.n	800e278 <_strtod_l+0x28>
 800e2f8:	2a2d      	cmp	r2, #45	; 0x2d
 800e2fa:	d1c8      	bne.n	800e28e <_strtod_l+0x3e>
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	920a      	str	r2, [sp, #40]	; 0x28
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	9219      	str	r2, [sp, #100]	; 0x64
 800e304:	785b      	ldrb	r3, [r3, #1]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1c3      	bne.n	800e292 <_strtod_l+0x42>
 800e30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e30c:	9619      	str	r6, [sp, #100]	; 0x64
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f040 856b 	bne.w	800edea <_strtod_l+0xb9a>
 800e314:	4642      	mov	r2, r8
 800e316:	464b      	mov	r3, r9
 800e318:	e7e4      	b.n	800e2e4 <_strtod_l+0x94>
 800e31a:	2200      	movs	r2, #0
 800e31c:	e7ef      	b.n	800e2fe <_strtod_l+0xae>
 800e31e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e320:	b13a      	cbz	r2, 800e332 <_strtod_l+0xe2>
 800e322:	2135      	movs	r1, #53	; 0x35
 800e324:	a81c      	add	r0, sp, #112	; 0x70
 800e326:	f002 fcad 	bl	8010c84 <__copybits>
 800e32a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e32c:	4650      	mov	r0, sl
 800e32e:	f002 f879 	bl	8010424 <_Bfree>
 800e332:	3e01      	subs	r6, #1
 800e334:	2e04      	cmp	r6, #4
 800e336:	d806      	bhi.n	800e346 <_strtod_l+0xf6>
 800e338:	e8df f006 	tbb	[pc, r6]
 800e33c:	1714030a 	.word	0x1714030a
 800e340:	0a          	.byte	0x0a
 800e341:	00          	.byte	0x00
 800e342:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e346:	0721      	lsls	r1, r4, #28
 800e348:	d5c3      	bpl.n	800e2d2 <_strtod_l+0x82>
 800e34a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e34e:	e7c0      	b.n	800e2d2 <_strtod_l+0x82>
 800e350:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800e354:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e356:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e35a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e35e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e362:	e7f0      	b.n	800e346 <_strtod_l+0xf6>
 800e364:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e4e0 <_strtod_l+0x290>
 800e368:	e7ed      	b.n	800e346 <_strtod_l+0xf6>
 800e36a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e36e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e372:	e7e8      	b.n	800e346 <_strtod_l+0xf6>
 800e374:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	9219      	str	r2, [sp, #100]	; 0x64
 800e37a:	785b      	ldrb	r3, [r3, #1]
 800e37c:	2b30      	cmp	r3, #48	; 0x30
 800e37e:	d0f9      	beq.n	800e374 <_strtod_l+0x124>
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0a6      	beq.n	800e2d2 <_strtod_l+0x82>
 800e384:	2301      	movs	r3, #1
 800e386:	9307      	str	r3, [sp, #28]
 800e388:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e38a:	9308      	str	r3, [sp, #32]
 800e38c:	2300      	movs	r3, #0
 800e38e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e392:	469b      	mov	fp, r3
 800e394:	220a      	movs	r2, #10
 800e396:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e398:	7805      	ldrb	r5, [r0, #0]
 800e39a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e39e:	b2d9      	uxtb	r1, r3
 800e3a0:	2909      	cmp	r1, #9
 800e3a2:	d927      	bls.n	800e3f4 <_strtod_l+0x1a4>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	f7ff ff0a 	bl	800e1c0 <strncmp>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d033      	beq.n	800e418 <_strtod_l+0x1c8>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	462a      	mov	r2, r5
 800e3b4:	465c      	mov	r4, fp
 800e3b6:	9004      	str	r0, [sp, #16]
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2a65      	cmp	r2, #101	; 0x65
 800e3bc:	d001      	beq.n	800e3c2 <_strtod_l+0x172>
 800e3be:	2a45      	cmp	r2, #69	; 0x45
 800e3c0:	d114      	bne.n	800e3ec <_strtod_l+0x19c>
 800e3c2:	b91c      	cbnz	r4, 800e3cc <_strtod_l+0x17c>
 800e3c4:	9a07      	ldr	r2, [sp, #28]
 800e3c6:	4302      	orrs	r2, r0
 800e3c8:	d09f      	beq.n	800e30a <_strtod_l+0xba>
 800e3ca:	2400      	movs	r4, #0
 800e3cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e3ce:	1c72      	adds	r2, r6, #1
 800e3d0:	9219      	str	r2, [sp, #100]	; 0x64
 800e3d2:	7872      	ldrb	r2, [r6, #1]
 800e3d4:	2a2b      	cmp	r2, #43	; 0x2b
 800e3d6:	d079      	beq.n	800e4cc <_strtod_l+0x27c>
 800e3d8:	2a2d      	cmp	r2, #45	; 0x2d
 800e3da:	f000 8083 	beq.w	800e4e4 <_strtod_l+0x294>
 800e3de:	2700      	movs	r7, #0
 800e3e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e3e4:	2909      	cmp	r1, #9
 800e3e6:	f240 8083 	bls.w	800e4f0 <_strtod_l+0x2a0>
 800e3ea:	9619      	str	r6, [sp, #100]	; 0x64
 800e3ec:	2500      	movs	r5, #0
 800e3ee:	e09f      	b.n	800e530 <_strtod_l+0x2e0>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e7c8      	b.n	800e386 <_strtod_l+0x136>
 800e3f4:	f1bb 0f08 	cmp.w	fp, #8
 800e3f8:	bfd5      	itete	le
 800e3fa:	9906      	ldrle	r1, [sp, #24]
 800e3fc:	9905      	ldrgt	r1, [sp, #20]
 800e3fe:	fb02 3301 	mlale	r3, r2, r1, r3
 800e402:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e406:	f100 0001 	add.w	r0, r0, #1
 800e40a:	bfd4      	ite	le
 800e40c:	9306      	strle	r3, [sp, #24]
 800e40e:	9305      	strgt	r3, [sp, #20]
 800e410:	f10b 0b01 	add.w	fp, fp, #1
 800e414:	9019      	str	r0, [sp, #100]	; 0x64
 800e416:	e7be      	b.n	800e396 <_strtod_l+0x146>
 800e418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e41a:	191a      	adds	r2, r3, r4
 800e41c:	9219      	str	r2, [sp, #100]	; 0x64
 800e41e:	5d1a      	ldrb	r2, [r3, r4]
 800e420:	f1bb 0f00 	cmp.w	fp, #0
 800e424:	d036      	beq.n	800e494 <_strtod_l+0x244>
 800e426:	9004      	str	r0, [sp, #16]
 800e428:	465c      	mov	r4, fp
 800e42a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e42e:	2b09      	cmp	r3, #9
 800e430:	d912      	bls.n	800e458 <_strtod_l+0x208>
 800e432:	2301      	movs	r3, #1
 800e434:	e7c1      	b.n	800e3ba <_strtod_l+0x16a>
 800e436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	9219      	str	r2, [sp, #100]	; 0x64
 800e43c:	785a      	ldrb	r2, [r3, #1]
 800e43e:	3001      	adds	r0, #1
 800e440:	2a30      	cmp	r2, #48	; 0x30
 800e442:	d0f8      	beq.n	800e436 <_strtod_l+0x1e6>
 800e444:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e448:	2b08      	cmp	r3, #8
 800e44a:	f200 84d5 	bhi.w	800edf8 <_strtod_l+0xba8>
 800e44e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e450:	9004      	str	r0, [sp, #16]
 800e452:	2000      	movs	r0, #0
 800e454:	9308      	str	r3, [sp, #32]
 800e456:	4604      	mov	r4, r0
 800e458:	3a30      	subs	r2, #48	; 0x30
 800e45a:	f100 0301 	add.w	r3, r0, #1
 800e45e:	d013      	beq.n	800e488 <_strtod_l+0x238>
 800e460:	9904      	ldr	r1, [sp, #16]
 800e462:	4419      	add	r1, r3
 800e464:	9104      	str	r1, [sp, #16]
 800e466:	4623      	mov	r3, r4
 800e468:	1905      	adds	r5, r0, r4
 800e46a:	210a      	movs	r1, #10
 800e46c:	42ab      	cmp	r3, r5
 800e46e:	d113      	bne.n	800e498 <_strtod_l+0x248>
 800e470:	1823      	adds	r3, r4, r0
 800e472:	2b08      	cmp	r3, #8
 800e474:	f104 0401 	add.w	r4, r4, #1
 800e478:	4404      	add	r4, r0
 800e47a:	dc1b      	bgt.n	800e4b4 <_strtod_l+0x264>
 800e47c:	9906      	ldr	r1, [sp, #24]
 800e47e:	230a      	movs	r3, #10
 800e480:	fb03 2301 	mla	r3, r3, r1, r2
 800e484:	9306      	str	r3, [sp, #24]
 800e486:	2300      	movs	r3, #0
 800e488:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e48a:	1c51      	adds	r1, r2, #1
 800e48c:	9119      	str	r1, [sp, #100]	; 0x64
 800e48e:	7852      	ldrb	r2, [r2, #1]
 800e490:	4618      	mov	r0, r3
 800e492:	e7ca      	b.n	800e42a <_strtod_l+0x1da>
 800e494:	4658      	mov	r0, fp
 800e496:	e7d3      	b.n	800e440 <_strtod_l+0x1f0>
 800e498:	2b08      	cmp	r3, #8
 800e49a:	dc04      	bgt.n	800e4a6 <_strtod_l+0x256>
 800e49c:	9f06      	ldr	r7, [sp, #24]
 800e49e:	434f      	muls	r7, r1
 800e4a0:	9706      	str	r7, [sp, #24]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	e7e2      	b.n	800e46c <_strtod_l+0x21c>
 800e4a6:	1c5f      	adds	r7, r3, #1
 800e4a8:	2f10      	cmp	r7, #16
 800e4aa:	bfde      	ittt	le
 800e4ac:	9f05      	ldrle	r7, [sp, #20]
 800e4ae:	434f      	mulle	r7, r1
 800e4b0:	9705      	strle	r7, [sp, #20]
 800e4b2:	e7f6      	b.n	800e4a2 <_strtod_l+0x252>
 800e4b4:	2c10      	cmp	r4, #16
 800e4b6:	bfdf      	itttt	le
 800e4b8:	9905      	ldrle	r1, [sp, #20]
 800e4ba:	230a      	movle	r3, #10
 800e4bc:	fb03 2301 	mlale	r3, r3, r1, r2
 800e4c0:	9305      	strle	r3, [sp, #20]
 800e4c2:	e7e0      	b.n	800e486 <_strtod_l+0x236>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9304      	str	r3, [sp, #16]
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e77b      	b.n	800e3c4 <_strtod_l+0x174>
 800e4cc:	2700      	movs	r7, #0
 800e4ce:	1cb2      	adds	r2, r6, #2
 800e4d0:	9219      	str	r2, [sp, #100]	; 0x64
 800e4d2:	78b2      	ldrb	r2, [r6, #2]
 800e4d4:	e784      	b.n	800e3e0 <_strtod_l+0x190>
 800e4d6:	bf00      	nop
 800e4d8:	080126ec 	.word	0x080126ec
 800e4dc:	08012480 	.word	0x08012480
 800e4e0:	7ff00000 	.word	0x7ff00000
 800e4e4:	2701      	movs	r7, #1
 800e4e6:	e7f2      	b.n	800e4ce <_strtod_l+0x27e>
 800e4e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e4ea:	1c51      	adds	r1, r2, #1
 800e4ec:	9119      	str	r1, [sp, #100]	; 0x64
 800e4ee:	7852      	ldrb	r2, [r2, #1]
 800e4f0:	2a30      	cmp	r2, #48	; 0x30
 800e4f2:	d0f9      	beq.n	800e4e8 <_strtod_l+0x298>
 800e4f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e4f8:	2908      	cmp	r1, #8
 800e4fa:	f63f af77 	bhi.w	800e3ec <_strtod_l+0x19c>
 800e4fe:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e502:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e504:	9209      	str	r2, [sp, #36]	; 0x24
 800e506:	f04f 0e0a 	mov.w	lr, #10
 800e50a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e50c:	1c51      	adds	r1, r2, #1
 800e50e:	9119      	str	r1, [sp, #100]	; 0x64
 800e510:	7852      	ldrb	r2, [r2, #1]
 800e512:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e516:	2d09      	cmp	r5, #9
 800e518:	d935      	bls.n	800e586 <_strtod_l+0x336>
 800e51a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e51c:	1b49      	subs	r1, r1, r5
 800e51e:	2908      	cmp	r1, #8
 800e520:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e524:	dc02      	bgt.n	800e52c <_strtod_l+0x2dc>
 800e526:	4565      	cmp	r5, ip
 800e528:	bfa8      	it	ge
 800e52a:	4665      	movge	r5, ip
 800e52c:	b107      	cbz	r7, 800e530 <_strtod_l+0x2e0>
 800e52e:	426d      	negs	r5, r5
 800e530:	2c00      	cmp	r4, #0
 800e532:	d14c      	bne.n	800e5ce <_strtod_l+0x37e>
 800e534:	9907      	ldr	r1, [sp, #28]
 800e536:	4301      	orrs	r1, r0
 800e538:	f47f aecb 	bne.w	800e2d2 <_strtod_l+0x82>
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f47f aee4 	bne.w	800e30a <_strtod_l+0xba>
 800e542:	2a69      	cmp	r2, #105	; 0x69
 800e544:	d026      	beq.n	800e594 <_strtod_l+0x344>
 800e546:	dc23      	bgt.n	800e590 <_strtod_l+0x340>
 800e548:	2a49      	cmp	r2, #73	; 0x49
 800e54a:	d023      	beq.n	800e594 <_strtod_l+0x344>
 800e54c:	2a4e      	cmp	r2, #78	; 0x4e
 800e54e:	f47f aedc 	bne.w	800e30a <_strtod_l+0xba>
 800e552:	499d      	ldr	r1, [pc, #628]	; (800e7c8 <_strtod_l+0x578>)
 800e554:	a819      	add	r0, sp, #100	; 0x64
 800e556:	f001 fe57 	bl	8010208 <__match>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f43f aed5 	beq.w	800e30a <_strtod_l+0xba>
 800e560:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2b28      	cmp	r3, #40	; 0x28
 800e566:	d12c      	bne.n	800e5c2 <_strtod_l+0x372>
 800e568:	4998      	ldr	r1, [pc, #608]	; (800e7cc <_strtod_l+0x57c>)
 800e56a:	aa1c      	add	r2, sp, #112	; 0x70
 800e56c:	a819      	add	r0, sp, #100	; 0x64
 800e56e:	f001 fe5f 	bl	8010230 <__hexnan>
 800e572:	2805      	cmp	r0, #5
 800e574:	d125      	bne.n	800e5c2 <_strtod_l+0x372>
 800e576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e578:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e57c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e580:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e584:	e6a5      	b.n	800e2d2 <_strtod_l+0x82>
 800e586:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e58a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e58e:	e7bc      	b.n	800e50a <_strtod_l+0x2ba>
 800e590:	2a6e      	cmp	r2, #110	; 0x6e
 800e592:	e7dc      	b.n	800e54e <_strtod_l+0x2fe>
 800e594:	498e      	ldr	r1, [pc, #568]	; (800e7d0 <_strtod_l+0x580>)
 800e596:	a819      	add	r0, sp, #100	; 0x64
 800e598:	f001 fe36 	bl	8010208 <__match>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f43f aeb4 	beq.w	800e30a <_strtod_l+0xba>
 800e5a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5a4:	498b      	ldr	r1, [pc, #556]	; (800e7d4 <_strtod_l+0x584>)
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	a819      	add	r0, sp, #100	; 0x64
 800e5aa:	9319      	str	r3, [sp, #100]	; 0x64
 800e5ac:	f001 fe2c 	bl	8010208 <__match>
 800e5b0:	b910      	cbnz	r0, 800e5b8 <_strtod_l+0x368>
 800e5b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	9319      	str	r3, [sp, #100]	; 0x64
 800e5b8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e7d8 <_strtod_l+0x588>
 800e5bc:	f04f 0800 	mov.w	r8, #0
 800e5c0:	e687      	b.n	800e2d2 <_strtod_l+0x82>
 800e5c2:	4886      	ldr	r0, [pc, #536]	; (800e7dc <_strtod_l+0x58c>)
 800e5c4:	f002 fdf0 	bl	80111a8 <nan>
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	4689      	mov	r9, r1
 800e5cc:	e681      	b.n	800e2d2 <_strtod_l+0x82>
 800e5ce:	9b04      	ldr	r3, [sp, #16]
 800e5d0:	9806      	ldr	r0, [sp, #24]
 800e5d2:	1aeb      	subs	r3, r5, r3
 800e5d4:	f1bb 0f00 	cmp.w	fp, #0
 800e5d8:	bf08      	it	eq
 800e5da:	46a3      	moveq	fp, r4
 800e5dc:	2c10      	cmp	r4, #16
 800e5de:	9307      	str	r3, [sp, #28]
 800e5e0:	4626      	mov	r6, r4
 800e5e2:	bfa8      	it	ge
 800e5e4:	2610      	movge	r6, #16
 800e5e6:	f7f1 ff65 	bl	80004b4 <__aeabi_ui2d>
 800e5ea:	2c09      	cmp	r4, #9
 800e5ec:	4680      	mov	r8, r0
 800e5ee:	4689      	mov	r9, r1
 800e5f0:	dd13      	ble.n	800e61a <_strtod_l+0x3ca>
 800e5f2:	4b7b      	ldr	r3, [pc, #492]	; (800e7e0 <_strtod_l+0x590>)
 800e5f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e5f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e5fc:	f7f1 ffd4 	bl	80005a8 <__aeabi_dmul>
 800e600:	4680      	mov	r8, r0
 800e602:	9805      	ldr	r0, [sp, #20]
 800e604:	4689      	mov	r9, r1
 800e606:	f7f1 ff55 	bl	80004b4 <__aeabi_ui2d>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4640      	mov	r0, r8
 800e610:	4649      	mov	r1, r9
 800e612:	f7f1 fe13 	bl	800023c <__adddf3>
 800e616:	4680      	mov	r8, r0
 800e618:	4689      	mov	r9, r1
 800e61a:	2c0f      	cmp	r4, #15
 800e61c:	dc36      	bgt.n	800e68c <_strtod_l+0x43c>
 800e61e:	9b07      	ldr	r3, [sp, #28]
 800e620:	2b00      	cmp	r3, #0
 800e622:	f43f ae56 	beq.w	800e2d2 <_strtod_l+0x82>
 800e626:	dd22      	ble.n	800e66e <_strtod_l+0x41e>
 800e628:	2b16      	cmp	r3, #22
 800e62a:	dc09      	bgt.n	800e640 <_strtod_l+0x3f0>
 800e62c:	496c      	ldr	r1, [pc, #432]	; (800e7e0 <_strtod_l+0x590>)
 800e62e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e636:	4642      	mov	r2, r8
 800e638:	464b      	mov	r3, r9
 800e63a:	f7f1 ffb5 	bl	80005a8 <__aeabi_dmul>
 800e63e:	e7c3      	b.n	800e5c8 <_strtod_l+0x378>
 800e640:	9a07      	ldr	r2, [sp, #28]
 800e642:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e646:	4293      	cmp	r3, r2
 800e648:	db20      	blt.n	800e68c <_strtod_l+0x43c>
 800e64a:	4d65      	ldr	r5, [pc, #404]	; (800e7e0 <_strtod_l+0x590>)
 800e64c:	f1c4 040f 	rsb	r4, r4, #15
 800e650:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e654:	4642      	mov	r2, r8
 800e656:	464b      	mov	r3, r9
 800e658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65c:	f7f1 ffa4 	bl	80005a8 <__aeabi_dmul>
 800e660:	9b07      	ldr	r3, [sp, #28]
 800e662:	1b1c      	subs	r4, r3, r4
 800e664:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e66c:	e7e5      	b.n	800e63a <_strtod_l+0x3ea>
 800e66e:	9b07      	ldr	r3, [sp, #28]
 800e670:	3316      	adds	r3, #22
 800e672:	db0b      	blt.n	800e68c <_strtod_l+0x43c>
 800e674:	9b04      	ldr	r3, [sp, #16]
 800e676:	1b5d      	subs	r5, r3, r5
 800e678:	4b59      	ldr	r3, [pc, #356]	; (800e7e0 <_strtod_l+0x590>)
 800e67a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e67e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e682:	4640      	mov	r0, r8
 800e684:	4649      	mov	r1, r9
 800e686:	f7f2 f8b9 	bl	80007fc <__aeabi_ddiv>
 800e68a:	e79d      	b.n	800e5c8 <_strtod_l+0x378>
 800e68c:	9b07      	ldr	r3, [sp, #28]
 800e68e:	1ba6      	subs	r6, r4, r6
 800e690:	441e      	add	r6, r3
 800e692:	2e00      	cmp	r6, #0
 800e694:	dd74      	ble.n	800e780 <_strtod_l+0x530>
 800e696:	f016 030f 	ands.w	r3, r6, #15
 800e69a:	d00a      	beq.n	800e6b2 <_strtod_l+0x462>
 800e69c:	4950      	ldr	r1, [pc, #320]	; (800e7e0 <_strtod_l+0x590>)
 800e69e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6a2:	4642      	mov	r2, r8
 800e6a4:	464b      	mov	r3, r9
 800e6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6aa:	f7f1 ff7d 	bl	80005a8 <__aeabi_dmul>
 800e6ae:	4680      	mov	r8, r0
 800e6b0:	4689      	mov	r9, r1
 800e6b2:	f036 060f 	bics.w	r6, r6, #15
 800e6b6:	d052      	beq.n	800e75e <_strtod_l+0x50e>
 800e6b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e6bc:	dd27      	ble.n	800e70e <_strtod_l+0x4be>
 800e6be:	f04f 0b00 	mov.w	fp, #0
 800e6c2:	f8cd b010 	str.w	fp, [sp, #16]
 800e6c6:	f8cd b020 	str.w	fp, [sp, #32]
 800e6ca:	f8cd b018 	str.w	fp, [sp, #24]
 800e6ce:	2322      	movs	r3, #34	; 0x22
 800e6d0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800e7d8 <_strtod_l+0x588>
 800e6d4:	f8ca 3000 	str.w	r3, [sl]
 800e6d8:	f04f 0800 	mov.w	r8, #0
 800e6dc:	9b08      	ldr	r3, [sp, #32]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f43f adf7 	beq.w	800e2d2 <_strtod_l+0x82>
 800e6e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e6e6:	4650      	mov	r0, sl
 800e6e8:	f001 fe9c 	bl	8010424 <_Bfree>
 800e6ec:	9906      	ldr	r1, [sp, #24]
 800e6ee:	4650      	mov	r0, sl
 800e6f0:	f001 fe98 	bl	8010424 <_Bfree>
 800e6f4:	9904      	ldr	r1, [sp, #16]
 800e6f6:	4650      	mov	r0, sl
 800e6f8:	f001 fe94 	bl	8010424 <_Bfree>
 800e6fc:	9908      	ldr	r1, [sp, #32]
 800e6fe:	4650      	mov	r0, sl
 800e700:	f001 fe90 	bl	8010424 <_Bfree>
 800e704:	4659      	mov	r1, fp
 800e706:	4650      	mov	r0, sl
 800e708:	f001 fe8c 	bl	8010424 <_Bfree>
 800e70c:	e5e1      	b.n	800e2d2 <_strtod_l+0x82>
 800e70e:	4b35      	ldr	r3, [pc, #212]	; (800e7e4 <_strtod_l+0x594>)
 800e710:	9305      	str	r3, [sp, #20]
 800e712:	2300      	movs	r3, #0
 800e714:	1136      	asrs	r6, r6, #4
 800e716:	4640      	mov	r0, r8
 800e718:	4649      	mov	r1, r9
 800e71a:	461f      	mov	r7, r3
 800e71c:	2e01      	cmp	r6, #1
 800e71e:	dc21      	bgt.n	800e764 <_strtod_l+0x514>
 800e720:	b10b      	cbz	r3, 800e726 <_strtod_l+0x4d6>
 800e722:	4680      	mov	r8, r0
 800e724:	4689      	mov	r9, r1
 800e726:	4b2f      	ldr	r3, [pc, #188]	; (800e7e4 <_strtod_l+0x594>)
 800e728:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e72c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e730:	4642      	mov	r2, r8
 800e732:	464b      	mov	r3, r9
 800e734:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e738:	f7f1 ff36 	bl	80005a8 <__aeabi_dmul>
 800e73c:	4b26      	ldr	r3, [pc, #152]	; (800e7d8 <_strtod_l+0x588>)
 800e73e:	460a      	mov	r2, r1
 800e740:	400b      	ands	r3, r1
 800e742:	4929      	ldr	r1, [pc, #164]	; (800e7e8 <_strtod_l+0x598>)
 800e744:	428b      	cmp	r3, r1
 800e746:	4680      	mov	r8, r0
 800e748:	d8b9      	bhi.n	800e6be <_strtod_l+0x46e>
 800e74a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e74e:	428b      	cmp	r3, r1
 800e750:	bf86      	itte	hi
 800e752:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800e7ec <_strtod_l+0x59c>
 800e756:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800e75a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e75e:	2300      	movs	r3, #0
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	e07f      	b.n	800e864 <_strtod_l+0x614>
 800e764:	07f2      	lsls	r2, r6, #31
 800e766:	d505      	bpl.n	800e774 <_strtod_l+0x524>
 800e768:	9b05      	ldr	r3, [sp, #20]
 800e76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76e:	f7f1 ff1b 	bl	80005a8 <__aeabi_dmul>
 800e772:	2301      	movs	r3, #1
 800e774:	9a05      	ldr	r2, [sp, #20]
 800e776:	3208      	adds	r2, #8
 800e778:	3701      	adds	r7, #1
 800e77a:	1076      	asrs	r6, r6, #1
 800e77c:	9205      	str	r2, [sp, #20]
 800e77e:	e7cd      	b.n	800e71c <_strtod_l+0x4cc>
 800e780:	d0ed      	beq.n	800e75e <_strtod_l+0x50e>
 800e782:	4276      	negs	r6, r6
 800e784:	f016 020f 	ands.w	r2, r6, #15
 800e788:	d00a      	beq.n	800e7a0 <_strtod_l+0x550>
 800e78a:	4b15      	ldr	r3, [pc, #84]	; (800e7e0 <_strtod_l+0x590>)
 800e78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e790:	4640      	mov	r0, r8
 800e792:	4649      	mov	r1, r9
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	f7f2 f830 	bl	80007fc <__aeabi_ddiv>
 800e79c:	4680      	mov	r8, r0
 800e79e:	4689      	mov	r9, r1
 800e7a0:	1136      	asrs	r6, r6, #4
 800e7a2:	d0dc      	beq.n	800e75e <_strtod_l+0x50e>
 800e7a4:	2e1f      	cmp	r6, #31
 800e7a6:	dd23      	ble.n	800e7f0 <_strtod_l+0x5a0>
 800e7a8:	f04f 0b00 	mov.w	fp, #0
 800e7ac:	f8cd b010 	str.w	fp, [sp, #16]
 800e7b0:	f8cd b020 	str.w	fp, [sp, #32]
 800e7b4:	f8cd b018 	str.w	fp, [sp, #24]
 800e7b8:	2322      	movs	r3, #34	; 0x22
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	f04f 0900 	mov.w	r9, #0
 800e7c2:	f8ca 3000 	str.w	r3, [sl]
 800e7c6:	e789      	b.n	800e6dc <_strtod_l+0x48c>
 800e7c8:	08012451 	.word	0x08012451
 800e7cc:	08012494 	.word	0x08012494
 800e7d0:	08012449 	.word	0x08012449
 800e7d4:	080125f9 	.word	0x080125f9
 800e7d8:	7ff00000 	.word	0x7ff00000
 800e7dc:	080128a8 	.word	0x080128a8
 800e7e0:	08012788 	.word	0x08012788
 800e7e4:	08012760 	.word	0x08012760
 800e7e8:	7ca00000 	.word	0x7ca00000
 800e7ec:	7fefffff 	.word	0x7fefffff
 800e7f0:	f016 0310 	ands.w	r3, r6, #16
 800e7f4:	bf18      	it	ne
 800e7f6:	236a      	movne	r3, #106	; 0x6a
 800e7f8:	4fb1      	ldr	r7, [pc, #708]	; (800eac0 <_strtod_l+0x870>)
 800e7fa:	9305      	str	r3, [sp, #20]
 800e7fc:	4640      	mov	r0, r8
 800e7fe:	4649      	mov	r1, r9
 800e800:	2300      	movs	r3, #0
 800e802:	07f2      	lsls	r2, r6, #31
 800e804:	d504      	bpl.n	800e810 <_strtod_l+0x5c0>
 800e806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e80a:	f7f1 fecd 	bl	80005a8 <__aeabi_dmul>
 800e80e:	2301      	movs	r3, #1
 800e810:	1076      	asrs	r6, r6, #1
 800e812:	f107 0708 	add.w	r7, r7, #8
 800e816:	d1f4      	bne.n	800e802 <_strtod_l+0x5b2>
 800e818:	b10b      	cbz	r3, 800e81e <_strtod_l+0x5ce>
 800e81a:	4680      	mov	r8, r0
 800e81c:	4689      	mov	r9, r1
 800e81e:	9b05      	ldr	r3, [sp, #20]
 800e820:	b1c3      	cbz	r3, 800e854 <_strtod_l+0x604>
 800e822:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e826:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	4649      	mov	r1, r9
 800e82e:	dd11      	ble.n	800e854 <_strtod_l+0x604>
 800e830:	2b1f      	cmp	r3, #31
 800e832:	f340 8124 	ble.w	800ea7e <_strtod_l+0x82e>
 800e836:	2b34      	cmp	r3, #52	; 0x34
 800e838:	bfde      	ittt	le
 800e83a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e83e:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e842:	fa03 f202 	lslle.w	r2, r3, r2
 800e846:	f04f 0800 	mov.w	r8, #0
 800e84a:	bfcc      	ite	gt
 800e84c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e850:	ea02 0901 	andle.w	r9, r2, r1
 800e854:	2200      	movs	r2, #0
 800e856:	2300      	movs	r3, #0
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	f7f2 f90c 	bl	8000a78 <__aeabi_dcmpeq>
 800e860:	2800      	cmp	r0, #0
 800e862:	d1a1      	bne.n	800e7a8 <_strtod_l+0x558>
 800e864:	9b06      	ldr	r3, [sp, #24]
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	9908      	ldr	r1, [sp, #32]
 800e86a:	4623      	mov	r3, r4
 800e86c:	465a      	mov	r2, fp
 800e86e:	4650      	mov	r0, sl
 800e870:	f001 fe40 	bl	80104f4 <__s2b>
 800e874:	9008      	str	r0, [sp, #32]
 800e876:	2800      	cmp	r0, #0
 800e878:	f43f af21 	beq.w	800e6be <_strtod_l+0x46e>
 800e87c:	9b04      	ldr	r3, [sp, #16]
 800e87e:	1b5d      	subs	r5, r3, r5
 800e880:	9b07      	ldr	r3, [sp, #28]
 800e882:	2b00      	cmp	r3, #0
 800e884:	bfb4      	ite	lt
 800e886:	462b      	movlt	r3, r5
 800e888:	2300      	movge	r3, #0
 800e88a:	930e      	str	r3, [sp, #56]	; 0x38
 800e88c:	9b07      	ldr	r3, [sp, #28]
 800e88e:	f04f 0b00 	mov.w	fp, #0
 800e892:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e896:	9314      	str	r3, [sp, #80]	; 0x50
 800e898:	f8cd b010 	str.w	fp, [sp, #16]
 800e89c:	9b08      	ldr	r3, [sp, #32]
 800e89e:	4650      	mov	r0, sl
 800e8a0:	6859      	ldr	r1, [r3, #4]
 800e8a2:	f001 fd7f 	bl	80103a4 <_Balloc>
 800e8a6:	9006      	str	r0, [sp, #24]
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	f43f af10 	beq.w	800e6ce <_strtod_l+0x47e>
 800e8ae:	9b08      	ldr	r3, [sp, #32]
 800e8b0:	691a      	ldr	r2, [r3, #16]
 800e8b2:	3202      	adds	r2, #2
 800e8b4:	f103 010c 	add.w	r1, r3, #12
 800e8b8:	0092      	lsls	r2, r2, #2
 800e8ba:	300c      	adds	r0, #12
 800e8bc:	f7fe fdde 	bl	800d47c <memcpy>
 800e8c0:	ab1c      	add	r3, sp, #112	; 0x70
 800e8c2:	9301      	str	r3, [sp, #4]
 800e8c4:	ab1b      	add	r3, sp, #108	; 0x6c
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	4642      	mov	r2, r8
 800e8ca:	464b      	mov	r3, r9
 800e8cc:	4650      	mov	r0, sl
 800e8ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e8d2:	f002 f94d 	bl	8010b70 <__d2b>
 800e8d6:	901a      	str	r0, [sp, #104]	; 0x68
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	f43f aef8 	beq.w	800e6ce <_strtod_l+0x47e>
 800e8de:	2101      	movs	r1, #1
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	f001 fe9f 	bl	8010624 <__i2b>
 800e8e6:	9004      	str	r0, [sp, #16]
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	f43f aeef 	beq.w	800e6ce <_strtod_l+0x47e>
 800e8f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e8f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	bfab      	itete	ge
 800e8f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e8fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e8fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e8fe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e900:	bfac      	ite	ge
 800e902:	18ee      	addge	r6, r5, r3
 800e904:	1b5c      	sublt	r4, r3, r5
 800e906:	9b05      	ldr	r3, [sp, #20]
 800e908:	1aed      	subs	r5, r5, r3
 800e90a:	4415      	add	r5, r2
 800e90c:	4b6d      	ldr	r3, [pc, #436]	; (800eac4 <_strtod_l+0x874>)
 800e90e:	3d01      	subs	r5, #1
 800e910:	429d      	cmp	r5, r3
 800e912:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e916:	f280 80c4 	bge.w	800eaa2 <_strtod_l+0x852>
 800e91a:	1b5b      	subs	r3, r3, r5
 800e91c:	2b1f      	cmp	r3, #31
 800e91e:	eba2 0203 	sub.w	r2, r2, r3
 800e922:	f04f 0701 	mov.w	r7, #1
 800e926:	f300 80b1 	bgt.w	800ea8c <_strtod_l+0x83c>
 800e92a:	fa07 f303 	lsl.w	r3, r7, r3
 800e92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e930:	2500      	movs	r5, #0
 800e932:	18b7      	adds	r7, r6, r2
 800e934:	9b05      	ldr	r3, [sp, #20]
 800e936:	42be      	cmp	r6, r7
 800e938:	4414      	add	r4, r2
 800e93a:	441c      	add	r4, r3
 800e93c:	4633      	mov	r3, r6
 800e93e:	bfa8      	it	ge
 800e940:	463b      	movge	r3, r7
 800e942:	42a3      	cmp	r3, r4
 800e944:	bfa8      	it	ge
 800e946:	4623      	movge	r3, r4
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bfc2      	ittt	gt
 800e94c:	1aff      	subgt	r7, r7, r3
 800e94e:	1ae4      	subgt	r4, r4, r3
 800e950:	1af6      	subgt	r6, r6, r3
 800e952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e954:	2b00      	cmp	r3, #0
 800e956:	dd17      	ble.n	800e988 <_strtod_l+0x738>
 800e958:	9904      	ldr	r1, [sp, #16]
 800e95a:	461a      	mov	r2, r3
 800e95c:	4650      	mov	r0, sl
 800e95e:	f001 ff1f 	bl	80107a0 <__pow5mult>
 800e962:	9004      	str	r0, [sp, #16]
 800e964:	2800      	cmp	r0, #0
 800e966:	f43f aeb2 	beq.w	800e6ce <_strtod_l+0x47e>
 800e96a:	4601      	mov	r1, r0
 800e96c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e96e:	4650      	mov	r0, sl
 800e970:	f001 fe6e 	bl	8010650 <__multiply>
 800e974:	9009      	str	r0, [sp, #36]	; 0x24
 800e976:	2800      	cmp	r0, #0
 800e978:	f43f aea9 	beq.w	800e6ce <_strtod_l+0x47e>
 800e97c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e97e:	4650      	mov	r0, sl
 800e980:	f001 fd50 	bl	8010424 <_Bfree>
 800e984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e986:	931a      	str	r3, [sp, #104]	; 0x68
 800e988:	2f00      	cmp	r7, #0
 800e98a:	f300 808e 	bgt.w	800eaaa <_strtod_l+0x85a>
 800e98e:	9b07      	ldr	r3, [sp, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	dd08      	ble.n	800e9a6 <_strtod_l+0x756>
 800e994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e996:	9906      	ldr	r1, [sp, #24]
 800e998:	4650      	mov	r0, sl
 800e99a:	f001 ff01 	bl	80107a0 <__pow5mult>
 800e99e:	9006      	str	r0, [sp, #24]
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	f43f ae94 	beq.w	800e6ce <_strtod_l+0x47e>
 800e9a6:	2c00      	cmp	r4, #0
 800e9a8:	dd08      	ble.n	800e9bc <_strtod_l+0x76c>
 800e9aa:	9906      	ldr	r1, [sp, #24]
 800e9ac:	4622      	mov	r2, r4
 800e9ae:	4650      	mov	r0, sl
 800e9b0:	f001 ff50 	bl	8010854 <__lshift>
 800e9b4:	9006      	str	r0, [sp, #24]
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f43f ae89 	beq.w	800e6ce <_strtod_l+0x47e>
 800e9bc:	2e00      	cmp	r6, #0
 800e9be:	dd08      	ble.n	800e9d2 <_strtod_l+0x782>
 800e9c0:	9904      	ldr	r1, [sp, #16]
 800e9c2:	4632      	mov	r2, r6
 800e9c4:	4650      	mov	r0, sl
 800e9c6:	f001 ff45 	bl	8010854 <__lshift>
 800e9ca:	9004      	str	r0, [sp, #16]
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	f43f ae7e 	beq.w	800e6ce <_strtod_l+0x47e>
 800e9d2:	9a06      	ldr	r2, [sp, #24]
 800e9d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e9d6:	4650      	mov	r0, sl
 800e9d8:	f001 ffc8 	bl	801096c <__mdiff>
 800e9dc:	4683      	mov	fp, r0
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f43f ae75 	beq.w	800e6ce <_strtod_l+0x47e>
 800e9e4:	2400      	movs	r4, #0
 800e9e6:	68c3      	ldr	r3, [r0, #12]
 800e9e8:	9904      	ldr	r1, [sp, #16]
 800e9ea:	60c4      	str	r4, [r0, #12]
 800e9ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9ee:	f001 ffa1 	bl	8010934 <__mcmp>
 800e9f2:	42a0      	cmp	r0, r4
 800e9f4:	da6c      	bge.n	800ead0 <_strtod_l+0x880>
 800e9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9f8:	ea53 0308 	orrs.w	r3, r3, r8
 800e9fc:	f040 8092 	bne.w	800eb24 <_strtod_l+0x8d4>
 800ea00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 808d 	bne.w	800eb24 <_strtod_l+0x8d4>
 800ea0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea0e:	0d1b      	lsrs	r3, r3, #20
 800ea10:	051b      	lsls	r3, r3, #20
 800ea12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea16:	f240 8085 	bls.w	800eb24 <_strtod_l+0x8d4>
 800ea1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ea1e:	b91b      	cbnz	r3, 800ea28 <_strtod_l+0x7d8>
 800ea20:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	dd7d      	ble.n	800eb24 <_strtod_l+0x8d4>
 800ea28:	4659      	mov	r1, fp
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	f001 ff11 	bl	8010854 <__lshift>
 800ea32:	9904      	ldr	r1, [sp, #16]
 800ea34:	4683      	mov	fp, r0
 800ea36:	f001 ff7d 	bl	8010934 <__mcmp>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	dd72      	ble.n	800eb24 <_strtod_l+0x8d4>
 800ea3e:	9905      	ldr	r1, [sp, #20]
 800ea40:	4a21      	ldr	r2, [pc, #132]	; (800eac8 <_strtod_l+0x878>)
 800ea42:	464b      	mov	r3, r9
 800ea44:	2900      	cmp	r1, #0
 800ea46:	f000 808d 	beq.w	800eb64 <_strtod_l+0x914>
 800ea4a:	ea02 0109 	and.w	r1, r2, r9
 800ea4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea52:	f300 8087 	bgt.w	800eb64 <_strtod_l+0x914>
 800ea56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea5a:	f77f aead 	ble.w	800e7b8 <_strtod_l+0x568>
 800ea5e:	4b1b      	ldr	r3, [pc, #108]	; (800eacc <_strtod_l+0x87c>)
 800ea60:	4640      	mov	r0, r8
 800ea62:	4649      	mov	r1, r9
 800ea64:	2200      	movs	r2, #0
 800ea66:	f7f1 fd9f 	bl	80005a8 <__aeabi_dmul>
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4303      	orrs	r3, r0
 800ea6e:	bf08      	it	eq
 800ea70:	2322      	moveq	r3, #34	; 0x22
 800ea72:	4680      	mov	r8, r0
 800ea74:	4689      	mov	r9, r1
 800ea76:	bf08      	it	eq
 800ea78:	f8ca 3000 	streq.w	r3, [sl]
 800ea7c:	e632      	b.n	800e6e4 <_strtod_l+0x494>
 800ea7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea82:	fa02 f303 	lsl.w	r3, r2, r3
 800ea86:	ea03 0808 	and.w	r8, r3, r8
 800ea8a:	e6e3      	b.n	800e854 <_strtod_l+0x604>
 800ea8c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ea90:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ea94:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ea98:	35e2      	adds	r5, #226	; 0xe2
 800ea9a:	fa07 f505 	lsl.w	r5, r7, r5
 800ea9e:	970f      	str	r7, [sp, #60]	; 0x3c
 800eaa0:	e747      	b.n	800e932 <_strtod_l+0x6e2>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaa8:	e743      	b.n	800e932 <_strtod_l+0x6e2>
 800eaaa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eaac:	463a      	mov	r2, r7
 800eaae:	4650      	mov	r0, sl
 800eab0:	f001 fed0 	bl	8010854 <__lshift>
 800eab4:	901a      	str	r0, [sp, #104]	; 0x68
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f47f af69 	bne.w	800e98e <_strtod_l+0x73e>
 800eabc:	e607      	b.n	800e6ce <_strtod_l+0x47e>
 800eabe:	bf00      	nop
 800eac0:	080124a8 	.word	0x080124a8
 800eac4:	fffffc02 	.word	0xfffffc02
 800eac8:	7ff00000 	.word	0x7ff00000
 800eacc:	39500000 	.word	0x39500000
 800ead0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ead4:	d165      	bne.n	800eba2 <_strtod_l+0x952>
 800ead6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ead8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eadc:	b35a      	cbz	r2, 800eb36 <_strtod_l+0x8e6>
 800eade:	4a9a      	ldr	r2, [pc, #616]	; (800ed48 <_strtod_l+0xaf8>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d12b      	bne.n	800eb3c <_strtod_l+0x8ec>
 800eae4:	9b05      	ldr	r3, [sp, #20]
 800eae6:	4641      	mov	r1, r8
 800eae8:	b303      	cbz	r3, 800eb2c <_strtod_l+0x8dc>
 800eaea:	4b98      	ldr	r3, [pc, #608]	; (800ed4c <_strtod_l+0xafc>)
 800eaec:	464a      	mov	r2, r9
 800eaee:	4013      	ands	r3, r2
 800eaf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaf8:	d81b      	bhi.n	800eb32 <_strtod_l+0x8e2>
 800eafa:	0d1b      	lsrs	r3, r3, #20
 800eafc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb00:	fa02 f303 	lsl.w	r3, r2, r3
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d119      	bne.n	800eb3c <_strtod_l+0x8ec>
 800eb08:	4b91      	ldr	r3, [pc, #580]	; (800ed50 <_strtod_l+0xb00>)
 800eb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d102      	bne.n	800eb16 <_strtod_l+0x8c6>
 800eb10:	3101      	adds	r1, #1
 800eb12:	f43f addc 	beq.w	800e6ce <_strtod_l+0x47e>
 800eb16:	4b8d      	ldr	r3, [pc, #564]	; (800ed4c <_strtod_l+0xafc>)
 800eb18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb1a:	401a      	ands	r2, r3
 800eb1c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800eb20:	f04f 0800 	mov.w	r8, #0
 800eb24:	9b05      	ldr	r3, [sp, #20]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d199      	bne.n	800ea5e <_strtod_l+0x80e>
 800eb2a:	e5db      	b.n	800e6e4 <_strtod_l+0x494>
 800eb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb30:	e7e8      	b.n	800eb04 <_strtod_l+0x8b4>
 800eb32:	4613      	mov	r3, r2
 800eb34:	e7e6      	b.n	800eb04 <_strtod_l+0x8b4>
 800eb36:	ea53 0308 	orrs.w	r3, r3, r8
 800eb3a:	d080      	beq.n	800ea3e <_strtod_l+0x7ee>
 800eb3c:	b1e5      	cbz	r5, 800eb78 <_strtod_l+0x928>
 800eb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb40:	421d      	tst	r5, r3
 800eb42:	d0ef      	beq.n	800eb24 <_strtod_l+0x8d4>
 800eb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb46:	9a05      	ldr	r2, [sp, #20]
 800eb48:	4640      	mov	r0, r8
 800eb4a:	4649      	mov	r1, r9
 800eb4c:	b1c3      	cbz	r3, 800eb80 <_strtod_l+0x930>
 800eb4e:	f7ff fb5e 	bl	800e20e <sulp>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb5a:	f7f1 fb6f 	bl	800023c <__adddf3>
 800eb5e:	4680      	mov	r8, r0
 800eb60:	4689      	mov	r9, r1
 800eb62:	e7df      	b.n	800eb24 <_strtod_l+0x8d4>
 800eb64:	4013      	ands	r3, r2
 800eb66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb6a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eb6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eb72:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800eb76:	e7d5      	b.n	800eb24 <_strtod_l+0x8d4>
 800eb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb7a:	ea13 0f08 	tst.w	r3, r8
 800eb7e:	e7e0      	b.n	800eb42 <_strtod_l+0x8f2>
 800eb80:	f7ff fb45 	bl	800e20e <sulp>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb8c:	f7f1 fb54 	bl	8000238 <__aeabi_dsub>
 800eb90:	2200      	movs	r2, #0
 800eb92:	2300      	movs	r3, #0
 800eb94:	4680      	mov	r8, r0
 800eb96:	4689      	mov	r9, r1
 800eb98:	f7f1 ff6e 	bl	8000a78 <__aeabi_dcmpeq>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d0c1      	beq.n	800eb24 <_strtod_l+0x8d4>
 800eba0:	e60a      	b.n	800e7b8 <_strtod_l+0x568>
 800eba2:	9904      	ldr	r1, [sp, #16]
 800eba4:	4658      	mov	r0, fp
 800eba6:	f002 f83f 	bl	8010c28 <__ratio>
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	460f      	mov	r7, r1
 800ebb4:	f7f1 ff74 	bl	8000aa0 <__aeabi_dcmple>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d070      	beq.n	800ec9e <_strtod_l+0xa4e>
 800ebbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d042      	beq.n	800ec48 <_strtod_l+0x9f8>
 800ebc2:	4f64      	ldr	r7, [pc, #400]	; (800ed54 <_strtod_l+0xb04>)
 800ebc4:	2600      	movs	r6, #0
 800ebc6:	4d63      	ldr	r5, [pc, #396]	; (800ed54 <_strtod_l+0xb04>)
 800ebc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebce:	0d1b      	lsrs	r3, r3, #20
 800ebd0:	051b      	lsls	r3, r3, #20
 800ebd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ebd6:	4b60      	ldr	r3, [pc, #384]	; (800ed58 <_strtod_l+0xb08>)
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	f040 80c5 	bne.w	800ed68 <_strtod_l+0xb18>
 800ebde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe0:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f001 ff48 	bl	8010a7c <__ulp>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 fcd8 	bl	80005a8 <__aeabi_dmul>
 800ebf8:	4642      	mov	r2, r8
 800ebfa:	464b      	mov	r3, r9
 800ebfc:	f7f1 fb1e 	bl	800023c <__adddf3>
 800ec00:	460b      	mov	r3, r1
 800ec02:	4952      	ldr	r1, [pc, #328]	; (800ed4c <_strtod_l+0xafc>)
 800ec04:	4a55      	ldr	r2, [pc, #340]	; (800ed5c <_strtod_l+0xb0c>)
 800ec06:	4019      	ands	r1, r3
 800ec08:	4291      	cmp	r1, r2
 800ec0a:	4680      	mov	r8, r0
 800ec0c:	d95d      	bls.n	800ecca <_strtod_l+0xa7a>
 800ec0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec10:	4b4f      	ldr	r3, [pc, #316]	; (800ed50 <_strtod_l+0xb00>)
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d103      	bne.n	800ec1e <_strtod_l+0x9ce>
 800ec16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec18:	3301      	adds	r3, #1
 800ec1a:	f43f ad58 	beq.w	800e6ce <_strtod_l+0x47e>
 800ec1e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800ed50 <_strtod_l+0xb00>
 800ec22:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ec26:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ec28:	4650      	mov	r0, sl
 800ec2a:	f001 fbfb 	bl	8010424 <_Bfree>
 800ec2e:	9906      	ldr	r1, [sp, #24]
 800ec30:	4650      	mov	r0, sl
 800ec32:	f001 fbf7 	bl	8010424 <_Bfree>
 800ec36:	9904      	ldr	r1, [sp, #16]
 800ec38:	4650      	mov	r0, sl
 800ec3a:	f001 fbf3 	bl	8010424 <_Bfree>
 800ec3e:	4659      	mov	r1, fp
 800ec40:	4650      	mov	r0, sl
 800ec42:	f001 fbef 	bl	8010424 <_Bfree>
 800ec46:	e629      	b.n	800e89c <_strtod_l+0x64c>
 800ec48:	f1b8 0f00 	cmp.w	r8, #0
 800ec4c:	d119      	bne.n	800ec82 <_strtod_l+0xa32>
 800ec4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec54:	b9e3      	cbnz	r3, 800ec90 <_strtod_l+0xa40>
 800ec56:	4b3f      	ldr	r3, [pc, #252]	; (800ed54 <_strtod_l+0xb04>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	f7f1 ff15 	bl	8000a8c <__aeabi_dcmplt>
 800ec62:	b9c8      	cbnz	r0, 800ec98 <_strtod_l+0xa48>
 800ec64:	4b3e      	ldr	r3, [pc, #248]	; (800ed60 <_strtod_l+0xb10>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 fc9c 	bl	80005a8 <__aeabi_dmul>
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
 800ec74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ec78:	9416      	str	r4, [sp, #88]	; 0x58
 800ec7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec7c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ec80:	e7a2      	b.n	800ebc8 <_strtod_l+0x978>
 800ec82:	f1b8 0f01 	cmp.w	r8, #1
 800ec86:	d103      	bne.n	800ec90 <_strtod_l+0xa40>
 800ec88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f43f ad94 	beq.w	800e7b8 <_strtod_l+0x568>
 800ec90:	4f34      	ldr	r7, [pc, #208]	; (800ed64 <_strtod_l+0xb14>)
 800ec92:	2600      	movs	r6, #0
 800ec94:	2400      	movs	r4, #0
 800ec96:	e796      	b.n	800ebc6 <_strtod_l+0x976>
 800ec98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ec9a:	4d31      	ldr	r5, [pc, #196]	; (800ed60 <_strtod_l+0xb10>)
 800ec9c:	e7ea      	b.n	800ec74 <_strtod_l+0xa24>
 800ec9e:	4b30      	ldr	r3, [pc, #192]	; (800ed60 <_strtod_l+0xb10>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 fc7f 	bl	80005a8 <__aeabi_dmul>
 800ecaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecac:	4604      	mov	r4, r0
 800ecae:	460d      	mov	r5, r1
 800ecb0:	b933      	cbnz	r3, 800ecc0 <_strtod_l+0xa70>
 800ecb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecb6:	9010      	str	r0, [sp, #64]	; 0x40
 800ecb8:	9311      	str	r3, [sp, #68]	; 0x44
 800ecba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ecbe:	e783      	b.n	800ebc8 <_strtod_l+0x978>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ecc8:	e7f7      	b.n	800ecba <_strtod_l+0xa6a>
 800ecca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ecce:	9b05      	ldr	r3, [sp, #20]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1a8      	bne.n	800ec26 <_strtod_l+0x9d6>
 800ecd4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ecd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecda:	0d1b      	lsrs	r3, r3, #20
 800ecdc:	051b      	lsls	r3, r3, #20
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d1a1      	bne.n	800ec26 <_strtod_l+0x9d6>
 800ece2:	4620      	mov	r0, r4
 800ece4:	4629      	mov	r1, r5
 800ece6:	f7f1 ffbf 	bl	8000c68 <__aeabi_d2lz>
 800ecea:	f7f1 fc2f 	bl	800054c <__aeabi_l2d>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	f7f1 fa9f 	bl	8000238 <__aeabi_dsub>
 800ecfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed00:	ea43 0308 	orr.w	r3, r3, r8
 800ed04:	4313      	orrs	r3, r2
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	d068      	beq.n	800edde <_strtod_l+0xb8e>
 800ed0c:	a30a      	add	r3, pc, #40	; (adr r3, 800ed38 <_strtod_l+0xae8>)
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f7f1 febb 	bl	8000a8c <__aeabi_dcmplt>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f47f ace4 	bne.w	800e6e4 <_strtod_l+0x494>
 800ed1c:	a308      	add	r3, pc, #32	; (adr r3, 800ed40 <_strtod_l+0xaf0>)
 800ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7f1 fecf 	bl	8000ac8 <__aeabi_dcmpgt>
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	f43f af7b 	beq.w	800ec26 <_strtod_l+0x9d6>
 800ed30:	e4d8      	b.n	800e6e4 <_strtod_l+0x494>
 800ed32:	bf00      	nop
 800ed34:	f3af 8000 	nop.w
 800ed38:	94a03595 	.word	0x94a03595
 800ed3c:	3fdfffff 	.word	0x3fdfffff
 800ed40:	35afe535 	.word	0x35afe535
 800ed44:	3fe00000 	.word	0x3fe00000
 800ed48:	000fffff 	.word	0x000fffff
 800ed4c:	7ff00000 	.word	0x7ff00000
 800ed50:	7fefffff 	.word	0x7fefffff
 800ed54:	3ff00000 	.word	0x3ff00000
 800ed58:	7fe00000 	.word	0x7fe00000
 800ed5c:	7c9fffff 	.word	0x7c9fffff
 800ed60:	3fe00000 	.word	0x3fe00000
 800ed64:	bff00000 	.word	0xbff00000
 800ed68:	9b05      	ldr	r3, [sp, #20]
 800ed6a:	b313      	cbz	r3, 800edb2 <_strtod_l+0xb62>
 800ed6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed72:	d81e      	bhi.n	800edb2 <_strtod_l+0xb62>
 800ed74:	a326      	add	r3, pc, #152	; (adr r3, 800ee10 <_strtod_l+0xbc0>)
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	f7f1 fe8f 	bl	8000aa0 <__aeabi_dcmple>
 800ed82:	b190      	cbz	r0, 800edaa <_strtod_l+0xb5a>
 800ed84:	4629      	mov	r1, r5
 800ed86:	4620      	mov	r0, r4
 800ed88:	f7f1 fee6 	bl	8000b58 <__aeabi_d2uiz>
 800ed8c:	2801      	cmp	r0, #1
 800ed8e:	bf38      	it	cc
 800ed90:	2001      	movcc	r0, #1
 800ed92:	f7f1 fb8f 	bl	80004b4 <__aeabi_ui2d>
 800ed96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed98:	4604      	mov	r4, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	b9d3      	cbnz	r3, 800edd4 <_strtod_l+0xb84>
 800ed9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eda2:	9012      	str	r0, [sp, #72]	; 0x48
 800eda4:	9313      	str	r3, [sp, #76]	; 0x4c
 800eda6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800edaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800edb0:	1a9f      	subs	r7, r3, r2
 800edb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edb6:	f001 fe61 	bl	8010a7c <__ulp>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7f1 fbf1 	bl	80005a8 <__aeabi_dmul>
 800edc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800edca:	f7f1 fa37 	bl	800023c <__adddf3>
 800edce:	4680      	mov	r8, r0
 800edd0:	4689      	mov	r9, r1
 800edd2:	e77c      	b.n	800ecce <_strtod_l+0xa7e>
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800eddc:	e7e3      	b.n	800eda6 <_strtod_l+0xb56>
 800edde:	a30e      	add	r3, pc, #56	; (adr r3, 800ee18 <_strtod_l+0xbc8>)
 800ede0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede4:	f7f1 fe52 	bl	8000a8c <__aeabi_dcmplt>
 800ede8:	e79f      	b.n	800ed2a <_strtod_l+0xada>
 800edea:	2300      	movs	r3, #0
 800edec:	930a      	str	r3, [sp, #40]	; 0x28
 800edee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800edf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	f7ff ba71 	b.w	800e2da <_strtod_l+0x8a>
 800edf8:	2a65      	cmp	r2, #101	; 0x65
 800edfa:	f43f ab63 	beq.w	800e4c4 <_strtod_l+0x274>
 800edfe:	2a45      	cmp	r2, #69	; 0x45
 800ee00:	f43f ab60 	beq.w	800e4c4 <_strtod_l+0x274>
 800ee04:	2301      	movs	r3, #1
 800ee06:	f7ff bb95 	b.w	800e534 <_strtod_l+0x2e4>
 800ee0a:	bf00      	nop
 800ee0c:	f3af 8000 	nop.w
 800ee10:	ffc00000 	.word	0xffc00000
 800ee14:	41dfffff 	.word	0x41dfffff
 800ee18:	94a03595 	.word	0x94a03595
 800ee1c:	3fcfffff 	.word	0x3fcfffff

0800ee20 <_strtod_r>:
 800ee20:	4b01      	ldr	r3, [pc, #4]	; (800ee28 <_strtod_r+0x8>)
 800ee22:	f7ff ba15 	b.w	800e250 <_strtod_l>
 800ee26:	bf00      	nop
 800ee28:	20001028 	.word	0x20001028

0800ee2c <_strtol_l.constprop.0>:
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee32:	4680      	mov	r8, r0
 800ee34:	d001      	beq.n	800ee3a <_strtol_l.constprop.0+0xe>
 800ee36:	2b24      	cmp	r3, #36	; 0x24
 800ee38:	d906      	bls.n	800ee48 <_strtol_l.constprop.0+0x1c>
 800ee3a:	f7fe fadb 	bl	800d3f4 <__errno>
 800ee3e:	2316      	movs	r3, #22
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	2000      	movs	r0, #0
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	4f35      	ldr	r7, [pc, #212]	; (800ef20 <_strtol_l.constprop.0+0xf4>)
 800ee4a:	460d      	mov	r5, r1
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee52:	5de6      	ldrb	r6, [r4, r7]
 800ee54:	f016 0608 	ands.w	r6, r6, #8
 800ee58:	d1f8      	bne.n	800ee4c <_strtol_l.constprop.0+0x20>
 800ee5a:	2c2d      	cmp	r4, #45	; 0x2d
 800ee5c:	d12f      	bne.n	800eebe <_strtol_l.constprop.0+0x92>
 800ee5e:	782c      	ldrb	r4, [r5, #0]
 800ee60:	2601      	movs	r6, #1
 800ee62:	1c85      	adds	r5, r0, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d057      	beq.n	800ef18 <_strtol_l.constprop.0+0xec>
 800ee68:	2b10      	cmp	r3, #16
 800ee6a:	d109      	bne.n	800ee80 <_strtol_l.constprop.0+0x54>
 800ee6c:	2c30      	cmp	r4, #48	; 0x30
 800ee6e:	d107      	bne.n	800ee80 <_strtol_l.constprop.0+0x54>
 800ee70:	7828      	ldrb	r0, [r5, #0]
 800ee72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ee76:	2858      	cmp	r0, #88	; 0x58
 800ee78:	d149      	bne.n	800ef0e <_strtol_l.constprop.0+0xe2>
 800ee7a:	786c      	ldrb	r4, [r5, #1]
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	3502      	adds	r5, #2
 800ee80:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ee84:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800ee88:	2700      	movs	r7, #0
 800ee8a:	fbbe f9f3 	udiv	r9, lr, r3
 800ee8e:	4638      	mov	r0, r7
 800ee90:	fb03 ea19 	mls	sl, r3, r9, lr
 800ee94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ee98:	f1bc 0f09 	cmp.w	ip, #9
 800ee9c:	d814      	bhi.n	800eec8 <_strtol_l.constprop.0+0x9c>
 800ee9e:	4664      	mov	r4, ip
 800eea0:	42a3      	cmp	r3, r4
 800eea2:	dd22      	ble.n	800eeea <_strtol_l.constprop.0+0xbe>
 800eea4:	2f00      	cmp	r7, #0
 800eea6:	db1d      	blt.n	800eee4 <_strtol_l.constprop.0+0xb8>
 800eea8:	4581      	cmp	r9, r0
 800eeaa:	d31b      	bcc.n	800eee4 <_strtol_l.constprop.0+0xb8>
 800eeac:	d101      	bne.n	800eeb2 <_strtol_l.constprop.0+0x86>
 800eeae:	45a2      	cmp	sl, r4
 800eeb0:	db18      	blt.n	800eee4 <_strtol_l.constprop.0+0xb8>
 800eeb2:	fb00 4003 	mla	r0, r0, r3, r4
 800eeb6:	2701      	movs	r7, #1
 800eeb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eebc:	e7ea      	b.n	800ee94 <_strtol_l.constprop.0+0x68>
 800eebe:	2c2b      	cmp	r4, #43	; 0x2b
 800eec0:	bf04      	itt	eq
 800eec2:	782c      	ldrbeq	r4, [r5, #0]
 800eec4:	1c85      	addeq	r5, r0, #2
 800eec6:	e7cd      	b.n	800ee64 <_strtol_l.constprop.0+0x38>
 800eec8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eecc:	f1bc 0f19 	cmp.w	ip, #25
 800eed0:	d801      	bhi.n	800eed6 <_strtol_l.constprop.0+0xaa>
 800eed2:	3c37      	subs	r4, #55	; 0x37
 800eed4:	e7e4      	b.n	800eea0 <_strtol_l.constprop.0+0x74>
 800eed6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eeda:	f1bc 0f19 	cmp.w	ip, #25
 800eede:	d804      	bhi.n	800eeea <_strtol_l.constprop.0+0xbe>
 800eee0:	3c57      	subs	r4, #87	; 0x57
 800eee2:	e7dd      	b.n	800eea0 <_strtol_l.constprop.0+0x74>
 800eee4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eee8:	e7e6      	b.n	800eeb8 <_strtol_l.constprop.0+0x8c>
 800eeea:	2f00      	cmp	r7, #0
 800eeec:	da07      	bge.n	800eefe <_strtol_l.constprop.0+0xd2>
 800eeee:	2322      	movs	r3, #34	; 0x22
 800eef0:	f8c8 3000 	str.w	r3, [r8]
 800eef4:	4670      	mov	r0, lr
 800eef6:	2a00      	cmp	r2, #0
 800eef8:	d0a4      	beq.n	800ee44 <_strtol_l.constprop.0+0x18>
 800eefa:	1e69      	subs	r1, r5, #1
 800eefc:	e005      	b.n	800ef0a <_strtol_l.constprop.0+0xde>
 800eefe:	b106      	cbz	r6, 800ef02 <_strtol_l.constprop.0+0xd6>
 800ef00:	4240      	negs	r0, r0
 800ef02:	2a00      	cmp	r2, #0
 800ef04:	d09e      	beq.n	800ee44 <_strtol_l.constprop.0+0x18>
 800ef06:	2f00      	cmp	r7, #0
 800ef08:	d1f7      	bne.n	800eefa <_strtol_l.constprop.0+0xce>
 800ef0a:	6011      	str	r1, [r2, #0]
 800ef0c:	e79a      	b.n	800ee44 <_strtol_l.constprop.0+0x18>
 800ef0e:	2430      	movs	r4, #48	; 0x30
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1b5      	bne.n	800ee80 <_strtol_l.constprop.0+0x54>
 800ef14:	2308      	movs	r3, #8
 800ef16:	e7b3      	b.n	800ee80 <_strtol_l.constprop.0+0x54>
 800ef18:	2c30      	cmp	r4, #48	; 0x30
 800ef1a:	d0a9      	beq.n	800ee70 <_strtol_l.constprop.0+0x44>
 800ef1c:	230a      	movs	r3, #10
 800ef1e:	e7af      	b.n	800ee80 <_strtol_l.constprop.0+0x54>
 800ef20:	080124f6 	.word	0x080124f6

0800ef24 <_strtol_r>:
 800ef24:	f7ff bf82 	b.w	800ee2c <_strtol_l.constprop.0>

0800ef28 <__utoa>:
 800ef28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2a:	4c1f      	ldr	r4, [pc, #124]	; (800efa8 <__utoa+0x80>)
 800ef2c:	b08b      	sub	sp, #44	; 0x2c
 800ef2e:	4605      	mov	r5, r0
 800ef30:	460b      	mov	r3, r1
 800ef32:	466e      	mov	r6, sp
 800ef34:	f104 0c20 	add.w	ip, r4, #32
 800ef38:	6820      	ldr	r0, [r4, #0]
 800ef3a:	6861      	ldr	r1, [r4, #4]
 800ef3c:	4637      	mov	r7, r6
 800ef3e:	c703      	stmia	r7!, {r0, r1}
 800ef40:	3408      	adds	r4, #8
 800ef42:	4564      	cmp	r4, ip
 800ef44:	463e      	mov	r6, r7
 800ef46:	d1f7      	bne.n	800ef38 <__utoa+0x10>
 800ef48:	7921      	ldrb	r1, [r4, #4]
 800ef4a:	7139      	strb	r1, [r7, #4]
 800ef4c:	1e91      	subs	r1, r2, #2
 800ef4e:	6820      	ldr	r0, [r4, #0]
 800ef50:	6038      	str	r0, [r7, #0]
 800ef52:	2922      	cmp	r1, #34	; 0x22
 800ef54:	f04f 0100 	mov.w	r1, #0
 800ef58:	d904      	bls.n	800ef64 <__utoa+0x3c>
 800ef5a:	7019      	strb	r1, [r3, #0]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4618      	mov	r0, r3
 800ef60:	b00b      	add	sp, #44	; 0x2c
 800ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef64:	1e58      	subs	r0, r3, #1
 800ef66:	4684      	mov	ip, r0
 800ef68:	fbb5 f7f2 	udiv	r7, r5, r2
 800ef6c:	fb02 5617 	mls	r6, r2, r7, r5
 800ef70:	3628      	adds	r6, #40	; 0x28
 800ef72:	446e      	add	r6, sp
 800ef74:	460c      	mov	r4, r1
 800ef76:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ef7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ef7e:	462e      	mov	r6, r5
 800ef80:	42b2      	cmp	r2, r6
 800ef82:	f101 0101 	add.w	r1, r1, #1
 800ef86:	463d      	mov	r5, r7
 800ef88:	d9ee      	bls.n	800ef68 <__utoa+0x40>
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	545a      	strb	r2, [r3, r1]
 800ef8e:	1919      	adds	r1, r3, r4
 800ef90:	1aa5      	subs	r5, r4, r2
 800ef92:	42aa      	cmp	r2, r5
 800ef94:	dae3      	bge.n	800ef5e <__utoa+0x36>
 800ef96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ef9a:	780e      	ldrb	r6, [r1, #0]
 800ef9c:	7006      	strb	r6, [r0, #0]
 800ef9e:	3201      	adds	r2, #1
 800efa0:	f801 5901 	strb.w	r5, [r1], #-1
 800efa4:	e7f4      	b.n	800ef90 <__utoa+0x68>
 800efa6:	bf00      	nop
 800efa8:	080124d0 	.word	0x080124d0

0800efac <quorem>:
 800efac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb0:	6903      	ldr	r3, [r0, #16]
 800efb2:	690c      	ldr	r4, [r1, #16]
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	4607      	mov	r7, r0
 800efb8:	db7d      	blt.n	800f0b6 <quorem+0x10a>
 800efba:	3c01      	subs	r4, #1
 800efbc:	f101 0814 	add.w	r8, r1, #20
 800efc0:	f100 0514 	add.w	r5, r0, #20
 800efc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efd2:	3301      	adds	r3, #1
 800efd4:	429a      	cmp	r2, r3
 800efd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800efda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efde:	fbb2 f6f3 	udiv	r6, r2, r3
 800efe2:	d32e      	bcc.n	800f042 <quorem+0x96>
 800efe4:	f04f 0e00 	mov.w	lr, #0
 800efe8:	4640      	mov	r0, r8
 800efea:	46ac      	mov	ip, r5
 800efec:	46f2      	mov	sl, lr
 800efee:	f850 2b04 	ldr.w	r2, [r0], #4
 800eff2:	b293      	uxth	r3, r2
 800eff4:	fb06 e303 	mla	r3, r6, r3, lr
 800eff8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800effc:	0c12      	lsrs	r2, r2, #16
 800effe:	b29b      	uxth	r3, r3
 800f000:	fb06 e202 	mla	r2, r6, r2, lr
 800f004:	ebaa 0303 	sub.w	r3, sl, r3
 800f008:	f8dc a000 	ldr.w	sl, [ip]
 800f00c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f010:	b292      	uxth	r2, r2
 800f012:	fa13 f38a 	uxtah	r3, r3, sl
 800f016:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f01a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f01e:	b29b      	uxth	r3, r3
 800f020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f024:	4581      	cmp	r9, r0
 800f026:	f84c 3b04 	str.w	r3, [ip], #4
 800f02a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f02e:	d2de      	bcs.n	800efee <quorem+0x42>
 800f030:	f855 300b 	ldr.w	r3, [r5, fp]
 800f034:	b92b      	cbnz	r3, 800f042 <quorem+0x96>
 800f036:	9b01      	ldr	r3, [sp, #4]
 800f038:	3b04      	subs	r3, #4
 800f03a:	429d      	cmp	r5, r3
 800f03c:	461a      	mov	r2, r3
 800f03e:	d32e      	bcc.n	800f09e <quorem+0xf2>
 800f040:	613c      	str	r4, [r7, #16]
 800f042:	4638      	mov	r0, r7
 800f044:	f001 fc76 	bl	8010934 <__mcmp>
 800f048:	2800      	cmp	r0, #0
 800f04a:	db24      	blt.n	800f096 <quorem+0xea>
 800f04c:	3601      	adds	r6, #1
 800f04e:	4628      	mov	r0, r5
 800f050:	f04f 0c00 	mov.w	ip, #0
 800f054:	f858 2b04 	ldr.w	r2, [r8], #4
 800f058:	f8d0 e000 	ldr.w	lr, [r0]
 800f05c:	b293      	uxth	r3, r2
 800f05e:	ebac 0303 	sub.w	r3, ip, r3
 800f062:	0c12      	lsrs	r2, r2, #16
 800f064:	fa13 f38e 	uxtah	r3, r3, lr
 800f068:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f06c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f070:	b29b      	uxth	r3, r3
 800f072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f076:	45c1      	cmp	r9, r8
 800f078:	f840 3b04 	str.w	r3, [r0], #4
 800f07c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f080:	d2e8      	bcs.n	800f054 <quorem+0xa8>
 800f082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f08a:	b922      	cbnz	r2, 800f096 <quorem+0xea>
 800f08c:	3b04      	subs	r3, #4
 800f08e:	429d      	cmp	r5, r3
 800f090:	461a      	mov	r2, r3
 800f092:	d30a      	bcc.n	800f0aa <quorem+0xfe>
 800f094:	613c      	str	r4, [r7, #16]
 800f096:	4630      	mov	r0, r6
 800f098:	b003      	add	sp, #12
 800f09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09e:	6812      	ldr	r2, [r2, #0]
 800f0a0:	3b04      	subs	r3, #4
 800f0a2:	2a00      	cmp	r2, #0
 800f0a4:	d1cc      	bne.n	800f040 <quorem+0x94>
 800f0a6:	3c01      	subs	r4, #1
 800f0a8:	e7c7      	b.n	800f03a <quorem+0x8e>
 800f0aa:	6812      	ldr	r2, [r2, #0]
 800f0ac:	3b04      	subs	r3, #4
 800f0ae:	2a00      	cmp	r2, #0
 800f0b0:	d1f0      	bne.n	800f094 <quorem+0xe8>
 800f0b2:	3c01      	subs	r4, #1
 800f0b4:	e7eb      	b.n	800f08e <quorem+0xe2>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e7ee      	b.n	800f098 <quorem+0xec>
 800f0ba:	0000      	movs	r0, r0
 800f0bc:	0000      	movs	r0, r0
	...

0800f0c0 <_dtoa_r>:
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f0c6:	b099      	sub	sp, #100	; 0x64
 800f0c8:	4616      	mov	r6, r2
 800f0ca:	461f      	mov	r7, r3
 800f0cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0d0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	b974      	cbnz	r4, 800f0f6 <_dtoa_r+0x36>
 800f0d8:	2010      	movs	r0, #16
 800f0da:	f001 f949 	bl	8010370 <malloc>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	6268      	str	r0, [r5, #36]	; 0x24
 800f0e2:	b920      	cbnz	r0, 800f0ee <_dtoa_r+0x2e>
 800f0e4:	4ba8      	ldr	r3, [pc, #672]	; (800f388 <_dtoa_r+0x2c8>)
 800f0e6:	21ea      	movs	r1, #234	; 0xea
 800f0e8:	48a8      	ldr	r0, [pc, #672]	; (800f38c <_dtoa_r+0x2cc>)
 800f0ea:	f002 f881 	bl	80111f0 <__assert_func>
 800f0ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0f2:	6004      	str	r4, [r0, #0]
 800f0f4:	60c4      	str	r4, [r0, #12]
 800f0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	b151      	cbz	r1, 800f112 <_dtoa_r+0x52>
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	604a      	str	r2, [r1, #4]
 800f100:	2301      	movs	r3, #1
 800f102:	4093      	lsls	r3, r2
 800f104:	608b      	str	r3, [r1, #8]
 800f106:	4628      	mov	r0, r5
 800f108:	f001 f98c 	bl	8010424 <_Bfree>
 800f10c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f10e:	2200      	movs	r2, #0
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	1e3b      	subs	r3, r7, #0
 800f114:	bfb9      	ittee	lt
 800f116:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f11a:	9305      	strlt	r3, [sp, #20]
 800f11c:	2300      	movge	r3, #0
 800f11e:	f8c8 3000 	strge.w	r3, [r8]
 800f122:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f126:	4b9a      	ldr	r3, [pc, #616]	; (800f390 <_dtoa_r+0x2d0>)
 800f128:	bfbc      	itt	lt
 800f12a:	2201      	movlt	r2, #1
 800f12c:	f8c8 2000 	strlt.w	r2, [r8]
 800f130:	ea33 0309 	bics.w	r3, r3, r9
 800f134:	d119      	bne.n	800f16a <_dtoa_r+0xaa>
 800f136:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f138:	f242 730f 	movw	r3, #9999	; 0x270f
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f142:	4333      	orrs	r3, r6
 800f144:	f000 8580 	beq.w	800fc48 <_dtoa_r+0xb88>
 800f148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f14a:	b953      	cbnz	r3, 800f162 <_dtoa_r+0xa2>
 800f14c:	4b91      	ldr	r3, [pc, #580]	; (800f394 <_dtoa_r+0x2d4>)
 800f14e:	e022      	b.n	800f196 <_dtoa_r+0xd6>
 800f150:	4b91      	ldr	r3, [pc, #580]	; (800f398 <_dtoa_r+0x2d8>)
 800f152:	9303      	str	r3, [sp, #12]
 800f154:	3308      	adds	r3, #8
 800f156:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f158:	6013      	str	r3, [r2, #0]
 800f15a:	9803      	ldr	r0, [sp, #12]
 800f15c:	b019      	add	sp, #100	; 0x64
 800f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	4b8c      	ldr	r3, [pc, #560]	; (800f394 <_dtoa_r+0x2d4>)
 800f164:	9303      	str	r3, [sp, #12]
 800f166:	3303      	adds	r3, #3
 800f168:	e7f5      	b.n	800f156 <_dtoa_r+0x96>
 800f16a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f16e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f176:	2200      	movs	r2, #0
 800f178:	2300      	movs	r3, #0
 800f17a:	f7f1 fc7d 	bl	8000a78 <__aeabi_dcmpeq>
 800f17e:	4680      	mov	r8, r0
 800f180:	b158      	cbz	r0, 800f19a <_dtoa_r+0xda>
 800f182:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f184:	2301      	movs	r3, #1
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f000 8559 	beq.w	800fc42 <_dtoa_r+0xb82>
 800f190:	4882      	ldr	r0, [pc, #520]	; (800f39c <_dtoa_r+0x2dc>)
 800f192:	6018      	str	r0, [r3, #0]
 800f194:	1e43      	subs	r3, r0, #1
 800f196:	9303      	str	r3, [sp, #12]
 800f198:	e7df      	b.n	800f15a <_dtoa_r+0x9a>
 800f19a:	ab16      	add	r3, sp, #88	; 0x58
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	ab17      	add	r3, sp, #92	; 0x5c
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f1a8:	f001 fce2 	bl	8010b70 <__d2b>
 800f1ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f1b0:	4683      	mov	fp, r0
 800f1b2:	2c00      	cmp	r4, #0
 800f1b4:	d07e      	beq.n	800f2b4 <_dtoa_r+0x1f4>
 800f1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f1bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f1c4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f1c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f1cc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f1d0:	4b73      	ldr	r3, [pc, #460]	; (800f3a0 <_dtoa_r+0x2e0>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f7f1 f830 	bl	8000238 <__aeabi_dsub>
 800f1d8:	a365      	add	r3, pc, #404	; (adr r3, 800f370 <_dtoa_r+0x2b0>)
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	f7f1 f9e3 	bl	80005a8 <__aeabi_dmul>
 800f1e2:	a365      	add	r3, pc, #404	; (adr r3, 800f378 <_dtoa_r+0x2b8>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f7f1 f828 	bl	800023c <__adddf3>
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	460f      	mov	r7, r1
 800f1f2:	f7f1 f96f 	bl	80004d4 <__aeabi_i2d>
 800f1f6:	a362      	add	r3, pc, #392	; (adr r3, 800f380 <_dtoa_r+0x2c0>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f1 f9d4 	bl	80005a8 <__aeabi_dmul>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4630      	mov	r0, r6
 800f206:	4639      	mov	r1, r7
 800f208:	f7f1 f818 	bl	800023c <__adddf3>
 800f20c:	4606      	mov	r6, r0
 800f20e:	460f      	mov	r7, r1
 800f210:	f7f1 fc7a 	bl	8000b08 <__aeabi_d2iz>
 800f214:	2200      	movs	r2, #0
 800f216:	4682      	mov	sl, r0
 800f218:	2300      	movs	r3, #0
 800f21a:	4630      	mov	r0, r6
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 fc35 	bl	8000a8c <__aeabi_dcmplt>
 800f222:	b148      	cbz	r0, 800f238 <_dtoa_r+0x178>
 800f224:	4650      	mov	r0, sl
 800f226:	f7f1 f955 	bl	80004d4 <__aeabi_i2d>
 800f22a:	4632      	mov	r2, r6
 800f22c:	463b      	mov	r3, r7
 800f22e:	f7f1 fc23 	bl	8000a78 <__aeabi_dcmpeq>
 800f232:	b908      	cbnz	r0, 800f238 <_dtoa_r+0x178>
 800f234:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f238:	f1ba 0f16 	cmp.w	sl, #22
 800f23c:	d857      	bhi.n	800f2ee <_dtoa_r+0x22e>
 800f23e:	4b59      	ldr	r3, [pc, #356]	; (800f3a4 <_dtoa_r+0x2e4>)
 800f240:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f24c:	f7f1 fc1e 	bl	8000a8c <__aeabi_dcmplt>
 800f250:	2800      	cmp	r0, #0
 800f252:	d04e      	beq.n	800f2f2 <_dtoa_r+0x232>
 800f254:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f258:	2300      	movs	r3, #0
 800f25a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f25c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f25e:	1b1c      	subs	r4, r3, r4
 800f260:	1e63      	subs	r3, r4, #1
 800f262:	9309      	str	r3, [sp, #36]	; 0x24
 800f264:	bf45      	ittet	mi
 800f266:	f1c4 0301 	rsbmi	r3, r4, #1
 800f26a:	9306      	strmi	r3, [sp, #24]
 800f26c:	2300      	movpl	r3, #0
 800f26e:	2300      	movmi	r3, #0
 800f270:	bf4c      	ite	mi
 800f272:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f274:	9306      	strpl	r3, [sp, #24]
 800f276:	f1ba 0f00 	cmp.w	sl, #0
 800f27a:	db3c      	blt.n	800f2f6 <_dtoa_r+0x236>
 800f27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f282:	4453      	add	r3, sl
 800f284:	9309      	str	r3, [sp, #36]	; 0x24
 800f286:	2300      	movs	r3, #0
 800f288:	930a      	str	r3, [sp, #40]	; 0x28
 800f28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f28c:	2b09      	cmp	r3, #9
 800f28e:	f200 808d 	bhi.w	800f3ac <_dtoa_r+0x2ec>
 800f292:	2b05      	cmp	r3, #5
 800f294:	bfc4      	itt	gt
 800f296:	3b04      	subgt	r3, #4
 800f298:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f29a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f29c:	f1a3 0302 	sub.w	r3, r3, #2
 800f2a0:	bfcc      	ite	gt
 800f2a2:	2400      	movgt	r4, #0
 800f2a4:	2401      	movle	r4, #1
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	f200 808c 	bhi.w	800f3c4 <_dtoa_r+0x304>
 800f2ac:	e8df f003 	tbb	[pc, r3]
 800f2b0:	5b4d4f2d 	.word	0x5b4d4f2d
 800f2b4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f2b8:	441c      	add	r4, r3
 800f2ba:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f2be:	2b20      	cmp	r3, #32
 800f2c0:	bfc3      	ittte	gt
 800f2c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2c6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f2ca:	fa09 f303 	lslgt.w	r3, r9, r3
 800f2ce:	f1c3 0320 	rsble	r3, r3, #32
 800f2d2:	bfc6      	itte	gt
 800f2d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f2d8:	4318      	orrgt	r0, r3
 800f2da:	fa06 f003 	lslle.w	r0, r6, r3
 800f2de:	f7f1 f8e9 	bl	80004b4 <__aeabi_ui2d>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f2e8:	3c01      	subs	r4, #1
 800f2ea:	9313      	str	r3, [sp, #76]	; 0x4c
 800f2ec:	e770      	b.n	800f1d0 <_dtoa_r+0x110>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e7b3      	b.n	800f25a <_dtoa_r+0x19a>
 800f2f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800f2f4:	e7b2      	b.n	800f25c <_dtoa_r+0x19c>
 800f2f6:	9b06      	ldr	r3, [sp, #24]
 800f2f8:	eba3 030a 	sub.w	r3, r3, sl
 800f2fc:	9306      	str	r3, [sp, #24]
 800f2fe:	f1ca 0300 	rsb	r3, sl, #0
 800f302:	930a      	str	r3, [sp, #40]	; 0x28
 800f304:	2300      	movs	r3, #0
 800f306:	930e      	str	r3, [sp, #56]	; 0x38
 800f308:	e7bf      	b.n	800f28a <_dtoa_r+0x1ca>
 800f30a:	2300      	movs	r3, #0
 800f30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f30e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f310:	2b00      	cmp	r3, #0
 800f312:	dc5a      	bgt.n	800f3ca <_dtoa_r+0x30a>
 800f314:	f04f 0901 	mov.w	r9, #1
 800f318:	f8cd 9020 	str.w	r9, [sp, #32]
 800f31c:	464b      	mov	r3, r9
 800f31e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f322:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f324:	2200      	movs	r2, #0
 800f326:	6042      	str	r2, [r0, #4]
 800f328:	2204      	movs	r2, #4
 800f32a:	f102 0614 	add.w	r6, r2, #20
 800f32e:	429e      	cmp	r6, r3
 800f330:	6841      	ldr	r1, [r0, #4]
 800f332:	d950      	bls.n	800f3d6 <_dtoa_r+0x316>
 800f334:	4628      	mov	r0, r5
 800f336:	f001 f835 	bl	80103a4 <_Balloc>
 800f33a:	9003      	str	r0, [sp, #12]
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d14e      	bne.n	800f3de <_dtoa_r+0x31e>
 800f340:	4b19      	ldr	r3, [pc, #100]	; (800f3a8 <_dtoa_r+0x2e8>)
 800f342:	4602      	mov	r2, r0
 800f344:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f348:	e6ce      	b.n	800f0e8 <_dtoa_r+0x28>
 800f34a:	2301      	movs	r3, #1
 800f34c:	e7de      	b.n	800f30c <_dtoa_r+0x24c>
 800f34e:	2300      	movs	r3, #0
 800f350:	930b      	str	r3, [sp, #44]	; 0x2c
 800f352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f354:	eb0a 0903 	add.w	r9, sl, r3
 800f358:	f109 0301 	add.w	r3, r9, #1
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	9308      	str	r3, [sp, #32]
 800f360:	bfb8      	it	lt
 800f362:	2301      	movlt	r3, #1
 800f364:	e7dd      	b.n	800f322 <_dtoa_r+0x262>
 800f366:	2301      	movs	r3, #1
 800f368:	e7f2      	b.n	800f350 <_dtoa_r+0x290>
 800f36a:	bf00      	nop
 800f36c:	f3af 8000 	nop.w
 800f370:	636f4361 	.word	0x636f4361
 800f374:	3fd287a7 	.word	0x3fd287a7
 800f378:	8b60c8b3 	.word	0x8b60c8b3
 800f37c:	3fc68a28 	.word	0x3fc68a28
 800f380:	509f79fb 	.word	0x509f79fb
 800f384:	3fd34413 	.word	0x3fd34413
 800f388:	08012603 	.word	0x08012603
 800f38c:	0801261a 	.word	0x0801261a
 800f390:	7ff00000 	.word	0x7ff00000
 800f394:	080125ff 	.word	0x080125ff
 800f398:	080125f6 	.word	0x080125f6
 800f39c:	08012455 	.word	0x08012455
 800f3a0:	3ff80000 	.word	0x3ff80000
 800f3a4:	08012788 	.word	0x08012788
 800f3a8:	08012675 	.word	0x08012675
 800f3ac:	2401      	movs	r4, #1
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	9322      	str	r3, [sp, #136]	; 0x88
 800f3b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800f3b4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f8cd 9020 	str.w	r9, [sp, #32]
 800f3be:	2312      	movs	r3, #18
 800f3c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800f3c2:	e7ae      	b.n	800f322 <_dtoa_r+0x262>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3c8:	e7f4      	b.n	800f3b4 <_dtoa_r+0x2f4>
 800f3ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800f3ce:	f8cd 9020 	str.w	r9, [sp, #32]
 800f3d2:	464b      	mov	r3, r9
 800f3d4:	e7a5      	b.n	800f322 <_dtoa_r+0x262>
 800f3d6:	3101      	adds	r1, #1
 800f3d8:	6041      	str	r1, [r0, #4]
 800f3da:	0052      	lsls	r2, r2, #1
 800f3dc:	e7a5      	b.n	800f32a <_dtoa_r+0x26a>
 800f3de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3e0:	9a03      	ldr	r2, [sp, #12]
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	9b08      	ldr	r3, [sp, #32]
 800f3e6:	2b0e      	cmp	r3, #14
 800f3e8:	f200 80a8 	bhi.w	800f53c <_dtoa_r+0x47c>
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	f000 80a5 	beq.w	800f53c <_dtoa_r+0x47c>
 800f3f2:	f1ba 0f00 	cmp.w	sl, #0
 800f3f6:	dd34      	ble.n	800f462 <_dtoa_r+0x3a2>
 800f3f8:	4a9a      	ldr	r2, [pc, #616]	; (800f664 <_dtoa_r+0x5a4>)
 800f3fa:	f00a 030f 	and.w	r3, sl, #15
 800f3fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f402:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f406:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f40a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f40e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800f412:	d016      	beq.n	800f442 <_dtoa_r+0x382>
 800f414:	4b94      	ldr	r3, [pc, #592]	; (800f668 <_dtoa_r+0x5a8>)
 800f416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f41a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f41e:	f7f1 f9ed 	bl	80007fc <__aeabi_ddiv>
 800f422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f426:	f004 040f 	and.w	r4, r4, #15
 800f42a:	2703      	movs	r7, #3
 800f42c:	4e8e      	ldr	r6, [pc, #568]	; (800f668 <_dtoa_r+0x5a8>)
 800f42e:	b954      	cbnz	r4, 800f446 <_dtoa_r+0x386>
 800f430:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f438:	f7f1 f9e0 	bl	80007fc <__aeabi_ddiv>
 800f43c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f440:	e029      	b.n	800f496 <_dtoa_r+0x3d6>
 800f442:	2702      	movs	r7, #2
 800f444:	e7f2      	b.n	800f42c <_dtoa_r+0x36c>
 800f446:	07e1      	lsls	r1, r4, #31
 800f448:	d508      	bpl.n	800f45c <_dtoa_r+0x39c>
 800f44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f44e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f452:	f7f1 f8a9 	bl	80005a8 <__aeabi_dmul>
 800f456:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f45a:	3701      	adds	r7, #1
 800f45c:	1064      	asrs	r4, r4, #1
 800f45e:	3608      	adds	r6, #8
 800f460:	e7e5      	b.n	800f42e <_dtoa_r+0x36e>
 800f462:	f000 80a5 	beq.w	800f5b0 <_dtoa_r+0x4f0>
 800f466:	f1ca 0400 	rsb	r4, sl, #0
 800f46a:	4b7e      	ldr	r3, [pc, #504]	; (800f664 <_dtoa_r+0x5a4>)
 800f46c:	4e7e      	ldr	r6, [pc, #504]	; (800f668 <_dtoa_r+0x5a8>)
 800f46e:	f004 020f 	and.w	r2, r4, #15
 800f472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f47e:	f7f1 f893 	bl	80005a8 <__aeabi_dmul>
 800f482:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f486:	1124      	asrs	r4, r4, #4
 800f488:	2300      	movs	r3, #0
 800f48a:	2702      	movs	r7, #2
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	f040 8084 	bne.w	800f59a <_dtoa_r+0x4da>
 800f492:	2b00      	cmp	r3, #0
 800f494:	d1d2      	bne.n	800f43c <_dtoa_r+0x37c>
 800f496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 808b 	beq.w	800f5b4 <_dtoa_r+0x4f4>
 800f49e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f4a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f4a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4aa:	4b70      	ldr	r3, [pc, #448]	; (800f66c <_dtoa_r+0x5ac>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f7f1 faed 	bl	8000a8c <__aeabi_dcmplt>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d07e      	beq.n	800f5b4 <_dtoa_r+0x4f4>
 800f4b6:	9b08      	ldr	r3, [sp, #32]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d07b      	beq.n	800f5b4 <_dtoa_r+0x4f4>
 800f4bc:	f1b9 0f00 	cmp.w	r9, #0
 800f4c0:	dd38      	ble.n	800f534 <_dtoa_r+0x474>
 800f4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4c6:	4b6a      	ldr	r3, [pc, #424]	; (800f670 <_dtoa_r+0x5b0>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f7f1 f86d 	bl	80005a8 <__aeabi_dmul>
 800f4ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4d2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800f4d6:	3701      	adds	r7, #1
 800f4d8:	464c      	mov	r4, r9
 800f4da:	4638      	mov	r0, r7
 800f4dc:	f7f0 fffa 	bl	80004d4 <__aeabi_i2d>
 800f4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4e4:	f7f1 f860 	bl	80005a8 <__aeabi_dmul>
 800f4e8:	4b62      	ldr	r3, [pc, #392]	; (800f674 <_dtoa_r+0x5b4>)
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f7f0 fea6 	bl	800023c <__adddf3>
 800f4f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f4f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f4f8:	9611      	str	r6, [sp, #68]	; 0x44
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d15d      	bne.n	800f5ba <_dtoa_r+0x4fa>
 800f4fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f502:	4b5d      	ldr	r3, [pc, #372]	; (800f678 <_dtoa_r+0x5b8>)
 800f504:	2200      	movs	r2, #0
 800f506:	f7f0 fe97 	bl	8000238 <__aeabi_dsub>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f512:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f514:	4633      	mov	r3, r6
 800f516:	f7f1 fad7 	bl	8000ac8 <__aeabi_dcmpgt>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	f040 829c 	bne.w	800fa58 <_dtoa_r+0x998>
 800f520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f526:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f52a:	f7f1 faaf 	bl	8000a8c <__aeabi_dcmplt>
 800f52e:	2800      	cmp	r0, #0
 800f530:	f040 8290 	bne.w	800fa54 <_dtoa_r+0x994>
 800f534:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f538:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f53c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f2c0 8152 	blt.w	800f7e8 <_dtoa_r+0x728>
 800f544:	f1ba 0f0e 	cmp.w	sl, #14
 800f548:	f300 814e 	bgt.w	800f7e8 <_dtoa_r+0x728>
 800f54c:	4b45      	ldr	r3, [pc, #276]	; (800f664 <_dtoa_r+0x5a4>)
 800f54e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f552:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f556:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f55a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f280 80db 	bge.w	800f718 <_dtoa_r+0x658>
 800f562:	9b08      	ldr	r3, [sp, #32]
 800f564:	2b00      	cmp	r3, #0
 800f566:	f300 80d7 	bgt.w	800f718 <_dtoa_r+0x658>
 800f56a:	f040 8272 	bne.w	800fa52 <_dtoa_r+0x992>
 800f56e:	4b42      	ldr	r3, [pc, #264]	; (800f678 <_dtoa_r+0x5b8>)
 800f570:	2200      	movs	r2, #0
 800f572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f576:	f7f1 f817 	bl	80005a8 <__aeabi_dmul>
 800f57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f57e:	f7f1 fa99 	bl	8000ab4 <__aeabi_dcmpge>
 800f582:	9c08      	ldr	r4, [sp, #32]
 800f584:	4626      	mov	r6, r4
 800f586:	2800      	cmp	r0, #0
 800f588:	f040 8248 	bne.w	800fa1c <_dtoa_r+0x95c>
 800f58c:	9f03      	ldr	r7, [sp, #12]
 800f58e:	2331      	movs	r3, #49	; 0x31
 800f590:	f807 3b01 	strb.w	r3, [r7], #1
 800f594:	f10a 0a01 	add.w	sl, sl, #1
 800f598:	e244      	b.n	800fa24 <_dtoa_r+0x964>
 800f59a:	07e2      	lsls	r2, r4, #31
 800f59c:	d505      	bpl.n	800f5aa <_dtoa_r+0x4ea>
 800f59e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5a2:	f7f1 f801 	bl	80005a8 <__aeabi_dmul>
 800f5a6:	3701      	adds	r7, #1
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	1064      	asrs	r4, r4, #1
 800f5ac:	3608      	adds	r6, #8
 800f5ae:	e76d      	b.n	800f48c <_dtoa_r+0x3cc>
 800f5b0:	2702      	movs	r7, #2
 800f5b2:	e770      	b.n	800f496 <_dtoa_r+0x3d6>
 800f5b4:	9c08      	ldr	r4, [sp, #32]
 800f5b6:	46d0      	mov	r8, sl
 800f5b8:	e78f      	b.n	800f4da <_dtoa_r+0x41a>
 800f5ba:	9903      	ldr	r1, [sp, #12]
 800f5bc:	4b29      	ldr	r3, [pc, #164]	; (800f664 <_dtoa_r+0x5a4>)
 800f5be:	4421      	add	r1, r4
 800f5c0:	9112      	str	r1, [sp, #72]	; 0x48
 800f5c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f5cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	d055      	beq.n	800f680 <_dtoa_r+0x5c0>
 800f5d4:	4929      	ldr	r1, [pc, #164]	; (800f67c <_dtoa_r+0x5bc>)
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f7f1 f910 	bl	80007fc <__aeabi_ddiv>
 800f5dc:	463b      	mov	r3, r7
 800f5de:	4632      	mov	r2, r6
 800f5e0:	f7f0 fe2a 	bl	8000238 <__aeabi_dsub>
 800f5e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5e8:	9f03      	ldr	r7, [sp, #12]
 800f5ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5ee:	f7f1 fa8b 	bl	8000b08 <__aeabi_d2iz>
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	f7f0 ff6e 	bl	80004d4 <__aeabi_i2d>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f600:	f7f0 fe1a 	bl	8000238 <__aeabi_dsub>
 800f604:	3430      	adds	r4, #48	; 0x30
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f60e:	f807 4b01 	strb.w	r4, [r7], #1
 800f612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f616:	f7f1 fa39 	bl	8000a8c <__aeabi_dcmplt>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d174      	bne.n	800f708 <_dtoa_r+0x648>
 800f61e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f622:	4912      	ldr	r1, [pc, #72]	; (800f66c <_dtoa_r+0x5ac>)
 800f624:	2000      	movs	r0, #0
 800f626:	f7f0 fe07 	bl	8000238 <__aeabi_dsub>
 800f62a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f62e:	f7f1 fa2d 	bl	8000a8c <__aeabi_dcmplt>
 800f632:	2800      	cmp	r0, #0
 800f634:	f040 80b7 	bne.w	800f7a6 <_dtoa_r+0x6e6>
 800f638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f63a:	429f      	cmp	r7, r3
 800f63c:	f43f af7a 	beq.w	800f534 <_dtoa_r+0x474>
 800f640:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f644:	4b0a      	ldr	r3, [pc, #40]	; (800f670 <_dtoa_r+0x5b0>)
 800f646:	2200      	movs	r2, #0
 800f648:	f7f0 ffae 	bl	80005a8 <__aeabi_dmul>
 800f64c:	4b08      	ldr	r3, [pc, #32]	; (800f670 <_dtoa_r+0x5b0>)
 800f64e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f652:	2200      	movs	r2, #0
 800f654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f658:	f7f0 ffa6 	bl	80005a8 <__aeabi_dmul>
 800f65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f660:	e7c3      	b.n	800f5ea <_dtoa_r+0x52a>
 800f662:	bf00      	nop
 800f664:	08012788 	.word	0x08012788
 800f668:	08012760 	.word	0x08012760
 800f66c:	3ff00000 	.word	0x3ff00000
 800f670:	40240000 	.word	0x40240000
 800f674:	401c0000 	.word	0x401c0000
 800f678:	40140000 	.word	0x40140000
 800f67c:	3fe00000 	.word	0x3fe00000
 800f680:	4630      	mov	r0, r6
 800f682:	4639      	mov	r1, r7
 800f684:	f7f0 ff90 	bl	80005a8 <__aeabi_dmul>
 800f688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f68e:	9c03      	ldr	r4, [sp, #12]
 800f690:	9314      	str	r3, [sp, #80]	; 0x50
 800f692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f696:	f7f1 fa37 	bl	8000b08 <__aeabi_d2iz>
 800f69a:	9015      	str	r0, [sp, #84]	; 0x54
 800f69c:	f7f0 ff1a 	bl	80004d4 <__aeabi_i2d>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6a8:	f7f0 fdc6 	bl	8000238 <__aeabi_dsub>
 800f6ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6ae:	3330      	adds	r3, #48	; 0x30
 800f6b0:	f804 3b01 	strb.w	r3, [r4], #1
 800f6b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6b6:	429c      	cmp	r4, r3
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	460f      	mov	r7, r1
 800f6bc:	f04f 0200 	mov.w	r2, #0
 800f6c0:	d124      	bne.n	800f70c <_dtoa_r+0x64c>
 800f6c2:	4ba4      	ldr	r3, [pc, #656]	; (800f954 <_dtoa_r+0x894>)
 800f6c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f6c8:	f7f0 fdb8 	bl	800023c <__adddf3>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	f7f1 f9f8 	bl	8000ac8 <__aeabi_dcmpgt>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d163      	bne.n	800f7a4 <_dtoa_r+0x6e4>
 800f6dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6e0:	499c      	ldr	r1, [pc, #624]	; (800f954 <_dtoa_r+0x894>)
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f7f0 fda8 	bl	8000238 <__aeabi_dsub>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	f7f1 f9cc 	bl	8000a8c <__aeabi_dcmplt>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	f43f af1d 	beq.w	800f534 <_dtoa_r+0x474>
 800f6fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f6fc:	1e7b      	subs	r3, r7, #1
 800f6fe:	9314      	str	r3, [sp, #80]	; 0x50
 800f700:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f704:	2b30      	cmp	r3, #48	; 0x30
 800f706:	d0f8      	beq.n	800f6fa <_dtoa_r+0x63a>
 800f708:	46c2      	mov	sl, r8
 800f70a:	e03b      	b.n	800f784 <_dtoa_r+0x6c4>
 800f70c:	4b92      	ldr	r3, [pc, #584]	; (800f958 <_dtoa_r+0x898>)
 800f70e:	f7f0 ff4b 	bl	80005a8 <__aeabi_dmul>
 800f712:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f716:	e7bc      	b.n	800f692 <_dtoa_r+0x5d2>
 800f718:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f71c:	9f03      	ldr	r7, [sp, #12]
 800f71e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f722:	4640      	mov	r0, r8
 800f724:	4649      	mov	r1, r9
 800f726:	f7f1 f869 	bl	80007fc <__aeabi_ddiv>
 800f72a:	f7f1 f9ed 	bl	8000b08 <__aeabi_d2iz>
 800f72e:	4604      	mov	r4, r0
 800f730:	f7f0 fed0 	bl	80004d4 <__aeabi_i2d>
 800f734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f738:	f7f0 ff36 	bl	80005a8 <__aeabi_dmul>
 800f73c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	4640      	mov	r0, r8
 800f746:	4649      	mov	r1, r9
 800f748:	f7f0 fd76 	bl	8000238 <__aeabi_dsub>
 800f74c:	f807 6b01 	strb.w	r6, [r7], #1
 800f750:	9e03      	ldr	r6, [sp, #12]
 800f752:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f756:	1bbe      	subs	r6, r7, r6
 800f758:	45b4      	cmp	ip, r6
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	d136      	bne.n	800f7ce <_dtoa_r+0x70e>
 800f760:	f7f0 fd6c 	bl	800023c <__adddf3>
 800f764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f768:	4680      	mov	r8, r0
 800f76a:	4689      	mov	r9, r1
 800f76c:	f7f1 f9ac 	bl	8000ac8 <__aeabi_dcmpgt>
 800f770:	bb58      	cbnz	r0, 800f7ca <_dtoa_r+0x70a>
 800f772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f776:	4640      	mov	r0, r8
 800f778:	4649      	mov	r1, r9
 800f77a:	f7f1 f97d 	bl	8000a78 <__aeabi_dcmpeq>
 800f77e:	b108      	cbz	r0, 800f784 <_dtoa_r+0x6c4>
 800f780:	07e1      	lsls	r1, r4, #31
 800f782:	d422      	bmi.n	800f7ca <_dtoa_r+0x70a>
 800f784:	4628      	mov	r0, r5
 800f786:	4659      	mov	r1, fp
 800f788:	f000 fe4c 	bl	8010424 <_Bfree>
 800f78c:	2300      	movs	r3, #0
 800f78e:	703b      	strb	r3, [r7, #0]
 800f790:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f792:	f10a 0001 	add.w	r0, sl, #1
 800f796:	6018      	str	r0, [r3, #0]
 800f798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f43f acdd 	beq.w	800f15a <_dtoa_r+0x9a>
 800f7a0:	601f      	str	r7, [r3, #0]
 800f7a2:	e4da      	b.n	800f15a <_dtoa_r+0x9a>
 800f7a4:	4627      	mov	r7, r4
 800f7a6:	463b      	mov	r3, r7
 800f7a8:	461f      	mov	r7, r3
 800f7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7ae:	2a39      	cmp	r2, #57	; 0x39
 800f7b0:	d107      	bne.n	800f7c2 <_dtoa_r+0x702>
 800f7b2:	9a03      	ldr	r2, [sp, #12]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d1f7      	bne.n	800f7a8 <_dtoa_r+0x6e8>
 800f7b8:	9903      	ldr	r1, [sp, #12]
 800f7ba:	2230      	movs	r2, #48	; 0x30
 800f7bc:	f108 0801 	add.w	r8, r8, #1
 800f7c0:	700a      	strb	r2, [r1, #0]
 800f7c2:	781a      	ldrb	r2, [r3, #0]
 800f7c4:	3201      	adds	r2, #1
 800f7c6:	701a      	strb	r2, [r3, #0]
 800f7c8:	e79e      	b.n	800f708 <_dtoa_r+0x648>
 800f7ca:	46d0      	mov	r8, sl
 800f7cc:	e7eb      	b.n	800f7a6 <_dtoa_r+0x6e6>
 800f7ce:	4b62      	ldr	r3, [pc, #392]	; (800f958 <_dtoa_r+0x898>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f7f0 fee9 	bl	80005a8 <__aeabi_dmul>
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4680      	mov	r8, r0
 800f7dc:	4689      	mov	r9, r1
 800f7de:	f7f1 f94b 	bl	8000a78 <__aeabi_dcmpeq>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d09b      	beq.n	800f71e <_dtoa_r+0x65e>
 800f7e6:	e7cd      	b.n	800f784 <_dtoa_r+0x6c4>
 800f7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7ea:	2a00      	cmp	r2, #0
 800f7ec:	f000 80d0 	beq.w	800f990 <_dtoa_r+0x8d0>
 800f7f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f7f2:	2a01      	cmp	r2, #1
 800f7f4:	f300 80b2 	bgt.w	800f95c <_dtoa_r+0x89c>
 800f7f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7fa:	2a00      	cmp	r2, #0
 800f7fc:	f000 80a6 	beq.w	800f94c <_dtoa_r+0x88c>
 800f800:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f806:	9f06      	ldr	r7, [sp, #24]
 800f808:	9a06      	ldr	r2, [sp, #24]
 800f80a:	441a      	add	r2, r3
 800f80c:	9206      	str	r2, [sp, #24]
 800f80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f810:	2101      	movs	r1, #1
 800f812:	441a      	add	r2, r3
 800f814:	4628      	mov	r0, r5
 800f816:	9209      	str	r2, [sp, #36]	; 0x24
 800f818:	f000 ff04 	bl	8010624 <__i2b>
 800f81c:	4606      	mov	r6, r0
 800f81e:	2f00      	cmp	r7, #0
 800f820:	dd0c      	ble.n	800f83c <_dtoa_r+0x77c>
 800f822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd09      	ble.n	800f83c <_dtoa_r+0x77c>
 800f828:	42bb      	cmp	r3, r7
 800f82a:	9a06      	ldr	r2, [sp, #24]
 800f82c:	bfa8      	it	ge
 800f82e:	463b      	movge	r3, r7
 800f830:	1ad2      	subs	r2, r2, r3
 800f832:	9206      	str	r2, [sp, #24]
 800f834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f836:	1aff      	subs	r7, r7, r3
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	9309      	str	r3, [sp, #36]	; 0x24
 800f83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f83e:	b1f3      	cbz	r3, 800f87e <_dtoa_r+0x7be>
 800f840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 80a8 	beq.w	800f998 <_dtoa_r+0x8d8>
 800f848:	2c00      	cmp	r4, #0
 800f84a:	dd10      	ble.n	800f86e <_dtoa_r+0x7ae>
 800f84c:	4631      	mov	r1, r6
 800f84e:	4622      	mov	r2, r4
 800f850:	4628      	mov	r0, r5
 800f852:	f000 ffa5 	bl	80107a0 <__pow5mult>
 800f856:	465a      	mov	r2, fp
 800f858:	4601      	mov	r1, r0
 800f85a:	4606      	mov	r6, r0
 800f85c:	4628      	mov	r0, r5
 800f85e:	f000 fef7 	bl	8010650 <__multiply>
 800f862:	4659      	mov	r1, fp
 800f864:	4680      	mov	r8, r0
 800f866:	4628      	mov	r0, r5
 800f868:	f000 fddc 	bl	8010424 <_Bfree>
 800f86c:	46c3      	mov	fp, r8
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	1b1a      	subs	r2, r3, r4
 800f872:	d004      	beq.n	800f87e <_dtoa_r+0x7be>
 800f874:	4659      	mov	r1, fp
 800f876:	4628      	mov	r0, r5
 800f878:	f000 ff92 	bl	80107a0 <__pow5mult>
 800f87c:	4683      	mov	fp, r0
 800f87e:	2101      	movs	r1, #1
 800f880:	4628      	mov	r0, r5
 800f882:	f000 fecf 	bl	8010624 <__i2b>
 800f886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f888:	2b00      	cmp	r3, #0
 800f88a:	4604      	mov	r4, r0
 800f88c:	f340 8086 	ble.w	800f99c <_dtoa_r+0x8dc>
 800f890:	461a      	mov	r2, r3
 800f892:	4601      	mov	r1, r0
 800f894:	4628      	mov	r0, r5
 800f896:	f000 ff83 	bl	80107a0 <__pow5mult>
 800f89a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	4604      	mov	r4, r0
 800f8a0:	dd7f      	ble.n	800f9a2 <_dtoa_r+0x8e2>
 800f8a2:	f04f 0800 	mov.w	r8, #0
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8ac:	6918      	ldr	r0, [r3, #16]
 800f8ae:	f000 fe6b 	bl	8010588 <__hi0bits>
 800f8b2:	f1c0 0020 	rsb	r0, r0, #32
 800f8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b8:	4418      	add	r0, r3
 800f8ba:	f010 001f 	ands.w	r0, r0, #31
 800f8be:	f000 8092 	beq.w	800f9e6 <_dtoa_r+0x926>
 800f8c2:	f1c0 0320 	rsb	r3, r0, #32
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	f340 808a 	ble.w	800f9e0 <_dtoa_r+0x920>
 800f8cc:	f1c0 001c 	rsb	r0, r0, #28
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	4403      	add	r3, r0
 800f8d4:	9306      	str	r3, [sp, #24]
 800f8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d8:	4403      	add	r3, r0
 800f8da:	4407      	add	r7, r0
 800f8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f8de:	9b06      	ldr	r3, [sp, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dd05      	ble.n	800f8f0 <_dtoa_r+0x830>
 800f8e4:	4659      	mov	r1, fp
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f000 ffb3 	bl	8010854 <__lshift>
 800f8ee:	4683      	mov	fp, r0
 800f8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	dd05      	ble.n	800f902 <_dtoa_r+0x842>
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f000 ffaa 	bl	8010854 <__lshift>
 800f900:	4604      	mov	r4, r0
 800f902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f904:	2b00      	cmp	r3, #0
 800f906:	d070      	beq.n	800f9ea <_dtoa_r+0x92a>
 800f908:	4621      	mov	r1, r4
 800f90a:	4658      	mov	r0, fp
 800f90c:	f001 f812 	bl	8010934 <__mcmp>
 800f910:	2800      	cmp	r0, #0
 800f912:	da6a      	bge.n	800f9ea <_dtoa_r+0x92a>
 800f914:	2300      	movs	r3, #0
 800f916:	4659      	mov	r1, fp
 800f918:	220a      	movs	r2, #10
 800f91a:	4628      	mov	r0, r5
 800f91c:	f000 fda4 	bl	8010468 <__multadd>
 800f920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f922:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f926:	4683      	mov	fp, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 8194 	beq.w	800fc56 <_dtoa_r+0xb96>
 800f92e:	4631      	mov	r1, r6
 800f930:	2300      	movs	r3, #0
 800f932:	220a      	movs	r2, #10
 800f934:	4628      	mov	r0, r5
 800f936:	f000 fd97 	bl	8010468 <__multadd>
 800f93a:	f1b9 0f00 	cmp.w	r9, #0
 800f93e:	4606      	mov	r6, r0
 800f940:	f300 8093 	bgt.w	800fa6a <_dtoa_r+0x9aa>
 800f944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f946:	2b02      	cmp	r3, #2
 800f948:	dc57      	bgt.n	800f9fa <_dtoa_r+0x93a>
 800f94a:	e08e      	b.n	800fa6a <_dtoa_r+0x9aa>
 800f94c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f94e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f952:	e757      	b.n	800f804 <_dtoa_r+0x744>
 800f954:	3fe00000 	.word	0x3fe00000
 800f958:	40240000 	.word	0x40240000
 800f95c:	9b08      	ldr	r3, [sp, #32]
 800f95e:	1e5c      	subs	r4, r3, #1
 800f960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f962:	42a3      	cmp	r3, r4
 800f964:	bfbf      	itttt	lt
 800f966:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f968:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f96a:	1ae2      	sublt	r2, r4, r3
 800f96c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f96e:	bfb6      	itet	lt
 800f970:	189b      	addlt	r3, r3, r2
 800f972:	1b1c      	subge	r4, r3, r4
 800f974:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f976:	9b08      	ldr	r3, [sp, #32]
 800f978:	bfb8      	it	lt
 800f97a:	2400      	movlt	r4, #0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bfb9      	ittee	lt
 800f980:	9b06      	ldrlt	r3, [sp, #24]
 800f982:	9a08      	ldrlt	r2, [sp, #32]
 800f984:	9f06      	ldrge	r7, [sp, #24]
 800f986:	9b08      	ldrge	r3, [sp, #32]
 800f988:	bfbc      	itt	lt
 800f98a:	1a9f      	sublt	r7, r3, r2
 800f98c:	2300      	movlt	r3, #0
 800f98e:	e73b      	b.n	800f808 <_dtoa_r+0x748>
 800f990:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f992:	9f06      	ldr	r7, [sp, #24]
 800f994:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f996:	e742      	b.n	800f81e <_dtoa_r+0x75e>
 800f998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f99a:	e76b      	b.n	800f874 <_dtoa_r+0x7b4>
 800f99c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	dc19      	bgt.n	800f9d6 <_dtoa_r+0x916>
 800f9a2:	9b04      	ldr	r3, [sp, #16]
 800f9a4:	b9bb      	cbnz	r3, 800f9d6 <_dtoa_r+0x916>
 800f9a6:	9b05      	ldr	r3, [sp, #20]
 800f9a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9ac:	b99b      	cbnz	r3, 800f9d6 <_dtoa_r+0x916>
 800f9ae:	9b05      	ldr	r3, [sp, #20]
 800f9b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9b4:	0d1b      	lsrs	r3, r3, #20
 800f9b6:	051b      	lsls	r3, r3, #20
 800f9b8:	b183      	cbz	r3, 800f9dc <_dtoa_r+0x91c>
 800f9ba:	9b06      	ldr	r3, [sp, #24]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	9306      	str	r3, [sp, #24]
 800f9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c6:	f04f 0801 	mov.w	r8, #1
 800f9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f47f af6a 	bne.w	800f8a6 <_dtoa_r+0x7e6>
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	e76f      	b.n	800f8b6 <_dtoa_r+0x7f6>
 800f9d6:	f04f 0800 	mov.w	r8, #0
 800f9da:	e7f6      	b.n	800f9ca <_dtoa_r+0x90a>
 800f9dc:	4698      	mov	r8, r3
 800f9de:	e7f4      	b.n	800f9ca <_dtoa_r+0x90a>
 800f9e0:	f43f af7d 	beq.w	800f8de <_dtoa_r+0x81e>
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	301c      	adds	r0, #28
 800f9e8:	e772      	b.n	800f8d0 <_dtoa_r+0x810>
 800f9ea:	9b08      	ldr	r3, [sp, #32]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dc36      	bgt.n	800fa5e <_dtoa_r+0x99e>
 800f9f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	dd33      	ble.n	800fa5e <_dtoa_r+0x99e>
 800f9f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9fa:	f1b9 0f00 	cmp.w	r9, #0
 800f9fe:	d10d      	bne.n	800fa1c <_dtoa_r+0x95c>
 800fa00:	4621      	mov	r1, r4
 800fa02:	464b      	mov	r3, r9
 800fa04:	2205      	movs	r2, #5
 800fa06:	4628      	mov	r0, r5
 800fa08:	f000 fd2e 	bl	8010468 <__multadd>
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	4604      	mov	r4, r0
 800fa10:	4658      	mov	r0, fp
 800fa12:	f000 ff8f 	bl	8010934 <__mcmp>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f73f adb8 	bgt.w	800f58c <_dtoa_r+0x4cc>
 800fa1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fa1e:	9f03      	ldr	r7, [sp, #12]
 800fa20:	ea6f 0a03 	mvn.w	sl, r3
 800fa24:	f04f 0800 	mov.w	r8, #0
 800fa28:	4621      	mov	r1, r4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f000 fcfa 	bl	8010424 <_Bfree>
 800fa30:	2e00      	cmp	r6, #0
 800fa32:	f43f aea7 	beq.w	800f784 <_dtoa_r+0x6c4>
 800fa36:	f1b8 0f00 	cmp.w	r8, #0
 800fa3a:	d005      	beq.n	800fa48 <_dtoa_r+0x988>
 800fa3c:	45b0      	cmp	r8, r6
 800fa3e:	d003      	beq.n	800fa48 <_dtoa_r+0x988>
 800fa40:	4641      	mov	r1, r8
 800fa42:	4628      	mov	r0, r5
 800fa44:	f000 fcee 	bl	8010424 <_Bfree>
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 fcea 	bl	8010424 <_Bfree>
 800fa50:	e698      	b.n	800f784 <_dtoa_r+0x6c4>
 800fa52:	2400      	movs	r4, #0
 800fa54:	4626      	mov	r6, r4
 800fa56:	e7e1      	b.n	800fa1c <_dtoa_r+0x95c>
 800fa58:	46c2      	mov	sl, r8
 800fa5a:	4626      	mov	r6, r4
 800fa5c:	e596      	b.n	800f58c <_dtoa_r+0x4cc>
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f000 80fd 	beq.w	800fc64 <_dtoa_r+0xba4>
 800fa6a:	2f00      	cmp	r7, #0
 800fa6c:	dd05      	ble.n	800fa7a <_dtoa_r+0x9ba>
 800fa6e:	4631      	mov	r1, r6
 800fa70:	463a      	mov	r2, r7
 800fa72:	4628      	mov	r0, r5
 800fa74:	f000 feee 	bl	8010854 <__lshift>
 800fa78:	4606      	mov	r6, r0
 800fa7a:	f1b8 0f00 	cmp.w	r8, #0
 800fa7e:	d05c      	beq.n	800fb3a <_dtoa_r+0xa7a>
 800fa80:	6871      	ldr	r1, [r6, #4]
 800fa82:	4628      	mov	r0, r5
 800fa84:	f000 fc8e 	bl	80103a4 <_Balloc>
 800fa88:	4607      	mov	r7, r0
 800fa8a:	b928      	cbnz	r0, 800fa98 <_dtoa_r+0x9d8>
 800fa8c:	4b80      	ldr	r3, [pc, #512]	; (800fc90 <_dtoa_r+0xbd0>)
 800fa8e:	4602      	mov	r2, r0
 800fa90:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa94:	f7ff bb28 	b.w	800f0e8 <_dtoa_r+0x28>
 800fa98:	6932      	ldr	r2, [r6, #16]
 800fa9a:	3202      	adds	r2, #2
 800fa9c:	0092      	lsls	r2, r2, #2
 800fa9e:	f106 010c 	add.w	r1, r6, #12
 800faa2:	300c      	adds	r0, #12
 800faa4:	f7fd fcea 	bl	800d47c <memcpy>
 800faa8:	2201      	movs	r2, #1
 800faaa:	4639      	mov	r1, r7
 800faac:	4628      	mov	r0, r5
 800faae:	f000 fed1 	bl	8010854 <__lshift>
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	3301      	adds	r3, #1
 800fab6:	9308      	str	r3, [sp, #32]
 800fab8:	9b03      	ldr	r3, [sp, #12]
 800faba:	444b      	add	r3, r9
 800fabc:	930a      	str	r3, [sp, #40]	; 0x28
 800fabe:	9b04      	ldr	r3, [sp, #16]
 800fac0:	f003 0301 	and.w	r3, r3, #1
 800fac4:	46b0      	mov	r8, r6
 800fac6:	9309      	str	r3, [sp, #36]	; 0x24
 800fac8:	4606      	mov	r6, r0
 800faca:	9b08      	ldr	r3, [sp, #32]
 800facc:	4621      	mov	r1, r4
 800face:	3b01      	subs	r3, #1
 800fad0:	4658      	mov	r0, fp
 800fad2:	9304      	str	r3, [sp, #16]
 800fad4:	f7ff fa6a 	bl	800efac <quorem>
 800fad8:	4603      	mov	r3, r0
 800fada:	3330      	adds	r3, #48	; 0x30
 800fadc:	9006      	str	r0, [sp, #24]
 800fade:	4641      	mov	r1, r8
 800fae0:	4658      	mov	r0, fp
 800fae2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fae4:	f000 ff26 	bl	8010934 <__mcmp>
 800fae8:	4632      	mov	r2, r6
 800faea:	4681      	mov	r9, r0
 800faec:	4621      	mov	r1, r4
 800faee:	4628      	mov	r0, r5
 800faf0:	f000 ff3c 	bl	801096c <__mdiff>
 800faf4:	68c2      	ldr	r2, [r0, #12]
 800faf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800faf8:	4607      	mov	r7, r0
 800fafa:	bb02      	cbnz	r2, 800fb3e <_dtoa_r+0xa7e>
 800fafc:	4601      	mov	r1, r0
 800fafe:	4658      	mov	r0, fp
 800fb00:	f000 ff18 	bl	8010934 <__mcmp>
 800fb04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb06:	4602      	mov	r2, r0
 800fb08:	4639      	mov	r1, r7
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fb10:	f000 fc88 	bl	8010424 <_Bfree>
 800fb14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb18:	9f08      	ldr	r7, [sp, #32]
 800fb1a:	ea43 0102 	orr.w	r1, r3, r2
 800fb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb20:	430b      	orrs	r3, r1
 800fb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb24:	d10d      	bne.n	800fb42 <_dtoa_r+0xa82>
 800fb26:	2b39      	cmp	r3, #57	; 0x39
 800fb28:	d029      	beq.n	800fb7e <_dtoa_r+0xabe>
 800fb2a:	f1b9 0f00 	cmp.w	r9, #0
 800fb2e:	dd01      	ble.n	800fb34 <_dtoa_r+0xa74>
 800fb30:	9b06      	ldr	r3, [sp, #24]
 800fb32:	3331      	adds	r3, #49	; 0x31
 800fb34:	9a04      	ldr	r2, [sp, #16]
 800fb36:	7013      	strb	r3, [r2, #0]
 800fb38:	e776      	b.n	800fa28 <_dtoa_r+0x968>
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	e7b9      	b.n	800fab2 <_dtoa_r+0x9f2>
 800fb3e:	2201      	movs	r2, #1
 800fb40:	e7e2      	b.n	800fb08 <_dtoa_r+0xa48>
 800fb42:	f1b9 0f00 	cmp.w	r9, #0
 800fb46:	db06      	blt.n	800fb56 <_dtoa_r+0xa96>
 800fb48:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fb4a:	ea41 0909 	orr.w	r9, r1, r9
 800fb4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb50:	ea59 0101 	orrs.w	r1, r9, r1
 800fb54:	d120      	bne.n	800fb98 <_dtoa_r+0xad8>
 800fb56:	2a00      	cmp	r2, #0
 800fb58:	ddec      	ble.n	800fb34 <_dtoa_r+0xa74>
 800fb5a:	4659      	mov	r1, fp
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	4628      	mov	r0, r5
 800fb60:	9308      	str	r3, [sp, #32]
 800fb62:	f000 fe77 	bl	8010854 <__lshift>
 800fb66:	4621      	mov	r1, r4
 800fb68:	4683      	mov	fp, r0
 800fb6a:	f000 fee3 	bl	8010934 <__mcmp>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	9b08      	ldr	r3, [sp, #32]
 800fb72:	dc02      	bgt.n	800fb7a <_dtoa_r+0xaba>
 800fb74:	d1de      	bne.n	800fb34 <_dtoa_r+0xa74>
 800fb76:	07da      	lsls	r2, r3, #31
 800fb78:	d5dc      	bpl.n	800fb34 <_dtoa_r+0xa74>
 800fb7a:	2b39      	cmp	r3, #57	; 0x39
 800fb7c:	d1d8      	bne.n	800fb30 <_dtoa_r+0xa70>
 800fb7e:	9a04      	ldr	r2, [sp, #16]
 800fb80:	2339      	movs	r3, #57	; 0x39
 800fb82:	7013      	strb	r3, [r2, #0]
 800fb84:	463b      	mov	r3, r7
 800fb86:	461f      	mov	r7, r3
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fb8e:	2a39      	cmp	r2, #57	; 0x39
 800fb90:	d050      	beq.n	800fc34 <_dtoa_r+0xb74>
 800fb92:	3201      	adds	r2, #1
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	e747      	b.n	800fa28 <_dtoa_r+0x968>
 800fb98:	2a00      	cmp	r2, #0
 800fb9a:	dd03      	ble.n	800fba4 <_dtoa_r+0xae4>
 800fb9c:	2b39      	cmp	r3, #57	; 0x39
 800fb9e:	d0ee      	beq.n	800fb7e <_dtoa_r+0xabe>
 800fba0:	3301      	adds	r3, #1
 800fba2:	e7c7      	b.n	800fb34 <_dtoa_r+0xa74>
 800fba4:	9a08      	ldr	r2, [sp, #32]
 800fba6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fba8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fbac:	428a      	cmp	r2, r1
 800fbae:	d02a      	beq.n	800fc06 <_dtoa_r+0xb46>
 800fbb0:	4659      	mov	r1, fp
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	220a      	movs	r2, #10
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f000 fc56 	bl	8010468 <__multadd>
 800fbbc:	45b0      	cmp	r8, r6
 800fbbe:	4683      	mov	fp, r0
 800fbc0:	f04f 0300 	mov.w	r3, #0
 800fbc4:	f04f 020a 	mov.w	r2, #10
 800fbc8:	4641      	mov	r1, r8
 800fbca:	4628      	mov	r0, r5
 800fbcc:	d107      	bne.n	800fbde <_dtoa_r+0xb1e>
 800fbce:	f000 fc4b 	bl	8010468 <__multadd>
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	9b08      	ldr	r3, [sp, #32]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	9308      	str	r3, [sp, #32]
 800fbdc:	e775      	b.n	800faca <_dtoa_r+0xa0a>
 800fbde:	f000 fc43 	bl	8010468 <__multadd>
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	220a      	movs	r2, #10
 800fbea:	4628      	mov	r0, r5
 800fbec:	f000 fc3c 	bl	8010468 <__multadd>
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	e7f0      	b.n	800fbd6 <_dtoa_r+0xb16>
 800fbf4:	f1b9 0f00 	cmp.w	r9, #0
 800fbf8:	9a03      	ldr	r2, [sp, #12]
 800fbfa:	bfcc      	ite	gt
 800fbfc:	464f      	movgt	r7, r9
 800fbfe:	2701      	movle	r7, #1
 800fc00:	4417      	add	r7, r2
 800fc02:	f04f 0800 	mov.w	r8, #0
 800fc06:	4659      	mov	r1, fp
 800fc08:	2201      	movs	r2, #1
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	9308      	str	r3, [sp, #32]
 800fc0e:	f000 fe21 	bl	8010854 <__lshift>
 800fc12:	4621      	mov	r1, r4
 800fc14:	4683      	mov	fp, r0
 800fc16:	f000 fe8d 	bl	8010934 <__mcmp>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	dcb2      	bgt.n	800fb84 <_dtoa_r+0xac4>
 800fc1e:	d102      	bne.n	800fc26 <_dtoa_r+0xb66>
 800fc20:	9b08      	ldr	r3, [sp, #32]
 800fc22:	07db      	lsls	r3, r3, #31
 800fc24:	d4ae      	bmi.n	800fb84 <_dtoa_r+0xac4>
 800fc26:	463b      	mov	r3, r7
 800fc28:	461f      	mov	r7, r3
 800fc2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc2e:	2a30      	cmp	r2, #48	; 0x30
 800fc30:	d0fa      	beq.n	800fc28 <_dtoa_r+0xb68>
 800fc32:	e6f9      	b.n	800fa28 <_dtoa_r+0x968>
 800fc34:	9a03      	ldr	r2, [sp, #12]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d1a5      	bne.n	800fb86 <_dtoa_r+0xac6>
 800fc3a:	f10a 0a01 	add.w	sl, sl, #1
 800fc3e:	2331      	movs	r3, #49	; 0x31
 800fc40:	e779      	b.n	800fb36 <_dtoa_r+0xa76>
 800fc42:	4b14      	ldr	r3, [pc, #80]	; (800fc94 <_dtoa_r+0xbd4>)
 800fc44:	f7ff baa7 	b.w	800f196 <_dtoa_r+0xd6>
 800fc48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f47f aa80 	bne.w	800f150 <_dtoa_r+0x90>
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <_dtoa_r+0xbd8>)
 800fc52:	f7ff baa0 	b.w	800f196 <_dtoa_r+0xd6>
 800fc56:	f1b9 0f00 	cmp.w	r9, #0
 800fc5a:	dc03      	bgt.n	800fc64 <_dtoa_r+0xba4>
 800fc5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	f73f aecb 	bgt.w	800f9fa <_dtoa_r+0x93a>
 800fc64:	9f03      	ldr	r7, [sp, #12]
 800fc66:	4621      	mov	r1, r4
 800fc68:	4658      	mov	r0, fp
 800fc6a:	f7ff f99f 	bl	800efac <quorem>
 800fc6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fc72:	f807 3b01 	strb.w	r3, [r7], #1
 800fc76:	9a03      	ldr	r2, [sp, #12]
 800fc78:	1aba      	subs	r2, r7, r2
 800fc7a:	4591      	cmp	r9, r2
 800fc7c:	ddba      	ble.n	800fbf4 <_dtoa_r+0xb34>
 800fc7e:	4659      	mov	r1, fp
 800fc80:	2300      	movs	r3, #0
 800fc82:	220a      	movs	r2, #10
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 fbef 	bl	8010468 <__multadd>
 800fc8a:	4683      	mov	fp, r0
 800fc8c:	e7eb      	b.n	800fc66 <_dtoa_r+0xba6>
 800fc8e:	bf00      	nop
 800fc90:	08012675 	.word	0x08012675
 800fc94:	08012454 	.word	0x08012454
 800fc98:	080125f6 	.word	0x080125f6

0800fc9c <rshift>:
 800fc9c:	6903      	ldr	r3, [r0, #16]
 800fc9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fca6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcaa:	f100 0414 	add.w	r4, r0, #20
 800fcae:	dd45      	ble.n	800fd3c <rshift+0xa0>
 800fcb0:	f011 011f 	ands.w	r1, r1, #31
 800fcb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fcb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fcbc:	d10c      	bne.n	800fcd8 <rshift+0x3c>
 800fcbe:	f100 0710 	add.w	r7, r0, #16
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	42b1      	cmp	r1, r6
 800fcc6:	d334      	bcc.n	800fd32 <rshift+0x96>
 800fcc8:	1a9b      	subs	r3, r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	1eea      	subs	r2, r5, #3
 800fcce:	4296      	cmp	r6, r2
 800fcd0:	bf38      	it	cc
 800fcd2:	2300      	movcc	r3, #0
 800fcd4:	4423      	add	r3, r4
 800fcd6:	e015      	b.n	800fd04 <rshift+0x68>
 800fcd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fcdc:	f1c1 0820 	rsb	r8, r1, #32
 800fce0:	40cf      	lsrs	r7, r1
 800fce2:	f105 0e04 	add.w	lr, r5, #4
 800fce6:	46a1      	mov	r9, r4
 800fce8:	4576      	cmp	r6, lr
 800fcea:	46f4      	mov	ip, lr
 800fcec:	d815      	bhi.n	800fd1a <rshift+0x7e>
 800fcee:	1a9a      	subs	r2, r3, r2
 800fcf0:	0092      	lsls	r2, r2, #2
 800fcf2:	3a04      	subs	r2, #4
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	42ae      	cmp	r6, r5
 800fcf8:	bf38      	it	cc
 800fcfa:	2200      	movcc	r2, #0
 800fcfc:	18a3      	adds	r3, r4, r2
 800fcfe:	50a7      	str	r7, [r4, r2]
 800fd00:	b107      	cbz	r7, 800fd04 <rshift+0x68>
 800fd02:	3304      	adds	r3, #4
 800fd04:	1b1a      	subs	r2, r3, r4
 800fd06:	42a3      	cmp	r3, r4
 800fd08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd0c:	bf08      	it	eq
 800fd0e:	2300      	moveq	r3, #0
 800fd10:	6102      	str	r2, [r0, #16]
 800fd12:	bf08      	it	eq
 800fd14:	6143      	streq	r3, [r0, #20]
 800fd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	f8dc c000 	ldr.w	ip, [ip]
 800fd1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd22:	ea4c 0707 	orr.w	r7, ip, r7
 800fd26:	f849 7b04 	str.w	r7, [r9], #4
 800fd2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd2e:	40cf      	lsrs	r7, r1
 800fd30:	e7da      	b.n	800fce8 <rshift+0x4c>
 800fd32:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd36:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd3a:	e7c3      	b.n	800fcc4 <rshift+0x28>
 800fd3c:	4623      	mov	r3, r4
 800fd3e:	e7e1      	b.n	800fd04 <rshift+0x68>

0800fd40 <__hexdig_fun>:
 800fd40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd44:	2b09      	cmp	r3, #9
 800fd46:	d802      	bhi.n	800fd4e <__hexdig_fun+0xe>
 800fd48:	3820      	subs	r0, #32
 800fd4a:	b2c0      	uxtb	r0, r0
 800fd4c:	4770      	bx	lr
 800fd4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fd52:	2b05      	cmp	r3, #5
 800fd54:	d801      	bhi.n	800fd5a <__hexdig_fun+0x1a>
 800fd56:	3847      	subs	r0, #71	; 0x47
 800fd58:	e7f7      	b.n	800fd4a <__hexdig_fun+0xa>
 800fd5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd5e:	2b05      	cmp	r3, #5
 800fd60:	d801      	bhi.n	800fd66 <__hexdig_fun+0x26>
 800fd62:	3827      	subs	r0, #39	; 0x27
 800fd64:	e7f1      	b.n	800fd4a <__hexdig_fun+0xa>
 800fd66:	2000      	movs	r0, #0
 800fd68:	4770      	bx	lr
	...

0800fd6c <__gethex>:
 800fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	b08b      	sub	sp, #44	; 0x2c
 800fd72:	468b      	mov	fp, r1
 800fd74:	9305      	str	r3, [sp, #20]
 800fd76:	4bb2      	ldr	r3, [pc, #712]	; (8010040 <__gethex+0x2d4>)
 800fd78:	9002      	str	r0, [sp, #8]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	4690      	mov	r8, r2
 800fd82:	f7f0 f9fd 	bl	8000180 <strlen>
 800fd86:	9b03      	ldr	r3, [sp, #12]
 800fd88:	f8db 2000 	ldr.w	r2, [fp]
 800fd8c:	4403      	add	r3, r0
 800fd8e:	4682      	mov	sl, r0
 800fd90:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fd94:	9306      	str	r3, [sp, #24]
 800fd96:	1c93      	adds	r3, r2, #2
 800fd98:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fd9c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fda0:	32fe      	adds	r2, #254	; 0xfe
 800fda2:	18d1      	adds	r1, r2, r3
 800fda4:	461f      	mov	r7, r3
 800fda6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fdaa:	9101      	str	r1, [sp, #4]
 800fdac:	2830      	cmp	r0, #48	; 0x30
 800fdae:	d0f8      	beq.n	800fda2 <__gethex+0x36>
 800fdb0:	f7ff ffc6 	bl	800fd40 <__hexdig_fun>
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d13a      	bne.n	800fe30 <__gethex+0xc4>
 800fdba:	9903      	ldr	r1, [sp, #12]
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	f7fe f9fe 	bl	800e1c0 <strncmp>
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d166      	bne.n	800fe98 <__gethex+0x12c>
 800fdca:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fdce:	eb07 060a 	add.w	r6, r7, sl
 800fdd2:	f7ff ffb5 	bl	800fd40 <__hexdig_fun>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d060      	beq.n	800fe9c <__gethex+0x130>
 800fdda:	4633      	mov	r3, r6
 800fddc:	7818      	ldrb	r0, [r3, #0]
 800fdde:	2830      	cmp	r0, #48	; 0x30
 800fde0:	461f      	mov	r7, r3
 800fde2:	f103 0301 	add.w	r3, r3, #1
 800fde6:	d0f9      	beq.n	800fddc <__gethex+0x70>
 800fde8:	f7ff ffaa 	bl	800fd40 <__hexdig_fun>
 800fdec:	2301      	movs	r3, #1
 800fdee:	fab0 f480 	clz	r4, r0
 800fdf2:	0964      	lsrs	r4, r4, #5
 800fdf4:	4635      	mov	r5, r6
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	463a      	mov	r2, r7
 800fdfa:	4616      	mov	r6, r2
 800fdfc:	3201      	adds	r2, #1
 800fdfe:	7830      	ldrb	r0, [r6, #0]
 800fe00:	f7ff ff9e 	bl	800fd40 <__hexdig_fun>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d1f8      	bne.n	800fdfa <__gethex+0x8e>
 800fe08:	9903      	ldr	r1, [sp, #12]
 800fe0a:	4652      	mov	r2, sl
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f7fe f9d7 	bl	800e1c0 <strncmp>
 800fe12:	b980      	cbnz	r0, 800fe36 <__gethex+0xca>
 800fe14:	b94d      	cbnz	r5, 800fe2a <__gethex+0xbe>
 800fe16:	eb06 050a 	add.w	r5, r6, sl
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	4616      	mov	r6, r2
 800fe1e:	3201      	adds	r2, #1
 800fe20:	7830      	ldrb	r0, [r6, #0]
 800fe22:	f7ff ff8d 	bl	800fd40 <__hexdig_fun>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d1f8      	bne.n	800fe1c <__gethex+0xb0>
 800fe2a:	1bad      	subs	r5, r5, r6
 800fe2c:	00ad      	lsls	r5, r5, #2
 800fe2e:	e004      	b.n	800fe3a <__gethex+0xce>
 800fe30:	2400      	movs	r4, #0
 800fe32:	4625      	mov	r5, r4
 800fe34:	e7e0      	b.n	800fdf8 <__gethex+0x8c>
 800fe36:	2d00      	cmp	r5, #0
 800fe38:	d1f7      	bne.n	800fe2a <__gethex+0xbe>
 800fe3a:	7833      	ldrb	r3, [r6, #0]
 800fe3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe40:	2b50      	cmp	r3, #80	; 0x50
 800fe42:	d139      	bne.n	800feb8 <__gethex+0x14c>
 800fe44:	7873      	ldrb	r3, [r6, #1]
 800fe46:	2b2b      	cmp	r3, #43	; 0x2b
 800fe48:	d02a      	beq.n	800fea0 <__gethex+0x134>
 800fe4a:	2b2d      	cmp	r3, #45	; 0x2d
 800fe4c:	d02c      	beq.n	800fea8 <__gethex+0x13c>
 800fe4e:	1c71      	adds	r1, r6, #1
 800fe50:	f04f 0900 	mov.w	r9, #0
 800fe54:	7808      	ldrb	r0, [r1, #0]
 800fe56:	f7ff ff73 	bl	800fd40 <__hexdig_fun>
 800fe5a:	1e43      	subs	r3, r0, #1
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	2b18      	cmp	r3, #24
 800fe60:	d82a      	bhi.n	800feb8 <__gethex+0x14c>
 800fe62:	f1a0 0210 	sub.w	r2, r0, #16
 800fe66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe6a:	f7ff ff69 	bl	800fd40 <__hexdig_fun>
 800fe6e:	1e43      	subs	r3, r0, #1
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b18      	cmp	r3, #24
 800fe74:	d91b      	bls.n	800feae <__gethex+0x142>
 800fe76:	f1b9 0f00 	cmp.w	r9, #0
 800fe7a:	d000      	beq.n	800fe7e <__gethex+0x112>
 800fe7c:	4252      	negs	r2, r2
 800fe7e:	4415      	add	r5, r2
 800fe80:	f8cb 1000 	str.w	r1, [fp]
 800fe84:	b1d4      	cbz	r4, 800febc <__gethex+0x150>
 800fe86:	9b01      	ldr	r3, [sp, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bf14      	ite	ne
 800fe8c:	2700      	movne	r7, #0
 800fe8e:	2706      	moveq	r7, #6
 800fe90:	4638      	mov	r0, r7
 800fe92:	b00b      	add	sp, #44	; 0x2c
 800fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe98:	463e      	mov	r6, r7
 800fe9a:	4625      	mov	r5, r4
 800fe9c:	2401      	movs	r4, #1
 800fe9e:	e7cc      	b.n	800fe3a <__gethex+0xce>
 800fea0:	f04f 0900 	mov.w	r9, #0
 800fea4:	1cb1      	adds	r1, r6, #2
 800fea6:	e7d5      	b.n	800fe54 <__gethex+0xe8>
 800fea8:	f04f 0901 	mov.w	r9, #1
 800feac:	e7fa      	b.n	800fea4 <__gethex+0x138>
 800feae:	230a      	movs	r3, #10
 800feb0:	fb03 0202 	mla	r2, r3, r2, r0
 800feb4:	3a10      	subs	r2, #16
 800feb6:	e7d6      	b.n	800fe66 <__gethex+0xfa>
 800feb8:	4631      	mov	r1, r6
 800feba:	e7e1      	b.n	800fe80 <__gethex+0x114>
 800febc:	1bf3      	subs	r3, r6, r7
 800febe:	3b01      	subs	r3, #1
 800fec0:	4621      	mov	r1, r4
 800fec2:	2b07      	cmp	r3, #7
 800fec4:	dc0a      	bgt.n	800fedc <__gethex+0x170>
 800fec6:	9802      	ldr	r0, [sp, #8]
 800fec8:	f000 fa6c 	bl	80103a4 <_Balloc>
 800fecc:	4604      	mov	r4, r0
 800fece:	b940      	cbnz	r0, 800fee2 <__gethex+0x176>
 800fed0:	4b5c      	ldr	r3, [pc, #368]	; (8010044 <__gethex+0x2d8>)
 800fed2:	4602      	mov	r2, r0
 800fed4:	21de      	movs	r1, #222	; 0xde
 800fed6:	485c      	ldr	r0, [pc, #368]	; (8010048 <__gethex+0x2dc>)
 800fed8:	f001 f98a 	bl	80111f0 <__assert_func>
 800fedc:	3101      	adds	r1, #1
 800fede:	105b      	asrs	r3, r3, #1
 800fee0:	e7ef      	b.n	800fec2 <__gethex+0x156>
 800fee2:	f100 0914 	add.w	r9, r0, #20
 800fee6:	f04f 0b00 	mov.w	fp, #0
 800feea:	f1ca 0301 	rsb	r3, sl, #1
 800feee:	f8cd 9010 	str.w	r9, [sp, #16]
 800fef2:	f8cd b004 	str.w	fp, [sp, #4]
 800fef6:	9308      	str	r3, [sp, #32]
 800fef8:	42b7      	cmp	r7, r6
 800fefa:	d33f      	bcc.n	800ff7c <__gethex+0x210>
 800fefc:	9f04      	ldr	r7, [sp, #16]
 800fefe:	9b01      	ldr	r3, [sp, #4]
 800ff00:	f847 3b04 	str.w	r3, [r7], #4
 800ff04:	eba7 0709 	sub.w	r7, r7, r9
 800ff08:	10bf      	asrs	r7, r7, #2
 800ff0a:	6127      	str	r7, [r4, #16]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fb3b 	bl	8010588 <__hi0bits>
 800ff12:	017f      	lsls	r7, r7, #5
 800ff14:	f8d8 6000 	ldr.w	r6, [r8]
 800ff18:	1a3f      	subs	r7, r7, r0
 800ff1a:	42b7      	cmp	r7, r6
 800ff1c:	dd62      	ble.n	800ffe4 <__gethex+0x278>
 800ff1e:	1bbf      	subs	r7, r7, r6
 800ff20:	4639      	mov	r1, r7
 800ff22:	4620      	mov	r0, r4
 800ff24:	f000 fed1 	bl	8010cca <__any_on>
 800ff28:	4682      	mov	sl, r0
 800ff2a:	b1a8      	cbz	r0, 800ff58 <__gethex+0x1ec>
 800ff2c:	1e7b      	subs	r3, r7, #1
 800ff2e:	1159      	asrs	r1, r3, #5
 800ff30:	f003 021f 	and.w	r2, r3, #31
 800ff34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ff38:	f04f 0a01 	mov.w	sl, #1
 800ff3c:	fa0a f202 	lsl.w	r2, sl, r2
 800ff40:	420a      	tst	r2, r1
 800ff42:	d009      	beq.n	800ff58 <__gethex+0x1ec>
 800ff44:	4553      	cmp	r3, sl
 800ff46:	dd05      	ble.n	800ff54 <__gethex+0x1e8>
 800ff48:	1eb9      	subs	r1, r7, #2
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f000 febd 	bl	8010cca <__any_on>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d144      	bne.n	800ffde <__gethex+0x272>
 800ff54:	f04f 0a02 	mov.w	sl, #2
 800ff58:	4639      	mov	r1, r7
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f7ff fe9e 	bl	800fc9c <rshift>
 800ff60:	443d      	add	r5, r7
 800ff62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff66:	42ab      	cmp	r3, r5
 800ff68:	da4a      	bge.n	8010000 <__gethex+0x294>
 800ff6a:	9802      	ldr	r0, [sp, #8]
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	f000 fa59 	bl	8010424 <_Bfree>
 800ff72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff74:	2300      	movs	r3, #0
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	27a3      	movs	r7, #163	; 0xa3
 800ff7a:	e789      	b.n	800fe90 <__gethex+0x124>
 800ff7c:	1e73      	subs	r3, r6, #1
 800ff7e:	9a06      	ldr	r2, [sp, #24]
 800ff80:	9307      	str	r3, [sp, #28]
 800ff82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d019      	beq.n	800ffbe <__gethex+0x252>
 800ff8a:	f1bb 0f20 	cmp.w	fp, #32
 800ff8e:	d107      	bne.n	800ffa0 <__gethex+0x234>
 800ff90:	9b04      	ldr	r3, [sp, #16]
 800ff92:	9a01      	ldr	r2, [sp, #4]
 800ff94:	f843 2b04 	str.w	r2, [r3], #4
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	469b      	mov	fp, r3
 800ffa0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ffa4:	f7ff fecc 	bl	800fd40 <__hexdig_fun>
 800ffa8:	9b01      	ldr	r3, [sp, #4]
 800ffaa:	f000 000f 	and.w	r0, r0, #15
 800ffae:	fa00 f00b 	lsl.w	r0, r0, fp
 800ffb2:	4303      	orrs	r3, r0
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	f10b 0b04 	add.w	fp, fp, #4
 800ffba:	9b07      	ldr	r3, [sp, #28]
 800ffbc:	e00d      	b.n	800ffda <__gethex+0x26e>
 800ffbe:	9a08      	ldr	r2, [sp, #32]
 800ffc0:	1e73      	subs	r3, r6, #1
 800ffc2:	4413      	add	r3, r2
 800ffc4:	42bb      	cmp	r3, r7
 800ffc6:	d3e0      	bcc.n	800ff8a <__gethex+0x21e>
 800ffc8:	4618      	mov	r0, r3
 800ffca:	9903      	ldr	r1, [sp, #12]
 800ffcc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffce:	4652      	mov	r2, sl
 800ffd0:	f7fe f8f6 	bl	800e1c0 <strncmp>
 800ffd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d1d7      	bne.n	800ff8a <__gethex+0x21e>
 800ffda:	461e      	mov	r6, r3
 800ffdc:	e78c      	b.n	800fef8 <__gethex+0x18c>
 800ffde:	f04f 0a03 	mov.w	sl, #3
 800ffe2:	e7b9      	b.n	800ff58 <__gethex+0x1ec>
 800ffe4:	da09      	bge.n	800fffa <__gethex+0x28e>
 800ffe6:	1bf7      	subs	r7, r6, r7
 800ffe8:	4621      	mov	r1, r4
 800ffea:	9802      	ldr	r0, [sp, #8]
 800ffec:	463a      	mov	r2, r7
 800ffee:	f000 fc31 	bl	8010854 <__lshift>
 800fff2:	1bed      	subs	r5, r5, r7
 800fff4:	4604      	mov	r4, r0
 800fff6:	f100 0914 	add.w	r9, r0, #20
 800fffa:	f04f 0a00 	mov.w	sl, #0
 800fffe:	e7b0      	b.n	800ff62 <__gethex+0x1f6>
 8010000:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010004:	42a8      	cmp	r0, r5
 8010006:	dd71      	ble.n	80100ec <__gethex+0x380>
 8010008:	1b45      	subs	r5, r0, r5
 801000a:	42ae      	cmp	r6, r5
 801000c:	dc35      	bgt.n	801007a <__gethex+0x30e>
 801000e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010012:	2b02      	cmp	r3, #2
 8010014:	d029      	beq.n	801006a <__gethex+0x2fe>
 8010016:	2b03      	cmp	r3, #3
 8010018:	d02b      	beq.n	8010072 <__gethex+0x306>
 801001a:	2b01      	cmp	r3, #1
 801001c:	d11c      	bne.n	8010058 <__gethex+0x2ec>
 801001e:	42ae      	cmp	r6, r5
 8010020:	d11a      	bne.n	8010058 <__gethex+0x2ec>
 8010022:	2e01      	cmp	r6, #1
 8010024:	d112      	bne.n	801004c <__gethex+0x2e0>
 8010026:	9a05      	ldr	r2, [sp, #20]
 8010028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	2301      	movs	r3, #1
 8010030:	6123      	str	r3, [r4, #16]
 8010032:	f8c9 3000 	str.w	r3, [r9]
 8010036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010038:	2762      	movs	r7, #98	; 0x62
 801003a:	601c      	str	r4, [r3, #0]
 801003c:	e728      	b.n	800fe90 <__gethex+0x124>
 801003e:	bf00      	nop
 8010040:	080126ec 	.word	0x080126ec
 8010044:	08012675 	.word	0x08012675
 8010048:	08012686 	.word	0x08012686
 801004c:	1e71      	subs	r1, r6, #1
 801004e:	4620      	mov	r0, r4
 8010050:	f000 fe3b 	bl	8010cca <__any_on>
 8010054:	2800      	cmp	r0, #0
 8010056:	d1e6      	bne.n	8010026 <__gethex+0x2ba>
 8010058:	9802      	ldr	r0, [sp, #8]
 801005a:	4621      	mov	r1, r4
 801005c:	f000 f9e2 	bl	8010424 <_Bfree>
 8010060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010062:	2300      	movs	r3, #0
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	2750      	movs	r7, #80	; 0x50
 8010068:	e712      	b.n	800fe90 <__gethex+0x124>
 801006a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1f3      	bne.n	8010058 <__gethex+0x2ec>
 8010070:	e7d9      	b.n	8010026 <__gethex+0x2ba>
 8010072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1d6      	bne.n	8010026 <__gethex+0x2ba>
 8010078:	e7ee      	b.n	8010058 <__gethex+0x2ec>
 801007a:	1e6f      	subs	r7, r5, #1
 801007c:	f1ba 0f00 	cmp.w	sl, #0
 8010080:	d131      	bne.n	80100e6 <__gethex+0x37a>
 8010082:	b127      	cbz	r7, 801008e <__gethex+0x322>
 8010084:	4639      	mov	r1, r7
 8010086:	4620      	mov	r0, r4
 8010088:	f000 fe1f 	bl	8010cca <__any_on>
 801008c:	4682      	mov	sl, r0
 801008e:	117b      	asrs	r3, r7, #5
 8010090:	2101      	movs	r1, #1
 8010092:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010096:	f007 071f 	and.w	r7, r7, #31
 801009a:	fa01 f707 	lsl.w	r7, r1, r7
 801009e:	421f      	tst	r7, r3
 80100a0:	4629      	mov	r1, r5
 80100a2:	4620      	mov	r0, r4
 80100a4:	bf18      	it	ne
 80100a6:	f04a 0a02 	orrne.w	sl, sl, #2
 80100aa:	1b76      	subs	r6, r6, r5
 80100ac:	f7ff fdf6 	bl	800fc9c <rshift>
 80100b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80100b4:	2702      	movs	r7, #2
 80100b6:	f1ba 0f00 	cmp.w	sl, #0
 80100ba:	d048      	beq.n	801014e <__gethex+0x3e2>
 80100bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	d015      	beq.n	80100f0 <__gethex+0x384>
 80100c4:	2b03      	cmp	r3, #3
 80100c6:	d017      	beq.n	80100f8 <__gethex+0x38c>
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d109      	bne.n	80100e0 <__gethex+0x374>
 80100cc:	f01a 0f02 	tst.w	sl, #2
 80100d0:	d006      	beq.n	80100e0 <__gethex+0x374>
 80100d2:	f8d9 0000 	ldr.w	r0, [r9]
 80100d6:	ea4a 0a00 	orr.w	sl, sl, r0
 80100da:	f01a 0f01 	tst.w	sl, #1
 80100de:	d10e      	bne.n	80100fe <__gethex+0x392>
 80100e0:	f047 0710 	orr.w	r7, r7, #16
 80100e4:	e033      	b.n	801014e <__gethex+0x3e2>
 80100e6:	f04f 0a01 	mov.w	sl, #1
 80100ea:	e7d0      	b.n	801008e <__gethex+0x322>
 80100ec:	2701      	movs	r7, #1
 80100ee:	e7e2      	b.n	80100b6 <__gethex+0x34a>
 80100f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100f2:	f1c3 0301 	rsb	r3, r3, #1
 80100f6:	9315      	str	r3, [sp, #84]	; 0x54
 80100f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d0f0      	beq.n	80100e0 <__gethex+0x374>
 80100fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010102:	f104 0314 	add.w	r3, r4, #20
 8010106:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801010a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801010e:	f04f 0c00 	mov.w	ip, #0
 8010112:	4618      	mov	r0, r3
 8010114:	f853 2b04 	ldr.w	r2, [r3], #4
 8010118:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801011c:	d01c      	beq.n	8010158 <__gethex+0x3ec>
 801011e:	3201      	adds	r2, #1
 8010120:	6002      	str	r2, [r0, #0]
 8010122:	2f02      	cmp	r7, #2
 8010124:	f104 0314 	add.w	r3, r4, #20
 8010128:	d13d      	bne.n	80101a6 <__gethex+0x43a>
 801012a:	f8d8 2000 	ldr.w	r2, [r8]
 801012e:	3a01      	subs	r2, #1
 8010130:	42b2      	cmp	r2, r6
 8010132:	d10a      	bne.n	801014a <__gethex+0x3de>
 8010134:	1171      	asrs	r1, r6, #5
 8010136:	2201      	movs	r2, #1
 8010138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801013c:	f006 061f 	and.w	r6, r6, #31
 8010140:	fa02 f606 	lsl.w	r6, r2, r6
 8010144:	421e      	tst	r6, r3
 8010146:	bf18      	it	ne
 8010148:	4617      	movne	r7, r2
 801014a:	f047 0720 	orr.w	r7, r7, #32
 801014e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010150:	601c      	str	r4, [r3, #0]
 8010152:	9b05      	ldr	r3, [sp, #20]
 8010154:	601d      	str	r5, [r3, #0]
 8010156:	e69b      	b.n	800fe90 <__gethex+0x124>
 8010158:	4299      	cmp	r1, r3
 801015a:	f843 cc04 	str.w	ip, [r3, #-4]
 801015e:	d8d8      	bhi.n	8010112 <__gethex+0x3a6>
 8010160:	68a3      	ldr	r3, [r4, #8]
 8010162:	459b      	cmp	fp, r3
 8010164:	db17      	blt.n	8010196 <__gethex+0x42a>
 8010166:	6861      	ldr	r1, [r4, #4]
 8010168:	9802      	ldr	r0, [sp, #8]
 801016a:	3101      	adds	r1, #1
 801016c:	f000 f91a 	bl	80103a4 <_Balloc>
 8010170:	4681      	mov	r9, r0
 8010172:	b918      	cbnz	r0, 801017c <__gethex+0x410>
 8010174:	4b1a      	ldr	r3, [pc, #104]	; (80101e0 <__gethex+0x474>)
 8010176:	4602      	mov	r2, r0
 8010178:	2184      	movs	r1, #132	; 0x84
 801017a:	e6ac      	b.n	800fed6 <__gethex+0x16a>
 801017c:	6922      	ldr	r2, [r4, #16]
 801017e:	3202      	adds	r2, #2
 8010180:	f104 010c 	add.w	r1, r4, #12
 8010184:	0092      	lsls	r2, r2, #2
 8010186:	300c      	adds	r0, #12
 8010188:	f7fd f978 	bl	800d47c <memcpy>
 801018c:	4621      	mov	r1, r4
 801018e:	9802      	ldr	r0, [sp, #8]
 8010190:	f000 f948 	bl	8010424 <_Bfree>
 8010194:	464c      	mov	r4, r9
 8010196:	6923      	ldr	r3, [r4, #16]
 8010198:	1c5a      	adds	r2, r3, #1
 801019a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801019e:	6122      	str	r2, [r4, #16]
 80101a0:	2201      	movs	r2, #1
 80101a2:	615a      	str	r2, [r3, #20]
 80101a4:	e7bd      	b.n	8010122 <__gethex+0x3b6>
 80101a6:	6922      	ldr	r2, [r4, #16]
 80101a8:	455a      	cmp	r2, fp
 80101aa:	dd0b      	ble.n	80101c4 <__gethex+0x458>
 80101ac:	2101      	movs	r1, #1
 80101ae:	4620      	mov	r0, r4
 80101b0:	f7ff fd74 	bl	800fc9c <rshift>
 80101b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101b8:	3501      	adds	r5, #1
 80101ba:	42ab      	cmp	r3, r5
 80101bc:	f6ff aed5 	blt.w	800ff6a <__gethex+0x1fe>
 80101c0:	2701      	movs	r7, #1
 80101c2:	e7c2      	b.n	801014a <__gethex+0x3de>
 80101c4:	f016 061f 	ands.w	r6, r6, #31
 80101c8:	d0fa      	beq.n	80101c0 <__gethex+0x454>
 80101ca:	4453      	add	r3, sl
 80101cc:	f1c6 0620 	rsb	r6, r6, #32
 80101d0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80101d4:	f000 f9d8 	bl	8010588 <__hi0bits>
 80101d8:	42b0      	cmp	r0, r6
 80101da:	dbe7      	blt.n	80101ac <__gethex+0x440>
 80101dc:	e7f0      	b.n	80101c0 <__gethex+0x454>
 80101de:	bf00      	nop
 80101e0:	08012675 	.word	0x08012675

080101e4 <L_shift>:
 80101e4:	f1c2 0208 	rsb	r2, r2, #8
 80101e8:	0092      	lsls	r2, r2, #2
 80101ea:	b570      	push	{r4, r5, r6, lr}
 80101ec:	f1c2 0620 	rsb	r6, r2, #32
 80101f0:	6843      	ldr	r3, [r0, #4]
 80101f2:	6804      	ldr	r4, [r0, #0]
 80101f4:	fa03 f506 	lsl.w	r5, r3, r6
 80101f8:	432c      	orrs	r4, r5
 80101fa:	40d3      	lsrs	r3, r2
 80101fc:	6004      	str	r4, [r0, #0]
 80101fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010202:	4288      	cmp	r0, r1
 8010204:	d3f4      	bcc.n	80101f0 <L_shift+0xc>
 8010206:	bd70      	pop	{r4, r5, r6, pc}

08010208 <__match>:
 8010208:	b530      	push	{r4, r5, lr}
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	3301      	adds	r3, #1
 801020e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010212:	b914      	cbnz	r4, 801021a <__match+0x12>
 8010214:	6003      	str	r3, [r0, #0]
 8010216:	2001      	movs	r0, #1
 8010218:	bd30      	pop	{r4, r5, pc}
 801021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801021e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010222:	2d19      	cmp	r5, #25
 8010224:	bf98      	it	ls
 8010226:	3220      	addls	r2, #32
 8010228:	42a2      	cmp	r2, r4
 801022a:	d0f0      	beq.n	801020e <__match+0x6>
 801022c:	2000      	movs	r0, #0
 801022e:	e7f3      	b.n	8010218 <__match+0x10>

08010230 <__hexnan>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	680b      	ldr	r3, [r1, #0]
 8010236:	115e      	asrs	r6, r3, #5
 8010238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801023c:	f013 031f 	ands.w	r3, r3, #31
 8010240:	b087      	sub	sp, #28
 8010242:	bf18      	it	ne
 8010244:	3604      	addne	r6, #4
 8010246:	2500      	movs	r5, #0
 8010248:	1f37      	subs	r7, r6, #4
 801024a:	4690      	mov	r8, r2
 801024c:	6802      	ldr	r2, [r0, #0]
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	4682      	mov	sl, r0
 8010252:	f846 5c04 	str.w	r5, [r6, #-4]
 8010256:	46b9      	mov	r9, r7
 8010258:	463c      	mov	r4, r7
 801025a:	9502      	str	r5, [sp, #8]
 801025c:	46ab      	mov	fp, r5
 801025e:	7851      	ldrb	r1, [r2, #1]
 8010260:	1c53      	adds	r3, r2, #1
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	b341      	cbz	r1, 80102b8 <__hexnan+0x88>
 8010266:	4608      	mov	r0, r1
 8010268:	9205      	str	r2, [sp, #20]
 801026a:	9104      	str	r1, [sp, #16]
 801026c:	f7ff fd68 	bl	800fd40 <__hexdig_fun>
 8010270:	2800      	cmp	r0, #0
 8010272:	d14f      	bne.n	8010314 <__hexnan+0xe4>
 8010274:	9904      	ldr	r1, [sp, #16]
 8010276:	9a05      	ldr	r2, [sp, #20]
 8010278:	2920      	cmp	r1, #32
 801027a:	d818      	bhi.n	80102ae <__hexnan+0x7e>
 801027c:	9b02      	ldr	r3, [sp, #8]
 801027e:	459b      	cmp	fp, r3
 8010280:	dd13      	ble.n	80102aa <__hexnan+0x7a>
 8010282:	454c      	cmp	r4, r9
 8010284:	d206      	bcs.n	8010294 <__hexnan+0x64>
 8010286:	2d07      	cmp	r5, #7
 8010288:	dc04      	bgt.n	8010294 <__hexnan+0x64>
 801028a:	462a      	mov	r2, r5
 801028c:	4649      	mov	r1, r9
 801028e:	4620      	mov	r0, r4
 8010290:	f7ff ffa8 	bl	80101e4 <L_shift>
 8010294:	4544      	cmp	r4, r8
 8010296:	d950      	bls.n	801033a <__hexnan+0x10a>
 8010298:	2300      	movs	r3, #0
 801029a:	f1a4 0904 	sub.w	r9, r4, #4
 801029e:	f844 3c04 	str.w	r3, [r4, #-4]
 80102a2:	f8cd b008 	str.w	fp, [sp, #8]
 80102a6:	464c      	mov	r4, r9
 80102a8:	461d      	mov	r5, r3
 80102aa:	9a03      	ldr	r2, [sp, #12]
 80102ac:	e7d7      	b.n	801025e <__hexnan+0x2e>
 80102ae:	2929      	cmp	r1, #41	; 0x29
 80102b0:	d156      	bne.n	8010360 <__hexnan+0x130>
 80102b2:	3202      	adds	r2, #2
 80102b4:	f8ca 2000 	str.w	r2, [sl]
 80102b8:	f1bb 0f00 	cmp.w	fp, #0
 80102bc:	d050      	beq.n	8010360 <__hexnan+0x130>
 80102be:	454c      	cmp	r4, r9
 80102c0:	d206      	bcs.n	80102d0 <__hexnan+0xa0>
 80102c2:	2d07      	cmp	r5, #7
 80102c4:	dc04      	bgt.n	80102d0 <__hexnan+0xa0>
 80102c6:	462a      	mov	r2, r5
 80102c8:	4649      	mov	r1, r9
 80102ca:	4620      	mov	r0, r4
 80102cc:	f7ff ff8a 	bl	80101e4 <L_shift>
 80102d0:	4544      	cmp	r4, r8
 80102d2:	d934      	bls.n	801033e <__hexnan+0x10e>
 80102d4:	f1a8 0204 	sub.w	r2, r8, #4
 80102d8:	4623      	mov	r3, r4
 80102da:	f853 1b04 	ldr.w	r1, [r3], #4
 80102de:	f842 1f04 	str.w	r1, [r2, #4]!
 80102e2:	429f      	cmp	r7, r3
 80102e4:	d2f9      	bcs.n	80102da <__hexnan+0xaa>
 80102e6:	1b3b      	subs	r3, r7, r4
 80102e8:	f023 0303 	bic.w	r3, r3, #3
 80102ec:	3304      	adds	r3, #4
 80102ee:	3401      	adds	r4, #1
 80102f0:	3e03      	subs	r6, #3
 80102f2:	42b4      	cmp	r4, r6
 80102f4:	bf88      	it	hi
 80102f6:	2304      	movhi	r3, #4
 80102f8:	4443      	add	r3, r8
 80102fa:	2200      	movs	r2, #0
 80102fc:	f843 2b04 	str.w	r2, [r3], #4
 8010300:	429f      	cmp	r7, r3
 8010302:	d2fb      	bcs.n	80102fc <__hexnan+0xcc>
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	b91b      	cbnz	r3, 8010310 <__hexnan+0xe0>
 8010308:	4547      	cmp	r7, r8
 801030a:	d127      	bne.n	801035c <__hexnan+0x12c>
 801030c:	2301      	movs	r3, #1
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	2005      	movs	r0, #5
 8010312:	e026      	b.n	8010362 <__hexnan+0x132>
 8010314:	3501      	adds	r5, #1
 8010316:	2d08      	cmp	r5, #8
 8010318:	f10b 0b01 	add.w	fp, fp, #1
 801031c:	dd06      	ble.n	801032c <__hexnan+0xfc>
 801031e:	4544      	cmp	r4, r8
 8010320:	d9c3      	bls.n	80102aa <__hexnan+0x7a>
 8010322:	2300      	movs	r3, #0
 8010324:	f844 3c04 	str.w	r3, [r4, #-4]
 8010328:	2501      	movs	r5, #1
 801032a:	3c04      	subs	r4, #4
 801032c:	6822      	ldr	r2, [r4, #0]
 801032e:	f000 000f 	and.w	r0, r0, #15
 8010332:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010336:	6022      	str	r2, [r4, #0]
 8010338:	e7b7      	b.n	80102aa <__hexnan+0x7a>
 801033a:	2508      	movs	r5, #8
 801033c:	e7b5      	b.n	80102aa <__hexnan+0x7a>
 801033e:	9b01      	ldr	r3, [sp, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0df      	beq.n	8010304 <__hexnan+0xd4>
 8010344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010348:	f1c3 0320 	rsb	r3, r3, #32
 801034c:	fa22 f303 	lsr.w	r3, r2, r3
 8010350:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010354:	401a      	ands	r2, r3
 8010356:	f846 2c04 	str.w	r2, [r6, #-4]
 801035a:	e7d3      	b.n	8010304 <__hexnan+0xd4>
 801035c:	3f04      	subs	r7, #4
 801035e:	e7d1      	b.n	8010304 <__hexnan+0xd4>
 8010360:	2004      	movs	r0, #4
 8010362:	b007      	add	sp, #28
 8010364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010368 <_localeconv_r>:
 8010368:	4800      	ldr	r0, [pc, #0]	; (801036c <_localeconv_r+0x4>)
 801036a:	4770      	bx	lr
 801036c:	20001118 	.word	0x20001118

08010370 <malloc>:
 8010370:	4b02      	ldr	r3, [pc, #8]	; (801037c <malloc+0xc>)
 8010372:	4601      	mov	r1, r0
 8010374:	6818      	ldr	r0, [r3, #0]
 8010376:	f000 bd47 	b.w	8010e08 <_malloc_r>
 801037a:	bf00      	nop
 801037c:	20000fc0 	.word	0x20000fc0

08010380 <__ascii_mbtowc>:
 8010380:	b082      	sub	sp, #8
 8010382:	b901      	cbnz	r1, 8010386 <__ascii_mbtowc+0x6>
 8010384:	a901      	add	r1, sp, #4
 8010386:	b142      	cbz	r2, 801039a <__ascii_mbtowc+0x1a>
 8010388:	b14b      	cbz	r3, 801039e <__ascii_mbtowc+0x1e>
 801038a:	7813      	ldrb	r3, [r2, #0]
 801038c:	600b      	str	r3, [r1, #0]
 801038e:	7812      	ldrb	r2, [r2, #0]
 8010390:	1e10      	subs	r0, r2, #0
 8010392:	bf18      	it	ne
 8010394:	2001      	movne	r0, #1
 8010396:	b002      	add	sp, #8
 8010398:	4770      	bx	lr
 801039a:	4610      	mov	r0, r2
 801039c:	e7fb      	b.n	8010396 <__ascii_mbtowc+0x16>
 801039e:	f06f 0001 	mvn.w	r0, #1
 80103a2:	e7f8      	b.n	8010396 <__ascii_mbtowc+0x16>

080103a4 <_Balloc>:
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
 80103ac:	b976      	cbnz	r6, 80103cc <_Balloc+0x28>
 80103ae:	2010      	movs	r0, #16
 80103b0:	f7ff ffde 	bl	8010370 <malloc>
 80103b4:	4602      	mov	r2, r0
 80103b6:	6260      	str	r0, [r4, #36]	; 0x24
 80103b8:	b920      	cbnz	r0, 80103c4 <_Balloc+0x20>
 80103ba:	4b18      	ldr	r3, [pc, #96]	; (801041c <_Balloc+0x78>)
 80103bc:	4818      	ldr	r0, [pc, #96]	; (8010420 <_Balloc+0x7c>)
 80103be:	2166      	movs	r1, #102	; 0x66
 80103c0:	f000 ff16 	bl	80111f0 <__assert_func>
 80103c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103c8:	6006      	str	r6, [r0, #0]
 80103ca:	60c6      	str	r6, [r0, #12]
 80103cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80103ce:	68f3      	ldr	r3, [r6, #12]
 80103d0:	b183      	cbz	r3, 80103f4 <_Balloc+0x50>
 80103d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103da:	b9b8      	cbnz	r0, 801040c <_Balloc+0x68>
 80103dc:	2101      	movs	r1, #1
 80103de:	fa01 f605 	lsl.w	r6, r1, r5
 80103e2:	1d72      	adds	r2, r6, #5
 80103e4:	0092      	lsls	r2, r2, #2
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 fc90 	bl	8010d0c <_calloc_r>
 80103ec:	b160      	cbz	r0, 8010408 <_Balloc+0x64>
 80103ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103f2:	e00e      	b.n	8010412 <_Balloc+0x6e>
 80103f4:	2221      	movs	r2, #33	; 0x21
 80103f6:	2104      	movs	r1, #4
 80103f8:	4620      	mov	r0, r4
 80103fa:	f000 fc87 	bl	8010d0c <_calloc_r>
 80103fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010400:	60f0      	str	r0, [r6, #12]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1e4      	bne.n	80103d2 <_Balloc+0x2e>
 8010408:	2000      	movs	r0, #0
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	6802      	ldr	r2, [r0, #0]
 801040e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010412:	2300      	movs	r3, #0
 8010414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010418:	e7f7      	b.n	801040a <_Balloc+0x66>
 801041a:	bf00      	nop
 801041c:	08012603 	.word	0x08012603
 8010420:	08012700 	.word	0x08012700

08010424 <_Bfree>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010428:	4605      	mov	r5, r0
 801042a:	460c      	mov	r4, r1
 801042c:	b976      	cbnz	r6, 801044c <_Bfree+0x28>
 801042e:	2010      	movs	r0, #16
 8010430:	f7ff ff9e 	bl	8010370 <malloc>
 8010434:	4602      	mov	r2, r0
 8010436:	6268      	str	r0, [r5, #36]	; 0x24
 8010438:	b920      	cbnz	r0, 8010444 <_Bfree+0x20>
 801043a:	4b09      	ldr	r3, [pc, #36]	; (8010460 <_Bfree+0x3c>)
 801043c:	4809      	ldr	r0, [pc, #36]	; (8010464 <_Bfree+0x40>)
 801043e:	218a      	movs	r1, #138	; 0x8a
 8010440:	f000 fed6 	bl	80111f0 <__assert_func>
 8010444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010448:	6006      	str	r6, [r0, #0]
 801044a:	60c6      	str	r6, [r0, #12]
 801044c:	b13c      	cbz	r4, 801045e <_Bfree+0x3a>
 801044e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010450:	6862      	ldr	r2, [r4, #4]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010458:	6021      	str	r1, [r4, #0]
 801045a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801045e:	bd70      	pop	{r4, r5, r6, pc}
 8010460:	08012603 	.word	0x08012603
 8010464:	08012700 	.word	0x08012700

08010468 <__multadd>:
 8010468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	690d      	ldr	r5, [r1, #16]
 801046e:	4607      	mov	r7, r0
 8010470:	460c      	mov	r4, r1
 8010472:	461e      	mov	r6, r3
 8010474:	f101 0c14 	add.w	ip, r1, #20
 8010478:	2000      	movs	r0, #0
 801047a:	f8dc 3000 	ldr.w	r3, [ip]
 801047e:	b299      	uxth	r1, r3
 8010480:	fb02 6101 	mla	r1, r2, r1, r6
 8010484:	0c1e      	lsrs	r6, r3, #16
 8010486:	0c0b      	lsrs	r3, r1, #16
 8010488:	fb02 3306 	mla	r3, r2, r6, r3
 801048c:	b289      	uxth	r1, r1
 801048e:	3001      	adds	r0, #1
 8010490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010494:	4285      	cmp	r5, r0
 8010496:	f84c 1b04 	str.w	r1, [ip], #4
 801049a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801049e:	dcec      	bgt.n	801047a <__multadd+0x12>
 80104a0:	b30e      	cbz	r6, 80104e6 <__multadd+0x7e>
 80104a2:	68a3      	ldr	r3, [r4, #8]
 80104a4:	42ab      	cmp	r3, r5
 80104a6:	dc19      	bgt.n	80104dc <__multadd+0x74>
 80104a8:	6861      	ldr	r1, [r4, #4]
 80104aa:	4638      	mov	r0, r7
 80104ac:	3101      	adds	r1, #1
 80104ae:	f7ff ff79 	bl	80103a4 <_Balloc>
 80104b2:	4680      	mov	r8, r0
 80104b4:	b928      	cbnz	r0, 80104c2 <__multadd+0x5a>
 80104b6:	4602      	mov	r2, r0
 80104b8:	4b0c      	ldr	r3, [pc, #48]	; (80104ec <__multadd+0x84>)
 80104ba:	480d      	ldr	r0, [pc, #52]	; (80104f0 <__multadd+0x88>)
 80104bc:	21b5      	movs	r1, #181	; 0xb5
 80104be:	f000 fe97 	bl	80111f0 <__assert_func>
 80104c2:	6922      	ldr	r2, [r4, #16]
 80104c4:	3202      	adds	r2, #2
 80104c6:	f104 010c 	add.w	r1, r4, #12
 80104ca:	0092      	lsls	r2, r2, #2
 80104cc:	300c      	adds	r0, #12
 80104ce:	f7fc ffd5 	bl	800d47c <memcpy>
 80104d2:	4621      	mov	r1, r4
 80104d4:	4638      	mov	r0, r7
 80104d6:	f7ff ffa5 	bl	8010424 <_Bfree>
 80104da:	4644      	mov	r4, r8
 80104dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104e0:	3501      	adds	r5, #1
 80104e2:	615e      	str	r6, [r3, #20]
 80104e4:	6125      	str	r5, [r4, #16]
 80104e6:	4620      	mov	r0, r4
 80104e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ec:	08012675 	.word	0x08012675
 80104f0:	08012700 	.word	0x08012700

080104f4 <__s2b>:
 80104f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f8:	460c      	mov	r4, r1
 80104fa:	4615      	mov	r5, r2
 80104fc:	461f      	mov	r7, r3
 80104fe:	2209      	movs	r2, #9
 8010500:	3308      	adds	r3, #8
 8010502:	4606      	mov	r6, r0
 8010504:	fb93 f3f2 	sdiv	r3, r3, r2
 8010508:	2100      	movs	r1, #0
 801050a:	2201      	movs	r2, #1
 801050c:	429a      	cmp	r2, r3
 801050e:	db09      	blt.n	8010524 <__s2b+0x30>
 8010510:	4630      	mov	r0, r6
 8010512:	f7ff ff47 	bl	80103a4 <_Balloc>
 8010516:	b940      	cbnz	r0, 801052a <__s2b+0x36>
 8010518:	4602      	mov	r2, r0
 801051a:	4b19      	ldr	r3, [pc, #100]	; (8010580 <__s2b+0x8c>)
 801051c:	4819      	ldr	r0, [pc, #100]	; (8010584 <__s2b+0x90>)
 801051e:	21ce      	movs	r1, #206	; 0xce
 8010520:	f000 fe66 	bl	80111f0 <__assert_func>
 8010524:	0052      	lsls	r2, r2, #1
 8010526:	3101      	adds	r1, #1
 8010528:	e7f0      	b.n	801050c <__s2b+0x18>
 801052a:	9b08      	ldr	r3, [sp, #32]
 801052c:	6143      	str	r3, [r0, #20]
 801052e:	2d09      	cmp	r5, #9
 8010530:	f04f 0301 	mov.w	r3, #1
 8010534:	6103      	str	r3, [r0, #16]
 8010536:	dd16      	ble.n	8010566 <__s2b+0x72>
 8010538:	f104 0909 	add.w	r9, r4, #9
 801053c:	46c8      	mov	r8, r9
 801053e:	442c      	add	r4, r5
 8010540:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010544:	4601      	mov	r1, r0
 8010546:	3b30      	subs	r3, #48	; 0x30
 8010548:	220a      	movs	r2, #10
 801054a:	4630      	mov	r0, r6
 801054c:	f7ff ff8c 	bl	8010468 <__multadd>
 8010550:	45a0      	cmp	r8, r4
 8010552:	d1f5      	bne.n	8010540 <__s2b+0x4c>
 8010554:	f1a5 0408 	sub.w	r4, r5, #8
 8010558:	444c      	add	r4, r9
 801055a:	1b2d      	subs	r5, r5, r4
 801055c:	1963      	adds	r3, r4, r5
 801055e:	42bb      	cmp	r3, r7
 8010560:	db04      	blt.n	801056c <__s2b+0x78>
 8010562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010566:	340a      	adds	r4, #10
 8010568:	2509      	movs	r5, #9
 801056a:	e7f6      	b.n	801055a <__s2b+0x66>
 801056c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010570:	4601      	mov	r1, r0
 8010572:	3b30      	subs	r3, #48	; 0x30
 8010574:	220a      	movs	r2, #10
 8010576:	4630      	mov	r0, r6
 8010578:	f7ff ff76 	bl	8010468 <__multadd>
 801057c:	e7ee      	b.n	801055c <__s2b+0x68>
 801057e:	bf00      	nop
 8010580:	08012675 	.word	0x08012675
 8010584:	08012700 	.word	0x08012700

08010588 <__hi0bits>:
 8010588:	0c02      	lsrs	r2, r0, #16
 801058a:	0412      	lsls	r2, r2, #16
 801058c:	4603      	mov	r3, r0
 801058e:	b9ca      	cbnz	r2, 80105c4 <__hi0bits+0x3c>
 8010590:	0403      	lsls	r3, r0, #16
 8010592:	2010      	movs	r0, #16
 8010594:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010598:	bf04      	itt	eq
 801059a:	021b      	lsleq	r3, r3, #8
 801059c:	3008      	addeq	r0, #8
 801059e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80105a2:	bf04      	itt	eq
 80105a4:	011b      	lsleq	r3, r3, #4
 80105a6:	3004      	addeq	r0, #4
 80105a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80105ac:	bf04      	itt	eq
 80105ae:	009b      	lsleq	r3, r3, #2
 80105b0:	3002      	addeq	r0, #2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	db05      	blt.n	80105c2 <__hi0bits+0x3a>
 80105b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80105ba:	f100 0001 	add.w	r0, r0, #1
 80105be:	bf08      	it	eq
 80105c0:	2020      	moveq	r0, #32
 80105c2:	4770      	bx	lr
 80105c4:	2000      	movs	r0, #0
 80105c6:	e7e5      	b.n	8010594 <__hi0bits+0xc>

080105c8 <__lo0bits>:
 80105c8:	6803      	ldr	r3, [r0, #0]
 80105ca:	4602      	mov	r2, r0
 80105cc:	f013 0007 	ands.w	r0, r3, #7
 80105d0:	d00b      	beq.n	80105ea <__lo0bits+0x22>
 80105d2:	07d9      	lsls	r1, r3, #31
 80105d4:	d421      	bmi.n	801061a <__lo0bits+0x52>
 80105d6:	0798      	lsls	r0, r3, #30
 80105d8:	bf49      	itett	mi
 80105da:	085b      	lsrmi	r3, r3, #1
 80105dc:	089b      	lsrpl	r3, r3, #2
 80105de:	2001      	movmi	r0, #1
 80105e0:	6013      	strmi	r3, [r2, #0]
 80105e2:	bf5c      	itt	pl
 80105e4:	6013      	strpl	r3, [r2, #0]
 80105e6:	2002      	movpl	r0, #2
 80105e8:	4770      	bx	lr
 80105ea:	b299      	uxth	r1, r3
 80105ec:	b909      	cbnz	r1, 80105f2 <__lo0bits+0x2a>
 80105ee:	0c1b      	lsrs	r3, r3, #16
 80105f0:	2010      	movs	r0, #16
 80105f2:	b2d9      	uxtb	r1, r3
 80105f4:	b909      	cbnz	r1, 80105fa <__lo0bits+0x32>
 80105f6:	3008      	adds	r0, #8
 80105f8:	0a1b      	lsrs	r3, r3, #8
 80105fa:	0719      	lsls	r1, r3, #28
 80105fc:	bf04      	itt	eq
 80105fe:	091b      	lsreq	r3, r3, #4
 8010600:	3004      	addeq	r0, #4
 8010602:	0799      	lsls	r1, r3, #30
 8010604:	bf04      	itt	eq
 8010606:	089b      	lsreq	r3, r3, #2
 8010608:	3002      	addeq	r0, #2
 801060a:	07d9      	lsls	r1, r3, #31
 801060c:	d403      	bmi.n	8010616 <__lo0bits+0x4e>
 801060e:	085b      	lsrs	r3, r3, #1
 8010610:	f100 0001 	add.w	r0, r0, #1
 8010614:	d003      	beq.n	801061e <__lo0bits+0x56>
 8010616:	6013      	str	r3, [r2, #0]
 8010618:	4770      	bx	lr
 801061a:	2000      	movs	r0, #0
 801061c:	4770      	bx	lr
 801061e:	2020      	movs	r0, #32
 8010620:	4770      	bx	lr
	...

08010624 <__i2b>:
 8010624:	b510      	push	{r4, lr}
 8010626:	460c      	mov	r4, r1
 8010628:	2101      	movs	r1, #1
 801062a:	f7ff febb 	bl	80103a4 <_Balloc>
 801062e:	4602      	mov	r2, r0
 8010630:	b928      	cbnz	r0, 801063e <__i2b+0x1a>
 8010632:	4b05      	ldr	r3, [pc, #20]	; (8010648 <__i2b+0x24>)
 8010634:	4805      	ldr	r0, [pc, #20]	; (801064c <__i2b+0x28>)
 8010636:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801063a:	f000 fdd9 	bl	80111f0 <__assert_func>
 801063e:	2301      	movs	r3, #1
 8010640:	6144      	str	r4, [r0, #20]
 8010642:	6103      	str	r3, [r0, #16]
 8010644:	bd10      	pop	{r4, pc}
 8010646:	bf00      	nop
 8010648:	08012675 	.word	0x08012675
 801064c:	08012700 	.word	0x08012700

08010650 <__multiply>:
 8010650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010654:	4691      	mov	r9, r2
 8010656:	690a      	ldr	r2, [r1, #16]
 8010658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801065c:	429a      	cmp	r2, r3
 801065e:	bfb8      	it	lt
 8010660:	460b      	movlt	r3, r1
 8010662:	460c      	mov	r4, r1
 8010664:	bfbc      	itt	lt
 8010666:	464c      	movlt	r4, r9
 8010668:	4699      	movlt	r9, r3
 801066a:	6927      	ldr	r7, [r4, #16]
 801066c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010670:	68a3      	ldr	r3, [r4, #8]
 8010672:	6861      	ldr	r1, [r4, #4]
 8010674:	eb07 060a 	add.w	r6, r7, sl
 8010678:	42b3      	cmp	r3, r6
 801067a:	b085      	sub	sp, #20
 801067c:	bfb8      	it	lt
 801067e:	3101      	addlt	r1, #1
 8010680:	f7ff fe90 	bl	80103a4 <_Balloc>
 8010684:	b930      	cbnz	r0, 8010694 <__multiply+0x44>
 8010686:	4602      	mov	r2, r0
 8010688:	4b43      	ldr	r3, [pc, #268]	; (8010798 <__multiply+0x148>)
 801068a:	4844      	ldr	r0, [pc, #272]	; (801079c <__multiply+0x14c>)
 801068c:	f240 115d 	movw	r1, #349	; 0x15d
 8010690:	f000 fdae 	bl	80111f0 <__assert_func>
 8010694:	f100 0514 	add.w	r5, r0, #20
 8010698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801069c:	462b      	mov	r3, r5
 801069e:	2200      	movs	r2, #0
 80106a0:	4543      	cmp	r3, r8
 80106a2:	d321      	bcc.n	80106e8 <__multiply+0x98>
 80106a4:	f104 0314 	add.w	r3, r4, #20
 80106a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80106ac:	f109 0314 	add.w	r3, r9, #20
 80106b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80106b4:	9202      	str	r2, [sp, #8]
 80106b6:	1b3a      	subs	r2, r7, r4
 80106b8:	3a15      	subs	r2, #21
 80106ba:	f022 0203 	bic.w	r2, r2, #3
 80106be:	3204      	adds	r2, #4
 80106c0:	f104 0115 	add.w	r1, r4, #21
 80106c4:	428f      	cmp	r7, r1
 80106c6:	bf38      	it	cc
 80106c8:	2204      	movcc	r2, #4
 80106ca:	9201      	str	r2, [sp, #4]
 80106cc:	9a02      	ldr	r2, [sp, #8]
 80106ce:	9303      	str	r3, [sp, #12]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d80c      	bhi.n	80106ee <__multiply+0x9e>
 80106d4:	2e00      	cmp	r6, #0
 80106d6:	dd03      	ble.n	80106e0 <__multiply+0x90>
 80106d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d059      	beq.n	8010794 <__multiply+0x144>
 80106e0:	6106      	str	r6, [r0, #16]
 80106e2:	b005      	add	sp, #20
 80106e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e8:	f843 2b04 	str.w	r2, [r3], #4
 80106ec:	e7d8      	b.n	80106a0 <__multiply+0x50>
 80106ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80106f2:	f1ba 0f00 	cmp.w	sl, #0
 80106f6:	d023      	beq.n	8010740 <__multiply+0xf0>
 80106f8:	f104 0e14 	add.w	lr, r4, #20
 80106fc:	46a9      	mov	r9, r5
 80106fe:	f04f 0c00 	mov.w	ip, #0
 8010702:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010706:	f8d9 1000 	ldr.w	r1, [r9]
 801070a:	fa1f fb82 	uxth.w	fp, r2
 801070e:	b289      	uxth	r1, r1
 8010710:	fb0a 110b 	mla	r1, sl, fp, r1
 8010714:	4461      	add	r1, ip
 8010716:	f8d9 c000 	ldr.w	ip, [r9]
 801071a:	0c12      	lsrs	r2, r2, #16
 801071c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010720:	fb0a c202 	mla	r2, sl, r2, ip
 8010724:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010728:	b289      	uxth	r1, r1
 801072a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801072e:	4577      	cmp	r7, lr
 8010730:	f849 1b04 	str.w	r1, [r9], #4
 8010734:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010738:	d8e3      	bhi.n	8010702 <__multiply+0xb2>
 801073a:	9a01      	ldr	r2, [sp, #4]
 801073c:	f845 c002 	str.w	ip, [r5, r2]
 8010740:	9a03      	ldr	r2, [sp, #12]
 8010742:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010746:	3304      	adds	r3, #4
 8010748:	f1b9 0f00 	cmp.w	r9, #0
 801074c:	d020      	beq.n	8010790 <__multiply+0x140>
 801074e:	6829      	ldr	r1, [r5, #0]
 8010750:	f104 0c14 	add.w	ip, r4, #20
 8010754:	46ae      	mov	lr, r5
 8010756:	f04f 0a00 	mov.w	sl, #0
 801075a:	f8bc b000 	ldrh.w	fp, [ip]
 801075e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010762:	fb09 220b 	mla	r2, r9, fp, r2
 8010766:	4492      	add	sl, r2
 8010768:	b289      	uxth	r1, r1
 801076a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801076e:	f84e 1b04 	str.w	r1, [lr], #4
 8010772:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010776:	f8be 1000 	ldrh.w	r1, [lr]
 801077a:	0c12      	lsrs	r2, r2, #16
 801077c:	fb09 1102 	mla	r1, r9, r2, r1
 8010780:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010784:	4567      	cmp	r7, ip
 8010786:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801078a:	d8e6      	bhi.n	801075a <__multiply+0x10a>
 801078c:	9a01      	ldr	r2, [sp, #4]
 801078e:	50a9      	str	r1, [r5, r2]
 8010790:	3504      	adds	r5, #4
 8010792:	e79b      	b.n	80106cc <__multiply+0x7c>
 8010794:	3e01      	subs	r6, #1
 8010796:	e79d      	b.n	80106d4 <__multiply+0x84>
 8010798:	08012675 	.word	0x08012675
 801079c:	08012700 	.word	0x08012700

080107a0 <__pow5mult>:
 80107a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107a4:	4615      	mov	r5, r2
 80107a6:	f012 0203 	ands.w	r2, r2, #3
 80107aa:	4606      	mov	r6, r0
 80107ac:	460f      	mov	r7, r1
 80107ae:	d007      	beq.n	80107c0 <__pow5mult+0x20>
 80107b0:	4c25      	ldr	r4, [pc, #148]	; (8010848 <__pow5mult+0xa8>)
 80107b2:	3a01      	subs	r2, #1
 80107b4:	2300      	movs	r3, #0
 80107b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107ba:	f7ff fe55 	bl	8010468 <__multadd>
 80107be:	4607      	mov	r7, r0
 80107c0:	10ad      	asrs	r5, r5, #2
 80107c2:	d03d      	beq.n	8010840 <__pow5mult+0xa0>
 80107c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80107c6:	b97c      	cbnz	r4, 80107e8 <__pow5mult+0x48>
 80107c8:	2010      	movs	r0, #16
 80107ca:	f7ff fdd1 	bl	8010370 <malloc>
 80107ce:	4602      	mov	r2, r0
 80107d0:	6270      	str	r0, [r6, #36]	; 0x24
 80107d2:	b928      	cbnz	r0, 80107e0 <__pow5mult+0x40>
 80107d4:	4b1d      	ldr	r3, [pc, #116]	; (801084c <__pow5mult+0xac>)
 80107d6:	481e      	ldr	r0, [pc, #120]	; (8010850 <__pow5mult+0xb0>)
 80107d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80107dc:	f000 fd08 	bl	80111f0 <__assert_func>
 80107e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107e4:	6004      	str	r4, [r0, #0]
 80107e6:	60c4      	str	r4, [r0, #12]
 80107e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80107ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107f0:	b94c      	cbnz	r4, 8010806 <__pow5mult+0x66>
 80107f2:	f240 2171 	movw	r1, #625	; 0x271
 80107f6:	4630      	mov	r0, r6
 80107f8:	f7ff ff14 	bl	8010624 <__i2b>
 80107fc:	2300      	movs	r3, #0
 80107fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010802:	4604      	mov	r4, r0
 8010804:	6003      	str	r3, [r0, #0]
 8010806:	f04f 0900 	mov.w	r9, #0
 801080a:	07eb      	lsls	r3, r5, #31
 801080c:	d50a      	bpl.n	8010824 <__pow5mult+0x84>
 801080e:	4639      	mov	r1, r7
 8010810:	4622      	mov	r2, r4
 8010812:	4630      	mov	r0, r6
 8010814:	f7ff ff1c 	bl	8010650 <__multiply>
 8010818:	4639      	mov	r1, r7
 801081a:	4680      	mov	r8, r0
 801081c:	4630      	mov	r0, r6
 801081e:	f7ff fe01 	bl	8010424 <_Bfree>
 8010822:	4647      	mov	r7, r8
 8010824:	106d      	asrs	r5, r5, #1
 8010826:	d00b      	beq.n	8010840 <__pow5mult+0xa0>
 8010828:	6820      	ldr	r0, [r4, #0]
 801082a:	b938      	cbnz	r0, 801083c <__pow5mult+0x9c>
 801082c:	4622      	mov	r2, r4
 801082e:	4621      	mov	r1, r4
 8010830:	4630      	mov	r0, r6
 8010832:	f7ff ff0d 	bl	8010650 <__multiply>
 8010836:	6020      	str	r0, [r4, #0]
 8010838:	f8c0 9000 	str.w	r9, [r0]
 801083c:	4604      	mov	r4, r0
 801083e:	e7e4      	b.n	801080a <__pow5mult+0x6a>
 8010840:	4638      	mov	r0, r7
 8010842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010846:	bf00      	nop
 8010848:	08012850 	.word	0x08012850
 801084c:	08012603 	.word	0x08012603
 8010850:	08012700 	.word	0x08012700

08010854 <__lshift>:
 8010854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010858:	460c      	mov	r4, r1
 801085a:	6849      	ldr	r1, [r1, #4]
 801085c:	6923      	ldr	r3, [r4, #16]
 801085e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010862:	68a3      	ldr	r3, [r4, #8]
 8010864:	4607      	mov	r7, r0
 8010866:	4691      	mov	r9, r2
 8010868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801086c:	f108 0601 	add.w	r6, r8, #1
 8010870:	42b3      	cmp	r3, r6
 8010872:	db0b      	blt.n	801088c <__lshift+0x38>
 8010874:	4638      	mov	r0, r7
 8010876:	f7ff fd95 	bl	80103a4 <_Balloc>
 801087a:	4605      	mov	r5, r0
 801087c:	b948      	cbnz	r0, 8010892 <__lshift+0x3e>
 801087e:	4602      	mov	r2, r0
 8010880:	4b2a      	ldr	r3, [pc, #168]	; (801092c <__lshift+0xd8>)
 8010882:	482b      	ldr	r0, [pc, #172]	; (8010930 <__lshift+0xdc>)
 8010884:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010888:	f000 fcb2 	bl	80111f0 <__assert_func>
 801088c:	3101      	adds	r1, #1
 801088e:	005b      	lsls	r3, r3, #1
 8010890:	e7ee      	b.n	8010870 <__lshift+0x1c>
 8010892:	2300      	movs	r3, #0
 8010894:	f100 0114 	add.w	r1, r0, #20
 8010898:	f100 0210 	add.w	r2, r0, #16
 801089c:	4618      	mov	r0, r3
 801089e:	4553      	cmp	r3, sl
 80108a0:	db37      	blt.n	8010912 <__lshift+0xbe>
 80108a2:	6920      	ldr	r0, [r4, #16]
 80108a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108a8:	f104 0314 	add.w	r3, r4, #20
 80108ac:	f019 091f 	ands.w	r9, r9, #31
 80108b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80108b8:	d02f      	beq.n	801091a <__lshift+0xc6>
 80108ba:	f1c9 0e20 	rsb	lr, r9, #32
 80108be:	468a      	mov	sl, r1
 80108c0:	f04f 0c00 	mov.w	ip, #0
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	fa02 f209 	lsl.w	r2, r2, r9
 80108ca:	ea42 020c 	orr.w	r2, r2, ip
 80108ce:	f84a 2b04 	str.w	r2, [sl], #4
 80108d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108d6:	4298      	cmp	r0, r3
 80108d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80108dc:	d8f2      	bhi.n	80108c4 <__lshift+0x70>
 80108de:	1b03      	subs	r3, r0, r4
 80108e0:	3b15      	subs	r3, #21
 80108e2:	f023 0303 	bic.w	r3, r3, #3
 80108e6:	3304      	adds	r3, #4
 80108e8:	f104 0215 	add.w	r2, r4, #21
 80108ec:	4290      	cmp	r0, r2
 80108ee:	bf38      	it	cc
 80108f0:	2304      	movcc	r3, #4
 80108f2:	f841 c003 	str.w	ip, [r1, r3]
 80108f6:	f1bc 0f00 	cmp.w	ip, #0
 80108fa:	d001      	beq.n	8010900 <__lshift+0xac>
 80108fc:	f108 0602 	add.w	r6, r8, #2
 8010900:	3e01      	subs	r6, #1
 8010902:	4638      	mov	r0, r7
 8010904:	612e      	str	r6, [r5, #16]
 8010906:	4621      	mov	r1, r4
 8010908:	f7ff fd8c 	bl	8010424 <_Bfree>
 801090c:	4628      	mov	r0, r5
 801090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010912:	f842 0f04 	str.w	r0, [r2, #4]!
 8010916:	3301      	adds	r3, #1
 8010918:	e7c1      	b.n	801089e <__lshift+0x4a>
 801091a:	3904      	subs	r1, #4
 801091c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010920:	f841 2f04 	str.w	r2, [r1, #4]!
 8010924:	4298      	cmp	r0, r3
 8010926:	d8f9      	bhi.n	801091c <__lshift+0xc8>
 8010928:	e7ea      	b.n	8010900 <__lshift+0xac>
 801092a:	bf00      	nop
 801092c:	08012675 	.word	0x08012675
 8010930:	08012700 	.word	0x08012700

08010934 <__mcmp>:
 8010934:	690a      	ldr	r2, [r1, #16]
 8010936:	4603      	mov	r3, r0
 8010938:	6900      	ldr	r0, [r0, #16]
 801093a:	1a80      	subs	r0, r0, r2
 801093c:	b530      	push	{r4, r5, lr}
 801093e:	d10d      	bne.n	801095c <__mcmp+0x28>
 8010940:	3314      	adds	r3, #20
 8010942:	3114      	adds	r1, #20
 8010944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801094c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010954:	4295      	cmp	r5, r2
 8010956:	d002      	beq.n	801095e <__mcmp+0x2a>
 8010958:	d304      	bcc.n	8010964 <__mcmp+0x30>
 801095a:	2001      	movs	r0, #1
 801095c:	bd30      	pop	{r4, r5, pc}
 801095e:	42a3      	cmp	r3, r4
 8010960:	d3f4      	bcc.n	801094c <__mcmp+0x18>
 8010962:	e7fb      	b.n	801095c <__mcmp+0x28>
 8010964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010968:	e7f8      	b.n	801095c <__mcmp+0x28>
	...

0801096c <__mdiff>:
 801096c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010970:	460d      	mov	r5, r1
 8010972:	4607      	mov	r7, r0
 8010974:	4611      	mov	r1, r2
 8010976:	4628      	mov	r0, r5
 8010978:	4614      	mov	r4, r2
 801097a:	f7ff ffdb 	bl	8010934 <__mcmp>
 801097e:	1e06      	subs	r6, r0, #0
 8010980:	d111      	bne.n	80109a6 <__mdiff+0x3a>
 8010982:	4631      	mov	r1, r6
 8010984:	4638      	mov	r0, r7
 8010986:	f7ff fd0d 	bl	80103a4 <_Balloc>
 801098a:	4602      	mov	r2, r0
 801098c:	b928      	cbnz	r0, 801099a <__mdiff+0x2e>
 801098e:	4b39      	ldr	r3, [pc, #228]	; (8010a74 <__mdiff+0x108>)
 8010990:	f240 2132 	movw	r1, #562	; 0x232
 8010994:	4838      	ldr	r0, [pc, #224]	; (8010a78 <__mdiff+0x10c>)
 8010996:	f000 fc2b 	bl	80111f0 <__assert_func>
 801099a:	2301      	movs	r3, #1
 801099c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80109a0:	4610      	mov	r0, r2
 80109a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a6:	bfa4      	itt	ge
 80109a8:	4623      	movge	r3, r4
 80109aa:	462c      	movge	r4, r5
 80109ac:	4638      	mov	r0, r7
 80109ae:	6861      	ldr	r1, [r4, #4]
 80109b0:	bfa6      	itte	ge
 80109b2:	461d      	movge	r5, r3
 80109b4:	2600      	movge	r6, #0
 80109b6:	2601      	movlt	r6, #1
 80109b8:	f7ff fcf4 	bl	80103a4 <_Balloc>
 80109bc:	4602      	mov	r2, r0
 80109be:	b918      	cbnz	r0, 80109c8 <__mdiff+0x5c>
 80109c0:	4b2c      	ldr	r3, [pc, #176]	; (8010a74 <__mdiff+0x108>)
 80109c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80109c6:	e7e5      	b.n	8010994 <__mdiff+0x28>
 80109c8:	6927      	ldr	r7, [r4, #16]
 80109ca:	60c6      	str	r6, [r0, #12]
 80109cc:	692e      	ldr	r6, [r5, #16]
 80109ce:	f104 0014 	add.w	r0, r4, #20
 80109d2:	f105 0914 	add.w	r9, r5, #20
 80109d6:	f102 0e14 	add.w	lr, r2, #20
 80109da:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80109de:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80109e2:	3410      	adds	r4, #16
 80109e4:	46f2      	mov	sl, lr
 80109e6:	2100      	movs	r1, #0
 80109e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80109ec:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80109f0:	fa1f f883 	uxth.w	r8, r3
 80109f4:	fa11 f18b 	uxtah	r1, r1, fp
 80109f8:	0c1b      	lsrs	r3, r3, #16
 80109fa:	eba1 0808 	sub.w	r8, r1, r8
 80109fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a06:	fa1f f888 	uxth.w	r8, r8
 8010a0a:	1419      	asrs	r1, r3, #16
 8010a0c:	454e      	cmp	r6, r9
 8010a0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a12:	f84a 3b04 	str.w	r3, [sl], #4
 8010a16:	d8e7      	bhi.n	80109e8 <__mdiff+0x7c>
 8010a18:	1b73      	subs	r3, r6, r5
 8010a1a:	3b15      	subs	r3, #21
 8010a1c:	f023 0303 	bic.w	r3, r3, #3
 8010a20:	3304      	adds	r3, #4
 8010a22:	3515      	adds	r5, #21
 8010a24:	42ae      	cmp	r6, r5
 8010a26:	bf38      	it	cc
 8010a28:	2304      	movcc	r3, #4
 8010a2a:	4418      	add	r0, r3
 8010a2c:	4473      	add	r3, lr
 8010a2e:	469e      	mov	lr, r3
 8010a30:	4606      	mov	r6, r0
 8010a32:	4566      	cmp	r6, ip
 8010a34:	d30e      	bcc.n	8010a54 <__mdiff+0xe8>
 8010a36:	f10c 0103 	add.w	r1, ip, #3
 8010a3a:	1a09      	subs	r1, r1, r0
 8010a3c:	f021 0103 	bic.w	r1, r1, #3
 8010a40:	3803      	subs	r0, #3
 8010a42:	4584      	cmp	ip, r0
 8010a44:	bf38      	it	cc
 8010a46:	2100      	movcc	r1, #0
 8010a48:	4419      	add	r1, r3
 8010a4a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010a4e:	b17b      	cbz	r3, 8010a70 <__mdiff+0x104>
 8010a50:	6117      	str	r7, [r2, #16]
 8010a52:	e7a5      	b.n	80109a0 <__mdiff+0x34>
 8010a54:	f856 8b04 	ldr.w	r8, [r6], #4
 8010a58:	fa11 f488 	uxtah	r4, r1, r8
 8010a5c:	1425      	asrs	r5, r4, #16
 8010a5e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8010a62:	b2a4      	uxth	r4, r4
 8010a64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010a68:	f84e 4b04 	str.w	r4, [lr], #4
 8010a6c:	1429      	asrs	r1, r5, #16
 8010a6e:	e7e0      	b.n	8010a32 <__mdiff+0xc6>
 8010a70:	3f01      	subs	r7, #1
 8010a72:	e7ea      	b.n	8010a4a <__mdiff+0xde>
 8010a74:	08012675 	.word	0x08012675
 8010a78:	08012700 	.word	0x08012700

08010a7c <__ulp>:
 8010a7c:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <__ulp+0x48>)
 8010a7e:	400b      	ands	r3, r1
 8010a80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dd02      	ble.n	8010a8e <__ulp+0x12>
 8010a88:	2000      	movs	r0, #0
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4770      	bx	lr
 8010a8e:	425b      	negs	r3, r3
 8010a90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010a94:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a98:	f04f 0000 	mov.w	r0, #0
 8010a9c:	f04f 0100 	mov.w	r1, #0
 8010aa0:	da04      	bge.n	8010aac <__ulp+0x30>
 8010aa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010aa6:	fa43 f102 	asr.w	r1, r3, r2
 8010aaa:	4770      	bx	lr
 8010aac:	f1a2 0314 	sub.w	r3, r2, #20
 8010ab0:	2b1e      	cmp	r3, #30
 8010ab2:	bfda      	itte	le
 8010ab4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010ab8:	fa22 f303 	lsrle.w	r3, r2, r3
 8010abc:	2301      	movgt	r3, #1
 8010abe:	4618      	mov	r0, r3
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	7ff00000 	.word	0x7ff00000

08010ac8 <__b2d>:
 8010ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010acc:	6907      	ldr	r7, [r0, #16]
 8010ace:	f100 0914 	add.w	r9, r0, #20
 8010ad2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010ad6:	f1a7 0804 	sub.w	r8, r7, #4
 8010ada:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f7ff fd52 	bl	8010588 <__hi0bits>
 8010ae4:	f1c0 0320 	rsb	r3, r0, #32
 8010ae8:	280a      	cmp	r0, #10
 8010aea:	600b      	str	r3, [r1, #0]
 8010aec:	491f      	ldr	r1, [pc, #124]	; (8010b6c <__b2d+0xa4>)
 8010aee:	dc17      	bgt.n	8010b20 <__b2d+0x58>
 8010af0:	f1c0 0c0b 	rsb	ip, r0, #11
 8010af4:	45c1      	cmp	r9, r8
 8010af6:	fa26 f30c 	lsr.w	r3, r6, ip
 8010afa:	bf38      	it	cc
 8010afc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010b00:	ea43 0501 	orr.w	r5, r3, r1
 8010b04:	bf28      	it	cs
 8010b06:	2200      	movcs	r2, #0
 8010b08:	f100 0315 	add.w	r3, r0, #21
 8010b0c:	fa06 f303 	lsl.w	r3, r6, r3
 8010b10:	fa22 f20c 	lsr.w	r2, r2, ip
 8010b14:	ea43 0402 	orr.w	r4, r3, r2
 8010b18:	4620      	mov	r0, r4
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b20:	45c1      	cmp	r9, r8
 8010b22:	bf3a      	itte	cc
 8010b24:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010b28:	f1a7 0808 	subcc.w	r8, r7, #8
 8010b2c:	2200      	movcs	r2, #0
 8010b2e:	f1b0 030b 	subs.w	r3, r0, #11
 8010b32:	d016      	beq.n	8010b62 <__b2d+0x9a>
 8010b34:	f1c3 0720 	rsb	r7, r3, #32
 8010b38:	fa22 f107 	lsr.w	r1, r2, r7
 8010b3c:	45c8      	cmp	r8, r9
 8010b3e:	fa06 f603 	lsl.w	r6, r6, r3
 8010b42:	ea46 0601 	orr.w	r6, r6, r1
 8010b46:	bf8c      	ite	hi
 8010b48:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010b4c:	2100      	movls	r1, #0
 8010b4e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8010b52:	fa02 f003 	lsl.w	r0, r2, r3
 8010b56:	40f9      	lsrs	r1, r7
 8010b58:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010b5c:	ea40 0401 	orr.w	r4, r0, r1
 8010b60:	e7da      	b.n	8010b18 <__b2d+0x50>
 8010b62:	ea46 0501 	orr.w	r5, r6, r1
 8010b66:	4614      	mov	r4, r2
 8010b68:	e7d6      	b.n	8010b18 <__b2d+0x50>
 8010b6a:	bf00      	nop
 8010b6c:	3ff00000 	.word	0x3ff00000

08010b70 <__d2b>:
 8010b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010b74:	2101      	movs	r1, #1
 8010b76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010b7a:	4690      	mov	r8, r2
 8010b7c:	461d      	mov	r5, r3
 8010b7e:	f7ff fc11 	bl	80103a4 <_Balloc>
 8010b82:	4604      	mov	r4, r0
 8010b84:	b930      	cbnz	r0, 8010b94 <__d2b+0x24>
 8010b86:	4602      	mov	r2, r0
 8010b88:	4b25      	ldr	r3, [pc, #148]	; (8010c20 <__d2b+0xb0>)
 8010b8a:	4826      	ldr	r0, [pc, #152]	; (8010c24 <__d2b+0xb4>)
 8010b8c:	f240 310a 	movw	r1, #778	; 0x30a
 8010b90:	f000 fb2e 	bl	80111f0 <__assert_func>
 8010b94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010b98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010b9c:	bb2d      	cbnz	r5, 8010bea <__d2b+0x7a>
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8010ba4:	d026      	beq.n	8010bf4 <__d2b+0x84>
 8010ba6:	4668      	mov	r0, sp
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	f7ff fd0d 	bl	80105c8 <__lo0bits>
 8010bae:	9900      	ldr	r1, [sp, #0]
 8010bb0:	b1f0      	cbz	r0, 8010bf0 <__d2b+0x80>
 8010bb2:	9a01      	ldr	r2, [sp, #4]
 8010bb4:	f1c0 0320 	rsb	r3, r0, #32
 8010bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bbc:	430b      	orrs	r3, r1
 8010bbe:	40c2      	lsrs	r2, r0
 8010bc0:	6163      	str	r3, [r4, #20]
 8010bc2:	9201      	str	r2, [sp, #4]
 8010bc4:	9b01      	ldr	r3, [sp, #4]
 8010bc6:	61a3      	str	r3, [r4, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	bf14      	ite	ne
 8010bcc:	2102      	movne	r1, #2
 8010bce:	2101      	moveq	r1, #1
 8010bd0:	6121      	str	r1, [r4, #16]
 8010bd2:	b1c5      	cbz	r5, 8010c06 <__d2b+0x96>
 8010bd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010bd8:	4405      	add	r5, r0
 8010bda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010bde:	603d      	str	r5, [r7, #0]
 8010be0:	6030      	str	r0, [r6, #0]
 8010be2:	4620      	mov	r0, r4
 8010be4:	b002      	add	sp, #8
 8010be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bee:	e7d6      	b.n	8010b9e <__d2b+0x2e>
 8010bf0:	6161      	str	r1, [r4, #20]
 8010bf2:	e7e7      	b.n	8010bc4 <__d2b+0x54>
 8010bf4:	a801      	add	r0, sp, #4
 8010bf6:	f7ff fce7 	bl	80105c8 <__lo0bits>
 8010bfa:	9b01      	ldr	r3, [sp, #4]
 8010bfc:	6163      	str	r3, [r4, #20]
 8010bfe:	2101      	movs	r1, #1
 8010c00:	6121      	str	r1, [r4, #16]
 8010c02:	3020      	adds	r0, #32
 8010c04:	e7e5      	b.n	8010bd2 <__d2b+0x62>
 8010c06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010c0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c0e:	6038      	str	r0, [r7, #0]
 8010c10:	6918      	ldr	r0, [r3, #16]
 8010c12:	f7ff fcb9 	bl	8010588 <__hi0bits>
 8010c16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010c1a:	6031      	str	r1, [r6, #0]
 8010c1c:	e7e1      	b.n	8010be2 <__d2b+0x72>
 8010c1e:	bf00      	nop
 8010c20:	08012675 	.word	0x08012675
 8010c24:	08012700 	.word	0x08012700

08010c28 <__ratio>:
 8010c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c2c:	4688      	mov	r8, r1
 8010c2e:	4669      	mov	r1, sp
 8010c30:	4681      	mov	r9, r0
 8010c32:	f7ff ff49 	bl	8010ac8 <__b2d>
 8010c36:	460f      	mov	r7, r1
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	a901      	add	r1, sp, #4
 8010c40:	f7ff ff42 	bl	8010ac8 <__b2d>
 8010c44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010c4c:	eba3 0c02 	sub.w	ip, r3, r2
 8010c50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c54:	1a9b      	subs	r3, r3, r2
 8010c56:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	bfd5      	itete	le
 8010c5e:	460a      	movle	r2, r1
 8010c60:	462a      	movgt	r2, r5
 8010c62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c6a:	468b      	mov	fp, r1
 8010c6c:	bfd8      	it	le
 8010c6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010c72:	465b      	mov	r3, fp
 8010c74:	4602      	mov	r2, r0
 8010c76:	4639      	mov	r1, r7
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f7ef fdbf 	bl	80007fc <__aeabi_ddiv>
 8010c7e:	b003      	add	sp, #12
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c84 <__copybits>:
 8010c84:	3901      	subs	r1, #1
 8010c86:	b570      	push	{r4, r5, r6, lr}
 8010c88:	1149      	asrs	r1, r1, #5
 8010c8a:	6914      	ldr	r4, [r2, #16]
 8010c8c:	3101      	adds	r1, #1
 8010c8e:	f102 0314 	add.w	r3, r2, #20
 8010c92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c9a:	1f05      	subs	r5, r0, #4
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	d30c      	bcc.n	8010cba <__copybits+0x36>
 8010ca0:	1aa3      	subs	r3, r4, r2
 8010ca2:	3b11      	subs	r3, #17
 8010ca4:	f023 0303 	bic.w	r3, r3, #3
 8010ca8:	3211      	adds	r2, #17
 8010caa:	42a2      	cmp	r2, r4
 8010cac:	bf88      	it	hi
 8010cae:	2300      	movhi	r3, #0
 8010cb0:	4418      	add	r0, r3
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	4288      	cmp	r0, r1
 8010cb6:	d305      	bcc.n	8010cc4 <__copybits+0x40>
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	f853 6b04 	ldr.w	r6, [r3], #4
 8010cbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8010cc2:	e7eb      	b.n	8010c9c <__copybits+0x18>
 8010cc4:	f840 3b04 	str.w	r3, [r0], #4
 8010cc8:	e7f4      	b.n	8010cb4 <__copybits+0x30>

08010cca <__any_on>:
 8010cca:	f100 0214 	add.w	r2, r0, #20
 8010cce:	6900      	ldr	r0, [r0, #16]
 8010cd0:	114b      	asrs	r3, r1, #5
 8010cd2:	4298      	cmp	r0, r3
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	db11      	blt.n	8010cfc <__any_on+0x32>
 8010cd8:	dd0a      	ble.n	8010cf0 <__any_on+0x26>
 8010cda:	f011 011f 	ands.w	r1, r1, #31
 8010cde:	d007      	beq.n	8010cf0 <__any_on+0x26>
 8010ce0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010ce4:	fa24 f001 	lsr.w	r0, r4, r1
 8010ce8:	fa00 f101 	lsl.w	r1, r0, r1
 8010cec:	428c      	cmp	r4, r1
 8010cee:	d10b      	bne.n	8010d08 <__any_on+0x3e>
 8010cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d803      	bhi.n	8010d00 <__any_on+0x36>
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	bd10      	pop	{r4, pc}
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	e7f7      	b.n	8010cf0 <__any_on+0x26>
 8010d00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d04:	2900      	cmp	r1, #0
 8010d06:	d0f5      	beq.n	8010cf4 <__any_on+0x2a>
 8010d08:	2001      	movs	r0, #1
 8010d0a:	e7f6      	b.n	8010cfa <__any_on+0x30>

08010d0c <_calloc_r>:
 8010d0c:	b570      	push	{r4, r5, r6, lr}
 8010d0e:	fba1 5402 	umull	r5, r4, r1, r2
 8010d12:	b934      	cbnz	r4, 8010d22 <_calloc_r+0x16>
 8010d14:	4629      	mov	r1, r5
 8010d16:	f000 f877 	bl	8010e08 <_malloc_r>
 8010d1a:	4606      	mov	r6, r0
 8010d1c:	b928      	cbnz	r0, 8010d2a <_calloc_r+0x1e>
 8010d1e:	4630      	mov	r0, r6
 8010d20:	bd70      	pop	{r4, r5, r6, pc}
 8010d22:	220c      	movs	r2, #12
 8010d24:	6002      	str	r2, [r0, #0]
 8010d26:	2600      	movs	r6, #0
 8010d28:	e7f9      	b.n	8010d1e <_calloc_r+0x12>
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	f7fc fbb3 	bl	800d498 <memset>
 8010d32:	e7f4      	b.n	8010d1e <_calloc_r+0x12>

08010d34 <_free_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4605      	mov	r5, r0
 8010d38:	2900      	cmp	r1, #0
 8010d3a:	d041      	beq.n	8010dc0 <_free_r+0x8c>
 8010d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d40:	1f0c      	subs	r4, r1, #4
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bfb8      	it	lt
 8010d46:	18e4      	addlt	r4, r4, r3
 8010d48:	f000 fa9c 	bl	8011284 <__malloc_lock>
 8010d4c:	4a1d      	ldr	r2, [pc, #116]	; (8010dc4 <_free_r+0x90>)
 8010d4e:	6813      	ldr	r3, [r2, #0]
 8010d50:	b933      	cbnz	r3, 8010d60 <_free_r+0x2c>
 8010d52:	6063      	str	r3, [r4, #4]
 8010d54:	6014      	str	r4, [r2, #0]
 8010d56:	4628      	mov	r0, r5
 8010d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d5c:	f000 ba98 	b.w	8011290 <__malloc_unlock>
 8010d60:	42a3      	cmp	r3, r4
 8010d62:	d908      	bls.n	8010d76 <_free_r+0x42>
 8010d64:	6820      	ldr	r0, [r4, #0]
 8010d66:	1821      	adds	r1, r4, r0
 8010d68:	428b      	cmp	r3, r1
 8010d6a:	bf01      	itttt	eq
 8010d6c:	6819      	ldreq	r1, [r3, #0]
 8010d6e:	685b      	ldreq	r3, [r3, #4]
 8010d70:	1809      	addeq	r1, r1, r0
 8010d72:	6021      	streq	r1, [r4, #0]
 8010d74:	e7ed      	b.n	8010d52 <_free_r+0x1e>
 8010d76:	461a      	mov	r2, r3
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	b10b      	cbz	r3, 8010d80 <_free_r+0x4c>
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d9fa      	bls.n	8010d76 <_free_r+0x42>
 8010d80:	6811      	ldr	r1, [r2, #0]
 8010d82:	1850      	adds	r0, r2, r1
 8010d84:	42a0      	cmp	r0, r4
 8010d86:	d10b      	bne.n	8010da0 <_free_r+0x6c>
 8010d88:	6820      	ldr	r0, [r4, #0]
 8010d8a:	4401      	add	r1, r0
 8010d8c:	1850      	adds	r0, r2, r1
 8010d8e:	4283      	cmp	r3, r0
 8010d90:	6011      	str	r1, [r2, #0]
 8010d92:	d1e0      	bne.n	8010d56 <_free_r+0x22>
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	6053      	str	r3, [r2, #4]
 8010d9a:	4401      	add	r1, r0
 8010d9c:	6011      	str	r1, [r2, #0]
 8010d9e:	e7da      	b.n	8010d56 <_free_r+0x22>
 8010da0:	d902      	bls.n	8010da8 <_free_r+0x74>
 8010da2:	230c      	movs	r3, #12
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	e7d6      	b.n	8010d56 <_free_r+0x22>
 8010da8:	6820      	ldr	r0, [r4, #0]
 8010daa:	1821      	adds	r1, r4, r0
 8010dac:	428b      	cmp	r3, r1
 8010dae:	bf04      	itt	eq
 8010db0:	6819      	ldreq	r1, [r3, #0]
 8010db2:	685b      	ldreq	r3, [r3, #4]
 8010db4:	6063      	str	r3, [r4, #4]
 8010db6:	bf04      	itt	eq
 8010db8:	1809      	addeq	r1, r1, r0
 8010dba:	6021      	streq	r1, [r4, #0]
 8010dbc:	6054      	str	r4, [r2, #4]
 8010dbe:	e7ca      	b.n	8010d56 <_free_r+0x22>
 8010dc0:	bd38      	pop	{r3, r4, r5, pc}
 8010dc2:	bf00      	nop
 8010dc4:	20001a9c 	.word	0x20001a9c

08010dc8 <sbrk_aligned>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	4e0e      	ldr	r6, [pc, #56]	; (8010e04 <sbrk_aligned+0x3c>)
 8010dcc:	460c      	mov	r4, r1
 8010dce:	6831      	ldr	r1, [r6, #0]
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	b911      	cbnz	r1, 8010dda <sbrk_aligned+0x12>
 8010dd4:	f000 f9ee 	bl	80111b4 <_sbrk_r>
 8010dd8:	6030      	str	r0, [r6, #0]
 8010dda:	4621      	mov	r1, r4
 8010ddc:	4628      	mov	r0, r5
 8010dde:	f000 f9e9 	bl	80111b4 <_sbrk_r>
 8010de2:	1c43      	adds	r3, r0, #1
 8010de4:	d00a      	beq.n	8010dfc <sbrk_aligned+0x34>
 8010de6:	1cc4      	adds	r4, r0, #3
 8010de8:	f024 0403 	bic.w	r4, r4, #3
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	d007      	beq.n	8010e00 <sbrk_aligned+0x38>
 8010df0:	1a21      	subs	r1, r4, r0
 8010df2:	4628      	mov	r0, r5
 8010df4:	f000 f9de 	bl	80111b4 <_sbrk_r>
 8010df8:	3001      	adds	r0, #1
 8010dfa:	d101      	bne.n	8010e00 <sbrk_aligned+0x38>
 8010dfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010e00:	4620      	mov	r0, r4
 8010e02:	bd70      	pop	{r4, r5, r6, pc}
 8010e04:	20001aa0 	.word	0x20001aa0

08010e08 <_malloc_r>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	1ccd      	adds	r5, r1, #3
 8010e0e:	f025 0503 	bic.w	r5, r5, #3
 8010e12:	3508      	adds	r5, #8
 8010e14:	2d0c      	cmp	r5, #12
 8010e16:	bf38      	it	cc
 8010e18:	250c      	movcc	r5, #12
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	4607      	mov	r7, r0
 8010e1e:	db01      	blt.n	8010e24 <_malloc_r+0x1c>
 8010e20:	42a9      	cmp	r1, r5
 8010e22:	d905      	bls.n	8010e30 <_malloc_r+0x28>
 8010e24:	230c      	movs	r3, #12
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	2600      	movs	r6, #0
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e30:	4e2e      	ldr	r6, [pc, #184]	; (8010eec <_malloc_r+0xe4>)
 8010e32:	f000 fa27 	bl	8011284 <__malloc_lock>
 8010e36:	6833      	ldr	r3, [r6, #0]
 8010e38:	461c      	mov	r4, r3
 8010e3a:	bb34      	cbnz	r4, 8010e8a <_malloc_r+0x82>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7ff ffc2 	bl	8010dc8 <sbrk_aligned>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	4604      	mov	r4, r0
 8010e48:	d14d      	bne.n	8010ee6 <_malloc_r+0xde>
 8010e4a:	6834      	ldr	r4, [r6, #0]
 8010e4c:	4626      	mov	r6, r4
 8010e4e:	2e00      	cmp	r6, #0
 8010e50:	d140      	bne.n	8010ed4 <_malloc_r+0xcc>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4631      	mov	r1, r6
 8010e56:	4638      	mov	r0, r7
 8010e58:	eb04 0803 	add.w	r8, r4, r3
 8010e5c:	f000 f9aa 	bl	80111b4 <_sbrk_r>
 8010e60:	4580      	cmp	r8, r0
 8010e62:	d13a      	bne.n	8010eda <_malloc_r+0xd2>
 8010e64:	6821      	ldr	r1, [r4, #0]
 8010e66:	3503      	adds	r5, #3
 8010e68:	1a6d      	subs	r5, r5, r1
 8010e6a:	f025 0503 	bic.w	r5, r5, #3
 8010e6e:	3508      	adds	r5, #8
 8010e70:	2d0c      	cmp	r5, #12
 8010e72:	bf38      	it	cc
 8010e74:	250c      	movcc	r5, #12
 8010e76:	4629      	mov	r1, r5
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f7ff ffa5 	bl	8010dc8 <sbrk_aligned>
 8010e7e:	3001      	adds	r0, #1
 8010e80:	d02b      	beq.n	8010eda <_malloc_r+0xd2>
 8010e82:	6823      	ldr	r3, [r4, #0]
 8010e84:	442b      	add	r3, r5
 8010e86:	6023      	str	r3, [r4, #0]
 8010e88:	e00e      	b.n	8010ea8 <_malloc_r+0xa0>
 8010e8a:	6822      	ldr	r2, [r4, #0]
 8010e8c:	1b52      	subs	r2, r2, r5
 8010e8e:	d41e      	bmi.n	8010ece <_malloc_r+0xc6>
 8010e90:	2a0b      	cmp	r2, #11
 8010e92:	d916      	bls.n	8010ec2 <_malloc_r+0xba>
 8010e94:	1961      	adds	r1, r4, r5
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	6025      	str	r5, [r4, #0]
 8010e9a:	bf18      	it	ne
 8010e9c:	6059      	strne	r1, [r3, #4]
 8010e9e:	6863      	ldr	r3, [r4, #4]
 8010ea0:	bf08      	it	eq
 8010ea2:	6031      	streq	r1, [r6, #0]
 8010ea4:	5162      	str	r2, [r4, r5]
 8010ea6:	604b      	str	r3, [r1, #4]
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	f104 060b 	add.w	r6, r4, #11
 8010eae:	f000 f9ef 	bl	8011290 <__malloc_unlock>
 8010eb2:	f026 0607 	bic.w	r6, r6, #7
 8010eb6:	1d23      	adds	r3, r4, #4
 8010eb8:	1af2      	subs	r2, r6, r3
 8010eba:	d0b6      	beq.n	8010e2a <_malloc_r+0x22>
 8010ebc:	1b9b      	subs	r3, r3, r6
 8010ebe:	50a3      	str	r3, [r4, r2]
 8010ec0:	e7b3      	b.n	8010e2a <_malloc_r+0x22>
 8010ec2:	6862      	ldr	r2, [r4, #4]
 8010ec4:	42a3      	cmp	r3, r4
 8010ec6:	bf0c      	ite	eq
 8010ec8:	6032      	streq	r2, [r6, #0]
 8010eca:	605a      	strne	r2, [r3, #4]
 8010ecc:	e7ec      	b.n	8010ea8 <_malloc_r+0xa0>
 8010ece:	4623      	mov	r3, r4
 8010ed0:	6864      	ldr	r4, [r4, #4]
 8010ed2:	e7b2      	b.n	8010e3a <_malloc_r+0x32>
 8010ed4:	4634      	mov	r4, r6
 8010ed6:	6876      	ldr	r6, [r6, #4]
 8010ed8:	e7b9      	b.n	8010e4e <_malloc_r+0x46>
 8010eda:	230c      	movs	r3, #12
 8010edc:	603b      	str	r3, [r7, #0]
 8010ede:	4638      	mov	r0, r7
 8010ee0:	f000 f9d6 	bl	8011290 <__malloc_unlock>
 8010ee4:	e7a1      	b.n	8010e2a <_malloc_r+0x22>
 8010ee6:	6025      	str	r5, [r4, #0]
 8010ee8:	e7de      	b.n	8010ea8 <_malloc_r+0xa0>
 8010eea:	bf00      	nop
 8010eec:	20001a9c 	.word	0x20001a9c

08010ef0 <__ssputs_r>:
 8010ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef4:	688e      	ldr	r6, [r1, #8]
 8010ef6:	429e      	cmp	r6, r3
 8010ef8:	4682      	mov	sl, r0
 8010efa:	460c      	mov	r4, r1
 8010efc:	4690      	mov	r8, r2
 8010efe:	461f      	mov	r7, r3
 8010f00:	d838      	bhi.n	8010f74 <__ssputs_r+0x84>
 8010f02:	898a      	ldrh	r2, [r1, #12]
 8010f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f08:	d032      	beq.n	8010f70 <__ssputs_r+0x80>
 8010f0a:	6825      	ldr	r5, [r4, #0]
 8010f0c:	6909      	ldr	r1, [r1, #16]
 8010f0e:	eba5 0901 	sub.w	r9, r5, r1
 8010f12:	6965      	ldr	r5, [r4, #20]
 8010f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	444b      	add	r3, r9
 8010f20:	106d      	asrs	r5, r5, #1
 8010f22:	429d      	cmp	r5, r3
 8010f24:	bf38      	it	cc
 8010f26:	461d      	movcc	r5, r3
 8010f28:	0553      	lsls	r3, r2, #21
 8010f2a:	d531      	bpl.n	8010f90 <__ssputs_r+0xa0>
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	f7ff ff6b 	bl	8010e08 <_malloc_r>
 8010f32:	4606      	mov	r6, r0
 8010f34:	b950      	cbnz	r0, 8010f4c <__ssputs_r+0x5c>
 8010f36:	230c      	movs	r3, #12
 8010f38:	f8ca 3000 	str.w	r3, [sl]
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f42:	81a3      	strh	r3, [r4, #12]
 8010f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4c:	6921      	ldr	r1, [r4, #16]
 8010f4e:	464a      	mov	r2, r9
 8010f50:	f7fc fa94 	bl	800d47c <memcpy>
 8010f54:	89a3      	ldrh	r3, [r4, #12]
 8010f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f5e:	81a3      	strh	r3, [r4, #12]
 8010f60:	6126      	str	r6, [r4, #16]
 8010f62:	6165      	str	r5, [r4, #20]
 8010f64:	444e      	add	r6, r9
 8010f66:	eba5 0509 	sub.w	r5, r5, r9
 8010f6a:	6026      	str	r6, [r4, #0]
 8010f6c:	60a5      	str	r5, [r4, #8]
 8010f6e:	463e      	mov	r6, r7
 8010f70:	42be      	cmp	r6, r7
 8010f72:	d900      	bls.n	8010f76 <__ssputs_r+0x86>
 8010f74:	463e      	mov	r6, r7
 8010f76:	6820      	ldr	r0, [r4, #0]
 8010f78:	4632      	mov	r2, r6
 8010f7a:	4641      	mov	r1, r8
 8010f7c:	f000 f968 	bl	8011250 <memmove>
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	1b9b      	subs	r3, r3, r6
 8010f84:	60a3      	str	r3, [r4, #8]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	4433      	add	r3, r6
 8010f8a:	6023      	str	r3, [r4, #0]
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	e7db      	b.n	8010f48 <__ssputs_r+0x58>
 8010f90:	462a      	mov	r2, r5
 8010f92:	f000 f983 	bl	801129c <_realloc_r>
 8010f96:	4606      	mov	r6, r0
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d1e1      	bne.n	8010f60 <__ssputs_r+0x70>
 8010f9c:	6921      	ldr	r1, [r4, #16]
 8010f9e:	4650      	mov	r0, sl
 8010fa0:	f7ff fec8 	bl	8010d34 <_free_r>
 8010fa4:	e7c7      	b.n	8010f36 <__ssputs_r+0x46>
	...

08010fa8 <_svfiprintf_r>:
 8010fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	4698      	mov	r8, r3
 8010fae:	898b      	ldrh	r3, [r1, #12]
 8010fb0:	061b      	lsls	r3, r3, #24
 8010fb2:	b09d      	sub	sp, #116	; 0x74
 8010fb4:	4607      	mov	r7, r0
 8010fb6:	460d      	mov	r5, r1
 8010fb8:	4614      	mov	r4, r2
 8010fba:	d50e      	bpl.n	8010fda <_svfiprintf_r+0x32>
 8010fbc:	690b      	ldr	r3, [r1, #16]
 8010fbe:	b963      	cbnz	r3, 8010fda <_svfiprintf_r+0x32>
 8010fc0:	2140      	movs	r1, #64	; 0x40
 8010fc2:	f7ff ff21 	bl	8010e08 <_malloc_r>
 8010fc6:	6028      	str	r0, [r5, #0]
 8010fc8:	6128      	str	r0, [r5, #16]
 8010fca:	b920      	cbnz	r0, 8010fd6 <_svfiprintf_r+0x2e>
 8010fcc:	230c      	movs	r3, #12
 8010fce:	603b      	str	r3, [r7, #0]
 8010fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fd4:	e0d1      	b.n	801117a <_svfiprintf_r+0x1d2>
 8010fd6:	2340      	movs	r3, #64	; 0x40
 8010fd8:	616b      	str	r3, [r5, #20]
 8010fda:	2300      	movs	r3, #0
 8010fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010fde:	2320      	movs	r3, #32
 8010fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fe8:	2330      	movs	r3, #48	; 0x30
 8010fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011194 <_svfiprintf_r+0x1ec>
 8010fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ff2:	f04f 0901 	mov.w	r9, #1
 8010ff6:	4623      	mov	r3, r4
 8010ff8:	469a      	mov	sl, r3
 8010ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ffe:	b10a      	cbz	r2, 8011004 <_svfiprintf_r+0x5c>
 8011000:	2a25      	cmp	r2, #37	; 0x25
 8011002:	d1f9      	bne.n	8010ff8 <_svfiprintf_r+0x50>
 8011004:	ebba 0b04 	subs.w	fp, sl, r4
 8011008:	d00b      	beq.n	8011022 <_svfiprintf_r+0x7a>
 801100a:	465b      	mov	r3, fp
 801100c:	4622      	mov	r2, r4
 801100e:	4629      	mov	r1, r5
 8011010:	4638      	mov	r0, r7
 8011012:	f7ff ff6d 	bl	8010ef0 <__ssputs_r>
 8011016:	3001      	adds	r0, #1
 8011018:	f000 80aa 	beq.w	8011170 <_svfiprintf_r+0x1c8>
 801101c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801101e:	445a      	add	r2, fp
 8011020:	9209      	str	r2, [sp, #36]	; 0x24
 8011022:	f89a 3000 	ldrb.w	r3, [sl]
 8011026:	2b00      	cmp	r3, #0
 8011028:	f000 80a2 	beq.w	8011170 <_svfiprintf_r+0x1c8>
 801102c:	2300      	movs	r3, #0
 801102e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011036:	f10a 0a01 	add.w	sl, sl, #1
 801103a:	9304      	str	r3, [sp, #16]
 801103c:	9307      	str	r3, [sp, #28]
 801103e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011042:	931a      	str	r3, [sp, #104]	; 0x68
 8011044:	4654      	mov	r4, sl
 8011046:	2205      	movs	r2, #5
 8011048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801104c:	4851      	ldr	r0, [pc, #324]	; (8011194 <_svfiprintf_r+0x1ec>)
 801104e:	f7ef f89f 	bl	8000190 <memchr>
 8011052:	9a04      	ldr	r2, [sp, #16]
 8011054:	b9d8      	cbnz	r0, 801108e <_svfiprintf_r+0xe6>
 8011056:	06d0      	lsls	r0, r2, #27
 8011058:	bf44      	itt	mi
 801105a:	2320      	movmi	r3, #32
 801105c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011060:	0711      	lsls	r1, r2, #28
 8011062:	bf44      	itt	mi
 8011064:	232b      	movmi	r3, #43	; 0x2b
 8011066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801106a:	f89a 3000 	ldrb.w	r3, [sl]
 801106e:	2b2a      	cmp	r3, #42	; 0x2a
 8011070:	d015      	beq.n	801109e <_svfiprintf_r+0xf6>
 8011072:	9a07      	ldr	r2, [sp, #28]
 8011074:	4654      	mov	r4, sl
 8011076:	2000      	movs	r0, #0
 8011078:	f04f 0c0a 	mov.w	ip, #10
 801107c:	4621      	mov	r1, r4
 801107e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011082:	3b30      	subs	r3, #48	; 0x30
 8011084:	2b09      	cmp	r3, #9
 8011086:	d94e      	bls.n	8011126 <_svfiprintf_r+0x17e>
 8011088:	b1b0      	cbz	r0, 80110b8 <_svfiprintf_r+0x110>
 801108a:	9207      	str	r2, [sp, #28]
 801108c:	e014      	b.n	80110b8 <_svfiprintf_r+0x110>
 801108e:	eba0 0308 	sub.w	r3, r0, r8
 8011092:	fa09 f303 	lsl.w	r3, r9, r3
 8011096:	4313      	orrs	r3, r2
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	46a2      	mov	sl, r4
 801109c:	e7d2      	b.n	8011044 <_svfiprintf_r+0x9c>
 801109e:	9b03      	ldr	r3, [sp, #12]
 80110a0:	1d19      	adds	r1, r3, #4
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	9103      	str	r1, [sp, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	bfbb      	ittet	lt
 80110aa:	425b      	neglt	r3, r3
 80110ac:	f042 0202 	orrlt.w	r2, r2, #2
 80110b0:	9307      	strge	r3, [sp, #28]
 80110b2:	9307      	strlt	r3, [sp, #28]
 80110b4:	bfb8      	it	lt
 80110b6:	9204      	strlt	r2, [sp, #16]
 80110b8:	7823      	ldrb	r3, [r4, #0]
 80110ba:	2b2e      	cmp	r3, #46	; 0x2e
 80110bc:	d10c      	bne.n	80110d8 <_svfiprintf_r+0x130>
 80110be:	7863      	ldrb	r3, [r4, #1]
 80110c0:	2b2a      	cmp	r3, #42	; 0x2a
 80110c2:	d135      	bne.n	8011130 <_svfiprintf_r+0x188>
 80110c4:	9b03      	ldr	r3, [sp, #12]
 80110c6:	1d1a      	adds	r2, r3, #4
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	9203      	str	r2, [sp, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	bfb8      	it	lt
 80110d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80110d4:	3402      	adds	r4, #2
 80110d6:	9305      	str	r3, [sp, #20]
 80110d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8011198 <_svfiprintf_r+0x1f0>
 80110dc:	7821      	ldrb	r1, [r4, #0]
 80110de:	2203      	movs	r2, #3
 80110e0:	4650      	mov	r0, sl
 80110e2:	f7ef f855 	bl	8000190 <memchr>
 80110e6:	b140      	cbz	r0, 80110fa <_svfiprintf_r+0x152>
 80110e8:	2340      	movs	r3, #64	; 0x40
 80110ea:	eba0 000a 	sub.w	r0, r0, sl
 80110ee:	fa03 f000 	lsl.w	r0, r3, r0
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	4303      	orrs	r3, r0
 80110f6:	3401      	adds	r4, #1
 80110f8:	9304      	str	r3, [sp, #16]
 80110fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110fe:	4827      	ldr	r0, [pc, #156]	; (801119c <_svfiprintf_r+0x1f4>)
 8011100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011104:	2206      	movs	r2, #6
 8011106:	f7ef f843 	bl	8000190 <memchr>
 801110a:	2800      	cmp	r0, #0
 801110c:	d038      	beq.n	8011180 <_svfiprintf_r+0x1d8>
 801110e:	4b24      	ldr	r3, [pc, #144]	; (80111a0 <_svfiprintf_r+0x1f8>)
 8011110:	bb1b      	cbnz	r3, 801115a <_svfiprintf_r+0x1b2>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	3307      	adds	r3, #7
 8011116:	f023 0307 	bic.w	r3, r3, #7
 801111a:	3308      	adds	r3, #8
 801111c:	9303      	str	r3, [sp, #12]
 801111e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011120:	4433      	add	r3, r6
 8011122:	9309      	str	r3, [sp, #36]	; 0x24
 8011124:	e767      	b.n	8010ff6 <_svfiprintf_r+0x4e>
 8011126:	fb0c 3202 	mla	r2, ip, r2, r3
 801112a:	460c      	mov	r4, r1
 801112c:	2001      	movs	r0, #1
 801112e:	e7a5      	b.n	801107c <_svfiprintf_r+0xd4>
 8011130:	2300      	movs	r3, #0
 8011132:	3401      	adds	r4, #1
 8011134:	9305      	str	r3, [sp, #20]
 8011136:	4619      	mov	r1, r3
 8011138:	f04f 0c0a 	mov.w	ip, #10
 801113c:	4620      	mov	r0, r4
 801113e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011142:	3a30      	subs	r2, #48	; 0x30
 8011144:	2a09      	cmp	r2, #9
 8011146:	d903      	bls.n	8011150 <_svfiprintf_r+0x1a8>
 8011148:	2b00      	cmp	r3, #0
 801114a:	d0c5      	beq.n	80110d8 <_svfiprintf_r+0x130>
 801114c:	9105      	str	r1, [sp, #20]
 801114e:	e7c3      	b.n	80110d8 <_svfiprintf_r+0x130>
 8011150:	fb0c 2101 	mla	r1, ip, r1, r2
 8011154:	4604      	mov	r4, r0
 8011156:	2301      	movs	r3, #1
 8011158:	e7f0      	b.n	801113c <_svfiprintf_r+0x194>
 801115a:	ab03      	add	r3, sp, #12
 801115c:	9300      	str	r3, [sp, #0]
 801115e:	462a      	mov	r2, r5
 8011160:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <_svfiprintf_r+0x1fc>)
 8011162:	a904      	add	r1, sp, #16
 8011164:	4638      	mov	r0, r7
 8011166:	f7fc fa3d 	bl	800d5e4 <_printf_float>
 801116a:	1c42      	adds	r2, r0, #1
 801116c:	4606      	mov	r6, r0
 801116e:	d1d6      	bne.n	801111e <_svfiprintf_r+0x176>
 8011170:	89ab      	ldrh	r3, [r5, #12]
 8011172:	065b      	lsls	r3, r3, #25
 8011174:	f53f af2c 	bmi.w	8010fd0 <_svfiprintf_r+0x28>
 8011178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801117a:	b01d      	add	sp, #116	; 0x74
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	ab03      	add	r3, sp, #12
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	462a      	mov	r2, r5
 8011186:	4b07      	ldr	r3, [pc, #28]	; (80111a4 <_svfiprintf_r+0x1fc>)
 8011188:	a904      	add	r1, sp, #16
 801118a:	4638      	mov	r0, r7
 801118c:	f7fc fcc2 	bl	800db14 <_printf_i>
 8011190:	e7eb      	b.n	801116a <_svfiprintf_r+0x1c2>
 8011192:	bf00      	nop
 8011194:	0801285c 	.word	0x0801285c
 8011198:	08012862 	.word	0x08012862
 801119c:	08012866 	.word	0x08012866
 80111a0:	0800d5e5 	.word	0x0800d5e5
 80111a4:	08010ef1 	.word	0x08010ef1

080111a8 <nan>:
 80111a8:	4901      	ldr	r1, [pc, #4]	; (80111b0 <nan+0x8>)
 80111aa:	2000      	movs	r0, #0
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	7ff80000 	.word	0x7ff80000

080111b4 <_sbrk_r>:
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	4d06      	ldr	r5, [pc, #24]	; (80111d0 <_sbrk_r+0x1c>)
 80111b8:	2300      	movs	r3, #0
 80111ba:	4604      	mov	r4, r0
 80111bc:	4608      	mov	r0, r1
 80111be:	602b      	str	r3, [r5, #0]
 80111c0:	f7f0 fec6 	bl	8001f50 <_sbrk>
 80111c4:	1c43      	adds	r3, r0, #1
 80111c6:	d102      	bne.n	80111ce <_sbrk_r+0x1a>
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	b103      	cbz	r3, 80111ce <_sbrk_r+0x1a>
 80111cc:	6023      	str	r3, [r4, #0]
 80111ce:	bd38      	pop	{r3, r4, r5, pc}
 80111d0:	20001aa4 	.word	0x20001aa4

080111d4 <__ascii_wctomb>:
 80111d4:	4603      	mov	r3, r0
 80111d6:	4608      	mov	r0, r1
 80111d8:	b141      	cbz	r1, 80111ec <__ascii_wctomb+0x18>
 80111da:	2aff      	cmp	r2, #255	; 0xff
 80111dc:	d904      	bls.n	80111e8 <__ascii_wctomb+0x14>
 80111de:	228a      	movs	r2, #138	; 0x8a
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e6:	4770      	bx	lr
 80111e8:	700a      	strb	r2, [r1, #0]
 80111ea:	2001      	movs	r0, #1
 80111ec:	4770      	bx	lr
	...

080111f0 <__assert_func>:
 80111f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111f2:	4614      	mov	r4, r2
 80111f4:	461a      	mov	r2, r3
 80111f6:	4b09      	ldr	r3, [pc, #36]	; (801121c <__assert_func+0x2c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4605      	mov	r5, r0
 80111fc:	68d8      	ldr	r0, [r3, #12]
 80111fe:	b14c      	cbz	r4, 8011214 <__assert_func+0x24>
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <__assert_func+0x30>)
 8011202:	9100      	str	r1, [sp, #0]
 8011204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011208:	4906      	ldr	r1, [pc, #24]	; (8011224 <__assert_func+0x34>)
 801120a:	462b      	mov	r3, r5
 801120c:	f000 f80e 	bl	801122c <fiprintf>
 8011210:	f000 fa8a 	bl	8011728 <abort>
 8011214:	4b04      	ldr	r3, [pc, #16]	; (8011228 <__assert_func+0x38>)
 8011216:	461c      	mov	r4, r3
 8011218:	e7f3      	b.n	8011202 <__assert_func+0x12>
 801121a:	bf00      	nop
 801121c:	20000fc0 	.word	0x20000fc0
 8011220:	0801286d 	.word	0x0801286d
 8011224:	0801287a 	.word	0x0801287a
 8011228:	080128a8 	.word	0x080128a8

0801122c <fiprintf>:
 801122c:	b40e      	push	{r1, r2, r3}
 801122e:	b503      	push	{r0, r1, lr}
 8011230:	4601      	mov	r1, r0
 8011232:	ab03      	add	r3, sp, #12
 8011234:	4805      	ldr	r0, [pc, #20]	; (801124c <fiprintf+0x20>)
 8011236:	f853 2b04 	ldr.w	r2, [r3], #4
 801123a:	6800      	ldr	r0, [r0, #0]
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	f000 f883 	bl	8011348 <_vfiprintf_r>
 8011242:	b002      	add	sp, #8
 8011244:	f85d eb04 	ldr.w	lr, [sp], #4
 8011248:	b003      	add	sp, #12
 801124a:	4770      	bx	lr
 801124c:	20000fc0 	.word	0x20000fc0

08011250 <memmove>:
 8011250:	4288      	cmp	r0, r1
 8011252:	b510      	push	{r4, lr}
 8011254:	eb01 0402 	add.w	r4, r1, r2
 8011258:	d902      	bls.n	8011260 <memmove+0x10>
 801125a:	4284      	cmp	r4, r0
 801125c:	4623      	mov	r3, r4
 801125e:	d807      	bhi.n	8011270 <memmove+0x20>
 8011260:	1e43      	subs	r3, r0, #1
 8011262:	42a1      	cmp	r1, r4
 8011264:	d008      	beq.n	8011278 <memmove+0x28>
 8011266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801126a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801126e:	e7f8      	b.n	8011262 <memmove+0x12>
 8011270:	4402      	add	r2, r0
 8011272:	4601      	mov	r1, r0
 8011274:	428a      	cmp	r2, r1
 8011276:	d100      	bne.n	801127a <memmove+0x2a>
 8011278:	bd10      	pop	{r4, pc}
 801127a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801127e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011282:	e7f7      	b.n	8011274 <memmove+0x24>

08011284 <__malloc_lock>:
 8011284:	4801      	ldr	r0, [pc, #4]	; (801128c <__malloc_lock+0x8>)
 8011286:	f000 bc0b 	b.w	8011aa0 <__retarget_lock_acquire_recursive>
 801128a:	bf00      	nop
 801128c:	20001aa8 	.word	0x20001aa8

08011290 <__malloc_unlock>:
 8011290:	4801      	ldr	r0, [pc, #4]	; (8011298 <__malloc_unlock+0x8>)
 8011292:	f000 bc06 	b.w	8011aa2 <__retarget_lock_release_recursive>
 8011296:	bf00      	nop
 8011298:	20001aa8 	.word	0x20001aa8

0801129c <_realloc_r>:
 801129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a0:	4680      	mov	r8, r0
 80112a2:	4614      	mov	r4, r2
 80112a4:	460e      	mov	r6, r1
 80112a6:	b921      	cbnz	r1, 80112b2 <_realloc_r+0x16>
 80112a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	4611      	mov	r1, r2
 80112ae:	f7ff bdab 	b.w	8010e08 <_malloc_r>
 80112b2:	b92a      	cbnz	r2, 80112c0 <_realloc_r+0x24>
 80112b4:	f7ff fd3e 	bl	8010d34 <_free_r>
 80112b8:	4625      	mov	r5, r4
 80112ba:	4628      	mov	r0, r5
 80112bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c0:	f000 fc56 	bl	8011b70 <_malloc_usable_size_r>
 80112c4:	4284      	cmp	r4, r0
 80112c6:	4607      	mov	r7, r0
 80112c8:	d802      	bhi.n	80112d0 <_realloc_r+0x34>
 80112ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112ce:	d812      	bhi.n	80112f6 <_realloc_r+0x5a>
 80112d0:	4621      	mov	r1, r4
 80112d2:	4640      	mov	r0, r8
 80112d4:	f7ff fd98 	bl	8010e08 <_malloc_r>
 80112d8:	4605      	mov	r5, r0
 80112da:	2800      	cmp	r0, #0
 80112dc:	d0ed      	beq.n	80112ba <_realloc_r+0x1e>
 80112de:	42bc      	cmp	r4, r7
 80112e0:	4622      	mov	r2, r4
 80112e2:	4631      	mov	r1, r6
 80112e4:	bf28      	it	cs
 80112e6:	463a      	movcs	r2, r7
 80112e8:	f7fc f8c8 	bl	800d47c <memcpy>
 80112ec:	4631      	mov	r1, r6
 80112ee:	4640      	mov	r0, r8
 80112f0:	f7ff fd20 	bl	8010d34 <_free_r>
 80112f4:	e7e1      	b.n	80112ba <_realloc_r+0x1e>
 80112f6:	4635      	mov	r5, r6
 80112f8:	e7df      	b.n	80112ba <_realloc_r+0x1e>

080112fa <__sfputc_r>:
 80112fa:	6893      	ldr	r3, [r2, #8]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	b410      	push	{r4}
 8011302:	6093      	str	r3, [r2, #8]
 8011304:	da07      	bge.n	8011316 <__sfputc_r+0x1c>
 8011306:	6994      	ldr	r4, [r2, #24]
 8011308:	42a3      	cmp	r3, r4
 801130a:	db01      	blt.n	8011310 <__sfputc_r+0x16>
 801130c:	290a      	cmp	r1, #10
 801130e:	d102      	bne.n	8011316 <__sfputc_r+0x1c>
 8011310:	bc10      	pop	{r4}
 8011312:	f000 b949 	b.w	80115a8 <__swbuf_r>
 8011316:	6813      	ldr	r3, [r2, #0]
 8011318:	1c58      	adds	r0, r3, #1
 801131a:	6010      	str	r0, [r2, #0]
 801131c:	7019      	strb	r1, [r3, #0]
 801131e:	4608      	mov	r0, r1
 8011320:	bc10      	pop	{r4}
 8011322:	4770      	bx	lr

08011324 <__sfputs_r>:
 8011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011326:	4606      	mov	r6, r0
 8011328:	460f      	mov	r7, r1
 801132a:	4614      	mov	r4, r2
 801132c:	18d5      	adds	r5, r2, r3
 801132e:	42ac      	cmp	r4, r5
 8011330:	d101      	bne.n	8011336 <__sfputs_r+0x12>
 8011332:	2000      	movs	r0, #0
 8011334:	e007      	b.n	8011346 <__sfputs_r+0x22>
 8011336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133a:	463a      	mov	r2, r7
 801133c:	4630      	mov	r0, r6
 801133e:	f7ff ffdc 	bl	80112fa <__sfputc_r>
 8011342:	1c43      	adds	r3, r0, #1
 8011344:	d1f3      	bne.n	801132e <__sfputs_r+0xa>
 8011346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011348 <_vfiprintf_r>:
 8011348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801134c:	460d      	mov	r5, r1
 801134e:	b09d      	sub	sp, #116	; 0x74
 8011350:	4614      	mov	r4, r2
 8011352:	4698      	mov	r8, r3
 8011354:	4606      	mov	r6, r0
 8011356:	b118      	cbz	r0, 8011360 <_vfiprintf_r+0x18>
 8011358:	6983      	ldr	r3, [r0, #24]
 801135a:	b90b      	cbnz	r3, 8011360 <_vfiprintf_r+0x18>
 801135c:	f000 fb02 	bl	8011964 <__sinit>
 8011360:	4b89      	ldr	r3, [pc, #548]	; (8011588 <_vfiprintf_r+0x240>)
 8011362:	429d      	cmp	r5, r3
 8011364:	d11b      	bne.n	801139e <_vfiprintf_r+0x56>
 8011366:	6875      	ldr	r5, [r6, #4]
 8011368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801136a:	07d9      	lsls	r1, r3, #31
 801136c:	d405      	bmi.n	801137a <_vfiprintf_r+0x32>
 801136e:	89ab      	ldrh	r3, [r5, #12]
 8011370:	059a      	lsls	r2, r3, #22
 8011372:	d402      	bmi.n	801137a <_vfiprintf_r+0x32>
 8011374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011376:	f000 fb93 	bl	8011aa0 <__retarget_lock_acquire_recursive>
 801137a:	89ab      	ldrh	r3, [r5, #12]
 801137c:	071b      	lsls	r3, r3, #28
 801137e:	d501      	bpl.n	8011384 <_vfiprintf_r+0x3c>
 8011380:	692b      	ldr	r3, [r5, #16]
 8011382:	b9eb      	cbnz	r3, 80113c0 <_vfiprintf_r+0x78>
 8011384:	4629      	mov	r1, r5
 8011386:	4630      	mov	r0, r6
 8011388:	f000 f960 	bl	801164c <__swsetup_r>
 801138c:	b1c0      	cbz	r0, 80113c0 <_vfiprintf_r+0x78>
 801138e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011390:	07dc      	lsls	r4, r3, #31
 8011392:	d50e      	bpl.n	80113b2 <_vfiprintf_r+0x6a>
 8011394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011398:	b01d      	add	sp, #116	; 0x74
 801139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139e:	4b7b      	ldr	r3, [pc, #492]	; (801158c <_vfiprintf_r+0x244>)
 80113a0:	429d      	cmp	r5, r3
 80113a2:	d101      	bne.n	80113a8 <_vfiprintf_r+0x60>
 80113a4:	68b5      	ldr	r5, [r6, #8]
 80113a6:	e7df      	b.n	8011368 <_vfiprintf_r+0x20>
 80113a8:	4b79      	ldr	r3, [pc, #484]	; (8011590 <_vfiprintf_r+0x248>)
 80113aa:	429d      	cmp	r5, r3
 80113ac:	bf08      	it	eq
 80113ae:	68f5      	ldreq	r5, [r6, #12]
 80113b0:	e7da      	b.n	8011368 <_vfiprintf_r+0x20>
 80113b2:	89ab      	ldrh	r3, [r5, #12]
 80113b4:	0598      	lsls	r0, r3, #22
 80113b6:	d4ed      	bmi.n	8011394 <_vfiprintf_r+0x4c>
 80113b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113ba:	f000 fb72 	bl	8011aa2 <__retarget_lock_release_recursive>
 80113be:	e7e9      	b.n	8011394 <_vfiprintf_r+0x4c>
 80113c0:	2300      	movs	r3, #0
 80113c2:	9309      	str	r3, [sp, #36]	; 0x24
 80113c4:	2320      	movs	r3, #32
 80113c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80113ce:	2330      	movs	r3, #48	; 0x30
 80113d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011594 <_vfiprintf_r+0x24c>
 80113d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113d8:	f04f 0901 	mov.w	r9, #1
 80113dc:	4623      	mov	r3, r4
 80113de:	469a      	mov	sl, r3
 80113e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e4:	b10a      	cbz	r2, 80113ea <_vfiprintf_r+0xa2>
 80113e6:	2a25      	cmp	r2, #37	; 0x25
 80113e8:	d1f9      	bne.n	80113de <_vfiprintf_r+0x96>
 80113ea:	ebba 0b04 	subs.w	fp, sl, r4
 80113ee:	d00b      	beq.n	8011408 <_vfiprintf_r+0xc0>
 80113f0:	465b      	mov	r3, fp
 80113f2:	4622      	mov	r2, r4
 80113f4:	4629      	mov	r1, r5
 80113f6:	4630      	mov	r0, r6
 80113f8:	f7ff ff94 	bl	8011324 <__sfputs_r>
 80113fc:	3001      	adds	r0, #1
 80113fe:	f000 80aa 	beq.w	8011556 <_vfiprintf_r+0x20e>
 8011402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011404:	445a      	add	r2, fp
 8011406:	9209      	str	r2, [sp, #36]	; 0x24
 8011408:	f89a 3000 	ldrb.w	r3, [sl]
 801140c:	2b00      	cmp	r3, #0
 801140e:	f000 80a2 	beq.w	8011556 <_vfiprintf_r+0x20e>
 8011412:	2300      	movs	r3, #0
 8011414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801141c:	f10a 0a01 	add.w	sl, sl, #1
 8011420:	9304      	str	r3, [sp, #16]
 8011422:	9307      	str	r3, [sp, #28]
 8011424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011428:	931a      	str	r3, [sp, #104]	; 0x68
 801142a:	4654      	mov	r4, sl
 801142c:	2205      	movs	r2, #5
 801142e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011432:	4858      	ldr	r0, [pc, #352]	; (8011594 <_vfiprintf_r+0x24c>)
 8011434:	f7ee feac 	bl	8000190 <memchr>
 8011438:	9a04      	ldr	r2, [sp, #16]
 801143a:	b9d8      	cbnz	r0, 8011474 <_vfiprintf_r+0x12c>
 801143c:	06d1      	lsls	r1, r2, #27
 801143e:	bf44      	itt	mi
 8011440:	2320      	movmi	r3, #32
 8011442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011446:	0713      	lsls	r3, r2, #28
 8011448:	bf44      	itt	mi
 801144a:	232b      	movmi	r3, #43	; 0x2b
 801144c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011450:	f89a 3000 	ldrb.w	r3, [sl]
 8011454:	2b2a      	cmp	r3, #42	; 0x2a
 8011456:	d015      	beq.n	8011484 <_vfiprintf_r+0x13c>
 8011458:	9a07      	ldr	r2, [sp, #28]
 801145a:	4654      	mov	r4, sl
 801145c:	2000      	movs	r0, #0
 801145e:	f04f 0c0a 	mov.w	ip, #10
 8011462:	4621      	mov	r1, r4
 8011464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011468:	3b30      	subs	r3, #48	; 0x30
 801146a:	2b09      	cmp	r3, #9
 801146c:	d94e      	bls.n	801150c <_vfiprintf_r+0x1c4>
 801146e:	b1b0      	cbz	r0, 801149e <_vfiprintf_r+0x156>
 8011470:	9207      	str	r2, [sp, #28]
 8011472:	e014      	b.n	801149e <_vfiprintf_r+0x156>
 8011474:	eba0 0308 	sub.w	r3, r0, r8
 8011478:	fa09 f303 	lsl.w	r3, r9, r3
 801147c:	4313      	orrs	r3, r2
 801147e:	9304      	str	r3, [sp, #16]
 8011480:	46a2      	mov	sl, r4
 8011482:	e7d2      	b.n	801142a <_vfiprintf_r+0xe2>
 8011484:	9b03      	ldr	r3, [sp, #12]
 8011486:	1d19      	adds	r1, r3, #4
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	9103      	str	r1, [sp, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	bfbb      	ittet	lt
 8011490:	425b      	neglt	r3, r3
 8011492:	f042 0202 	orrlt.w	r2, r2, #2
 8011496:	9307      	strge	r3, [sp, #28]
 8011498:	9307      	strlt	r3, [sp, #28]
 801149a:	bfb8      	it	lt
 801149c:	9204      	strlt	r2, [sp, #16]
 801149e:	7823      	ldrb	r3, [r4, #0]
 80114a0:	2b2e      	cmp	r3, #46	; 0x2e
 80114a2:	d10c      	bne.n	80114be <_vfiprintf_r+0x176>
 80114a4:	7863      	ldrb	r3, [r4, #1]
 80114a6:	2b2a      	cmp	r3, #42	; 0x2a
 80114a8:	d135      	bne.n	8011516 <_vfiprintf_r+0x1ce>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	1d1a      	adds	r2, r3, #4
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	9203      	str	r2, [sp, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	bfb8      	it	lt
 80114b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114ba:	3402      	adds	r4, #2
 80114bc:	9305      	str	r3, [sp, #20]
 80114be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011598 <_vfiprintf_r+0x250>
 80114c2:	7821      	ldrb	r1, [r4, #0]
 80114c4:	2203      	movs	r2, #3
 80114c6:	4650      	mov	r0, sl
 80114c8:	f7ee fe62 	bl	8000190 <memchr>
 80114cc:	b140      	cbz	r0, 80114e0 <_vfiprintf_r+0x198>
 80114ce:	2340      	movs	r3, #64	; 0x40
 80114d0:	eba0 000a 	sub.w	r0, r0, sl
 80114d4:	fa03 f000 	lsl.w	r0, r3, r0
 80114d8:	9b04      	ldr	r3, [sp, #16]
 80114da:	4303      	orrs	r3, r0
 80114dc:	3401      	adds	r4, #1
 80114de:	9304      	str	r3, [sp, #16]
 80114e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e4:	482d      	ldr	r0, [pc, #180]	; (801159c <_vfiprintf_r+0x254>)
 80114e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ea:	2206      	movs	r2, #6
 80114ec:	f7ee fe50 	bl	8000190 <memchr>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	d03f      	beq.n	8011574 <_vfiprintf_r+0x22c>
 80114f4:	4b2a      	ldr	r3, [pc, #168]	; (80115a0 <_vfiprintf_r+0x258>)
 80114f6:	bb1b      	cbnz	r3, 8011540 <_vfiprintf_r+0x1f8>
 80114f8:	9b03      	ldr	r3, [sp, #12]
 80114fa:	3307      	adds	r3, #7
 80114fc:	f023 0307 	bic.w	r3, r3, #7
 8011500:	3308      	adds	r3, #8
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011506:	443b      	add	r3, r7
 8011508:	9309      	str	r3, [sp, #36]	; 0x24
 801150a:	e767      	b.n	80113dc <_vfiprintf_r+0x94>
 801150c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011510:	460c      	mov	r4, r1
 8011512:	2001      	movs	r0, #1
 8011514:	e7a5      	b.n	8011462 <_vfiprintf_r+0x11a>
 8011516:	2300      	movs	r3, #0
 8011518:	3401      	adds	r4, #1
 801151a:	9305      	str	r3, [sp, #20]
 801151c:	4619      	mov	r1, r3
 801151e:	f04f 0c0a 	mov.w	ip, #10
 8011522:	4620      	mov	r0, r4
 8011524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011528:	3a30      	subs	r2, #48	; 0x30
 801152a:	2a09      	cmp	r2, #9
 801152c:	d903      	bls.n	8011536 <_vfiprintf_r+0x1ee>
 801152e:	2b00      	cmp	r3, #0
 8011530:	d0c5      	beq.n	80114be <_vfiprintf_r+0x176>
 8011532:	9105      	str	r1, [sp, #20]
 8011534:	e7c3      	b.n	80114be <_vfiprintf_r+0x176>
 8011536:	fb0c 2101 	mla	r1, ip, r1, r2
 801153a:	4604      	mov	r4, r0
 801153c:	2301      	movs	r3, #1
 801153e:	e7f0      	b.n	8011522 <_vfiprintf_r+0x1da>
 8011540:	ab03      	add	r3, sp, #12
 8011542:	9300      	str	r3, [sp, #0]
 8011544:	462a      	mov	r2, r5
 8011546:	4b17      	ldr	r3, [pc, #92]	; (80115a4 <_vfiprintf_r+0x25c>)
 8011548:	a904      	add	r1, sp, #16
 801154a:	4630      	mov	r0, r6
 801154c:	f7fc f84a 	bl	800d5e4 <_printf_float>
 8011550:	4607      	mov	r7, r0
 8011552:	1c78      	adds	r0, r7, #1
 8011554:	d1d6      	bne.n	8011504 <_vfiprintf_r+0x1bc>
 8011556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011558:	07d9      	lsls	r1, r3, #31
 801155a:	d405      	bmi.n	8011568 <_vfiprintf_r+0x220>
 801155c:	89ab      	ldrh	r3, [r5, #12]
 801155e:	059a      	lsls	r2, r3, #22
 8011560:	d402      	bmi.n	8011568 <_vfiprintf_r+0x220>
 8011562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011564:	f000 fa9d 	bl	8011aa2 <__retarget_lock_release_recursive>
 8011568:	89ab      	ldrh	r3, [r5, #12]
 801156a:	065b      	lsls	r3, r3, #25
 801156c:	f53f af12 	bmi.w	8011394 <_vfiprintf_r+0x4c>
 8011570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011572:	e711      	b.n	8011398 <_vfiprintf_r+0x50>
 8011574:	ab03      	add	r3, sp, #12
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	462a      	mov	r2, r5
 801157a:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <_vfiprintf_r+0x25c>)
 801157c:	a904      	add	r1, sp, #16
 801157e:	4630      	mov	r0, r6
 8011580:	f7fc fac8 	bl	800db14 <_printf_i>
 8011584:	e7e4      	b.n	8011550 <_vfiprintf_r+0x208>
 8011586:	bf00      	nop
 8011588:	080128cc 	.word	0x080128cc
 801158c:	080128ec 	.word	0x080128ec
 8011590:	080128ac 	.word	0x080128ac
 8011594:	0801285c 	.word	0x0801285c
 8011598:	08012862 	.word	0x08012862
 801159c:	08012866 	.word	0x08012866
 80115a0:	0800d5e5 	.word	0x0800d5e5
 80115a4:	08011325 	.word	0x08011325

080115a8 <__swbuf_r>:
 80115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115aa:	460e      	mov	r6, r1
 80115ac:	4614      	mov	r4, r2
 80115ae:	4605      	mov	r5, r0
 80115b0:	b118      	cbz	r0, 80115ba <__swbuf_r+0x12>
 80115b2:	6983      	ldr	r3, [r0, #24]
 80115b4:	b90b      	cbnz	r3, 80115ba <__swbuf_r+0x12>
 80115b6:	f000 f9d5 	bl	8011964 <__sinit>
 80115ba:	4b21      	ldr	r3, [pc, #132]	; (8011640 <__swbuf_r+0x98>)
 80115bc:	429c      	cmp	r4, r3
 80115be:	d12b      	bne.n	8011618 <__swbuf_r+0x70>
 80115c0:	686c      	ldr	r4, [r5, #4]
 80115c2:	69a3      	ldr	r3, [r4, #24]
 80115c4:	60a3      	str	r3, [r4, #8]
 80115c6:	89a3      	ldrh	r3, [r4, #12]
 80115c8:	071a      	lsls	r2, r3, #28
 80115ca:	d52f      	bpl.n	801162c <__swbuf_r+0x84>
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	b36b      	cbz	r3, 801162c <__swbuf_r+0x84>
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	6820      	ldr	r0, [r4, #0]
 80115d4:	1ac0      	subs	r0, r0, r3
 80115d6:	6963      	ldr	r3, [r4, #20]
 80115d8:	b2f6      	uxtb	r6, r6
 80115da:	4283      	cmp	r3, r0
 80115dc:	4637      	mov	r7, r6
 80115de:	dc04      	bgt.n	80115ea <__swbuf_r+0x42>
 80115e0:	4621      	mov	r1, r4
 80115e2:	4628      	mov	r0, r5
 80115e4:	f000 f92a 	bl	801183c <_fflush_r>
 80115e8:	bb30      	cbnz	r0, 8011638 <__swbuf_r+0x90>
 80115ea:	68a3      	ldr	r3, [r4, #8]
 80115ec:	3b01      	subs	r3, #1
 80115ee:	60a3      	str	r3, [r4, #8]
 80115f0:	6823      	ldr	r3, [r4, #0]
 80115f2:	1c5a      	adds	r2, r3, #1
 80115f4:	6022      	str	r2, [r4, #0]
 80115f6:	701e      	strb	r6, [r3, #0]
 80115f8:	6963      	ldr	r3, [r4, #20]
 80115fa:	3001      	adds	r0, #1
 80115fc:	4283      	cmp	r3, r0
 80115fe:	d004      	beq.n	801160a <__swbuf_r+0x62>
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	07db      	lsls	r3, r3, #31
 8011604:	d506      	bpl.n	8011614 <__swbuf_r+0x6c>
 8011606:	2e0a      	cmp	r6, #10
 8011608:	d104      	bne.n	8011614 <__swbuf_r+0x6c>
 801160a:	4621      	mov	r1, r4
 801160c:	4628      	mov	r0, r5
 801160e:	f000 f915 	bl	801183c <_fflush_r>
 8011612:	b988      	cbnz	r0, 8011638 <__swbuf_r+0x90>
 8011614:	4638      	mov	r0, r7
 8011616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011618:	4b0a      	ldr	r3, [pc, #40]	; (8011644 <__swbuf_r+0x9c>)
 801161a:	429c      	cmp	r4, r3
 801161c:	d101      	bne.n	8011622 <__swbuf_r+0x7a>
 801161e:	68ac      	ldr	r4, [r5, #8]
 8011620:	e7cf      	b.n	80115c2 <__swbuf_r+0x1a>
 8011622:	4b09      	ldr	r3, [pc, #36]	; (8011648 <__swbuf_r+0xa0>)
 8011624:	429c      	cmp	r4, r3
 8011626:	bf08      	it	eq
 8011628:	68ec      	ldreq	r4, [r5, #12]
 801162a:	e7ca      	b.n	80115c2 <__swbuf_r+0x1a>
 801162c:	4621      	mov	r1, r4
 801162e:	4628      	mov	r0, r5
 8011630:	f000 f80c 	bl	801164c <__swsetup_r>
 8011634:	2800      	cmp	r0, #0
 8011636:	d0cb      	beq.n	80115d0 <__swbuf_r+0x28>
 8011638:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801163c:	e7ea      	b.n	8011614 <__swbuf_r+0x6c>
 801163e:	bf00      	nop
 8011640:	080128cc 	.word	0x080128cc
 8011644:	080128ec 	.word	0x080128ec
 8011648:	080128ac 	.word	0x080128ac

0801164c <__swsetup_r>:
 801164c:	4b32      	ldr	r3, [pc, #200]	; (8011718 <__swsetup_r+0xcc>)
 801164e:	b570      	push	{r4, r5, r6, lr}
 8011650:	681d      	ldr	r5, [r3, #0]
 8011652:	4606      	mov	r6, r0
 8011654:	460c      	mov	r4, r1
 8011656:	b125      	cbz	r5, 8011662 <__swsetup_r+0x16>
 8011658:	69ab      	ldr	r3, [r5, #24]
 801165a:	b913      	cbnz	r3, 8011662 <__swsetup_r+0x16>
 801165c:	4628      	mov	r0, r5
 801165e:	f000 f981 	bl	8011964 <__sinit>
 8011662:	4b2e      	ldr	r3, [pc, #184]	; (801171c <__swsetup_r+0xd0>)
 8011664:	429c      	cmp	r4, r3
 8011666:	d10f      	bne.n	8011688 <__swsetup_r+0x3c>
 8011668:	686c      	ldr	r4, [r5, #4]
 801166a:	89a3      	ldrh	r3, [r4, #12]
 801166c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011670:	0719      	lsls	r1, r3, #28
 8011672:	d42c      	bmi.n	80116ce <__swsetup_r+0x82>
 8011674:	06dd      	lsls	r5, r3, #27
 8011676:	d411      	bmi.n	801169c <__swsetup_r+0x50>
 8011678:	2309      	movs	r3, #9
 801167a:	6033      	str	r3, [r6, #0]
 801167c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011680:	81a3      	strh	r3, [r4, #12]
 8011682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011686:	e03e      	b.n	8011706 <__swsetup_r+0xba>
 8011688:	4b25      	ldr	r3, [pc, #148]	; (8011720 <__swsetup_r+0xd4>)
 801168a:	429c      	cmp	r4, r3
 801168c:	d101      	bne.n	8011692 <__swsetup_r+0x46>
 801168e:	68ac      	ldr	r4, [r5, #8]
 8011690:	e7eb      	b.n	801166a <__swsetup_r+0x1e>
 8011692:	4b24      	ldr	r3, [pc, #144]	; (8011724 <__swsetup_r+0xd8>)
 8011694:	429c      	cmp	r4, r3
 8011696:	bf08      	it	eq
 8011698:	68ec      	ldreq	r4, [r5, #12]
 801169a:	e7e6      	b.n	801166a <__swsetup_r+0x1e>
 801169c:	0758      	lsls	r0, r3, #29
 801169e:	d512      	bpl.n	80116c6 <__swsetup_r+0x7a>
 80116a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116a2:	b141      	cbz	r1, 80116b6 <__swsetup_r+0x6a>
 80116a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116a8:	4299      	cmp	r1, r3
 80116aa:	d002      	beq.n	80116b2 <__swsetup_r+0x66>
 80116ac:	4630      	mov	r0, r6
 80116ae:	f7ff fb41 	bl	8010d34 <_free_r>
 80116b2:	2300      	movs	r3, #0
 80116b4:	6363      	str	r3, [r4, #52]	; 0x34
 80116b6:	89a3      	ldrh	r3, [r4, #12]
 80116b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116bc:	81a3      	strh	r3, [r4, #12]
 80116be:	2300      	movs	r3, #0
 80116c0:	6063      	str	r3, [r4, #4]
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	6023      	str	r3, [r4, #0]
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f043 0308 	orr.w	r3, r3, #8
 80116cc:	81a3      	strh	r3, [r4, #12]
 80116ce:	6923      	ldr	r3, [r4, #16]
 80116d0:	b94b      	cbnz	r3, 80116e6 <__swsetup_r+0x9a>
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116dc:	d003      	beq.n	80116e6 <__swsetup_r+0x9a>
 80116de:	4621      	mov	r1, r4
 80116e0:	4630      	mov	r0, r6
 80116e2:	f000 fa05 	bl	8011af0 <__smakebuf_r>
 80116e6:	89a0      	ldrh	r0, [r4, #12]
 80116e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116ec:	f010 0301 	ands.w	r3, r0, #1
 80116f0:	d00a      	beq.n	8011708 <__swsetup_r+0xbc>
 80116f2:	2300      	movs	r3, #0
 80116f4:	60a3      	str	r3, [r4, #8]
 80116f6:	6963      	ldr	r3, [r4, #20]
 80116f8:	425b      	negs	r3, r3
 80116fa:	61a3      	str	r3, [r4, #24]
 80116fc:	6923      	ldr	r3, [r4, #16]
 80116fe:	b943      	cbnz	r3, 8011712 <__swsetup_r+0xc6>
 8011700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011704:	d1ba      	bne.n	801167c <__swsetup_r+0x30>
 8011706:	bd70      	pop	{r4, r5, r6, pc}
 8011708:	0781      	lsls	r1, r0, #30
 801170a:	bf58      	it	pl
 801170c:	6963      	ldrpl	r3, [r4, #20]
 801170e:	60a3      	str	r3, [r4, #8]
 8011710:	e7f4      	b.n	80116fc <__swsetup_r+0xb0>
 8011712:	2000      	movs	r0, #0
 8011714:	e7f7      	b.n	8011706 <__swsetup_r+0xba>
 8011716:	bf00      	nop
 8011718:	20000fc0 	.word	0x20000fc0
 801171c:	080128cc 	.word	0x080128cc
 8011720:	080128ec 	.word	0x080128ec
 8011724:	080128ac 	.word	0x080128ac

08011728 <abort>:
 8011728:	b508      	push	{r3, lr}
 801172a:	2006      	movs	r0, #6
 801172c:	f000 fa50 	bl	8011bd0 <raise>
 8011730:	2001      	movs	r0, #1
 8011732:	f7f0 fb9a 	bl	8001e6a <_exit>
	...

08011738 <__sflush_r>:
 8011738:	898a      	ldrh	r2, [r1, #12]
 801173a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173c:	4605      	mov	r5, r0
 801173e:	0710      	lsls	r0, r2, #28
 8011740:	460c      	mov	r4, r1
 8011742:	d457      	bmi.n	80117f4 <__sflush_r+0xbc>
 8011744:	684b      	ldr	r3, [r1, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	dc04      	bgt.n	8011754 <__sflush_r+0x1c>
 801174a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801174c:	2b00      	cmp	r3, #0
 801174e:	dc01      	bgt.n	8011754 <__sflush_r+0x1c>
 8011750:	2000      	movs	r0, #0
 8011752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011756:	2e00      	cmp	r6, #0
 8011758:	d0fa      	beq.n	8011750 <__sflush_r+0x18>
 801175a:	2300      	movs	r3, #0
 801175c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011760:	682f      	ldr	r7, [r5, #0]
 8011762:	602b      	str	r3, [r5, #0]
 8011764:	d032      	beq.n	80117cc <__sflush_r+0x94>
 8011766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011768:	89a3      	ldrh	r3, [r4, #12]
 801176a:	075a      	lsls	r2, r3, #29
 801176c:	d505      	bpl.n	801177a <__sflush_r+0x42>
 801176e:	6863      	ldr	r3, [r4, #4]
 8011770:	1ac0      	subs	r0, r0, r3
 8011772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011774:	b10b      	cbz	r3, 801177a <__sflush_r+0x42>
 8011776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011778:	1ac0      	subs	r0, r0, r3
 801177a:	2300      	movs	r3, #0
 801177c:	4602      	mov	r2, r0
 801177e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011780:	6a21      	ldr	r1, [r4, #32]
 8011782:	4628      	mov	r0, r5
 8011784:	47b0      	blx	r6
 8011786:	1c43      	adds	r3, r0, #1
 8011788:	89a3      	ldrh	r3, [r4, #12]
 801178a:	d106      	bne.n	801179a <__sflush_r+0x62>
 801178c:	6829      	ldr	r1, [r5, #0]
 801178e:	291d      	cmp	r1, #29
 8011790:	d82c      	bhi.n	80117ec <__sflush_r+0xb4>
 8011792:	4a29      	ldr	r2, [pc, #164]	; (8011838 <__sflush_r+0x100>)
 8011794:	40ca      	lsrs	r2, r1
 8011796:	07d6      	lsls	r6, r2, #31
 8011798:	d528      	bpl.n	80117ec <__sflush_r+0xb4>
 801179a:	2200      	movs	r2, #0
 801179c:	6062      	str	r2, [r4, #4]
 801179e:	04d9      	lsls	r1, r3, #19
 80117a0:	6922      	ldr	r2, [r4, #16]
 80117a2:	6022      	str	r2, [r4, #0]
 80117a4:	d504      	bpl.n	80117b0 <__sflush_r+0x78>
 80117a6:	1c42      	adds	r2, r0, #1
 80117a8:	d101      	bne.n	80117ae <__sflush_r+0x76>
 80117aa:	682b      	ldr	r3, [r5, #0]
 80117ac:	b903      	cbnz	r3, 80117b0 <__sflush_r+0x78>
 80117ae:	6560      	str	r0, [r4, #84]	; 0x54
 80117b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117b2:	602f      	str	r7, [r5, #0]
 80117b4:	2900      	cmp	r1, #0
 80117b6:	d0cb      	beq.n	8011750 <__sflush_r+0x18>
 80117b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117bc:	4299      	cmp	r1, r3
 80117be:	d002      	beq.n	80117c6 <__sflush_r+0x8e>
 80117c0:	4628      	mov	r0, r5
 80117c2:	f7ff fab7 	bl	8010d34 <_free_r>
 80117c6:	2000      	movs	r0, #0
 80117c8:	6360      	str	r0, [r4, #52]	; 0x34
 80117ca:	e7c2      	b.n	8011752 <__sflush_r+0x1a>
 80117cc:	6a21      	ldr	r1, [r4, #32]
 80117ce:	2301      	movs	r3, #1
 80117d0:	4628      	mov	r0, r5
 80117d2:	47b0      	blx	r6
 80117d4:	1c41      	adds	r1, r0, #1
 80117d6:	d1c7      	bne.n	8011768 <__sflush_r+0x30>
 80117d8:	682b      	ldr	r3, [r5, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0c4      	beq.n	8011768 <__sflush_r+0x30>
 80117de:	2b1d      	cmp	r3, #29
 80117e0:	d001      	beq.n	80117e6 <__sflush_r+0xae>
 80117e2:	2b16      	cmp	r3, #22
 80117e4:	d101      	bne.n	80117ea <__sflush_r+0xb2>
 80117e6:	602f      	str	r7, [r5, #0]
 80117e8:	e7b2      	b.n	8011750 <__sflush_r+0x18>
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f0:	81a3      	strh	r3, [r4, #12]
 80117f2:	e7ae      	b.n	8011752 <__sflush_r+0x1a>
 80117f4:	690f      	ldr	r7, [r1, #16]
 80117f6:	2f00      	cmp	r7, #0
 80117f8:	d0aa      	beq.n	8011750 <__sflush_r+0x18>
 80117fa:	0793      	lsls	r3, r2, #30
 80117fc:	680e      	ldr	r6, [r1, #0]
 80117fe:	bf08      	it	eq
 8011800:	694b      	ldreq	r3, [r1, #20]
 8011802:	600f      	str	r7, [r1, #0]
 8011804:	bf18      	it	ne
 8011806:	2300      	movne	r3, #0
 8011808:	1bf6      	subs	r6, r6, r7
 801180a:	608b      	str	r3, [r1, #8]
 801180c:	2e00      	cmp	r6, #0
 801180e:	dd9f      	ble.n	8011750 <__sflush_r+0x18>
 8011810:	6a21      	ldr	r1, [r4, #32]
 8011812:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011816:	4633      	mov	r3, r6
 8011818:	463a      	mov	r2, r7
 801181a:	4628      	mov	r0, r5
 801181c:	47e0      	blx	ip
 801181e:	2800      	cmp	r0, #0
 8011820:	dc06      	bgt.n	8011830 <__sflush_r+0xf8>
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801182e:	e790      	b.n	8011752 <__sflush_r+0x1a>
 8011830:	4407      	add	r7, r0
 8011832:	1a36      	subs	r6, r6, r0
 8011834:	e7ea      	b.n	801180c <__sflush_r+0xd4>
 8011836:	bf00      	nop
 8011838:	20400001 	.word	0x20400001

0801183c <_fflush_r>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	690b      	ldr	r3, [r1, #16]
 8011840:	4605      	mov	r5, r0
 8011842:	460c      	mov	r4, r1
 8011844:	b913      	cbnz	r3, 801184c <_fflush_r+0x10>
 8011846:	2500      	movs	r5, #0
 8011848:	4628      	mov	r0, r5
 801184a:	bd38      	pop	{r3, r4, r5, pc}
 801184c:	b118      	cbz	r0, 8011856 <_fflush_r+0x1a>
 801184e:	6983      	ldr	r3, [r0, #24]
 8011850:	b90b      	cbnz	r3, 8011856 <_fflush_r+0x1a>
 8011852:	f000 f887 	bl	8011964 <__sinit>
 8011856:	4b14      	ldr	r3, [pc, #80]	; (80118a8 <_fflush_r+0x6c>)
 8011858:	429c      	cmp	r4, r3
 801185a:	d11b      	bne.n	8011894 <_fflush_r+0x58>
 801185c:	686c      	ldr	r4, [r5, #4]
 801185e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d0ef      	beq.n	8011846 <_fflush_r+0xa>
 8011866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011868:	07d0      	lsls	r0, r2, #31
 801186a:	d404      	bmi.n	8011876 <_fflush_r+0x3a>
 801186c:	0599      	lsls	r1, r3, #22
 801186e:	d402      	bmi.n	8011876 <_fflush_r+0x3a>
 8011870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011872:	f000 f915 	bl	8011aa0 <__retarget_lock_acquire_recursive>
 8011876:	4628      	mov	r0, r5
 8011878:	4621      	mov	r1, r4
 801187a:	f7ff ff5d 	bl	8011738 <__sflush_r>
 801187e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011880:	07da      	lsls	r2, r3, #31
 8011882:	4605      	mov	r5, r0
 8011884:	d4e0      	bmi.n	8011848 <_fflush_r+0xc>
 8011886:	89a3      	ldrh	r3, [r4, #12]
 8011888:	059b      	lsls	r3, r3, #22
 801188a:	d4dd      	bmi.n	8011848 <_fflush_r+0xc>
 801188c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801188e:	f000 f908 	bl	8011aa2 <__retarget_lock_release_recursive>
 8011892:	e7d9      	b.n	8011848 <_fflush_r+0xc>
 8011894:	4b05      	ldr	r3, [pc, #20]	; (80118ac <_fflush_r+0x70>)
 8011896:	429c      	cmp	r4, r3
 8011898:	d101      	bne.n	801189e <_fflush_r+0x62>
 801189a:	68ac      	ldr	r4, [r5, #8]
 801189c:	e7df      	b.n	801185e <_fflush_r+0x22>
 801189e:	4b04      	ldr	r3, [pc, #16]	; (80118b0 <_fflush_r+0x74>)
 80118a0:	429c      	cmp	r4, r3
 80118a2:	bf08      	it	eq
 80118a4:	68ec      	ldreq	r4, [r5, #12]
 80118a6:	e7da      	b.n	801185e <_fflush_r+0x22>
 80118a8:	080128cc 	.word	0x080128cc
 80118ac:	080128ec 	.word	0x080128ec
 80118b0:	080128ac 	.word	0x080128ac

080118b4 <std>:
 80118b4:	2300      	movs	r3, #0
 80118b6:	b510      	push	{r4, lr}
 80118b8:	4604      	mov	r4, r0
 80118ba:	e9c0 3300 	strd	r3, r3, [r0]
 80118be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118c2:	6083      	str	r3, [r0, #8]
 80118c4:	8181      	strh	r1, [r0, #12]
 80118c6:	6643      	str	r3, [r0, #100]	; 0x64
 80118c8:	81c2      	strh	r2, [r0, #14]
 80118ca:	6183      	str	r3, [r0, #24]
 80118cc:	4619      	mov	r1, r3
 80118ce:	2208      	movs	r2, #8
 80118d0:	305c      	adds	r0, #92	; 0x5c
 80118d2:	f7fb fde1 	bl	800d498 <memset>
 80118d6:	4b05      	ldr	r3, [pc, #20]	; (80118ec <std+0x38>)
 80118d8:	6263      	str	r3, [r4, #36]	; 0x24
 80118da:	4b05      	ldr	r3, [pc, #20]	; (80118f0 <std+0x3c>)
 80118dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80118de:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <std+0x40>)
 80118e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118e2:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <std+0x44>)
 80118e4:	6224      	str	r4, [r4, #32]
 80118e6:	6323      	str	r3, [r4, #48]	; 0x30
 80118e8:	bd10      	pop	{r4, pc}
 80118ea:	bf00      	nop
 80118ec:	08011c09 	.word	0x08011c09
 80118f0:	08011c2b 	.word	0x08011c2b
 80118f4:	08011c63 	.word	0x08011c63
 80118f8:	08011c87 	.word	0x08011c87

080118fc <_cleanup_r>:
 80118fc:	4901      	ldr	r1, [pc, #4]	; (8011904 <_cleanup_r+0x8>)
 80118fe:	f000 b8af 	b.w	8011a60 <_fwalk_reent>
 8011902:	bf00      	nop
 8011904:	0801183d 	.word	0x0801183d

08011908 <__sfmoreglue>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	2268      	movs	r2, #104	; 0x68
 801190c:	1e4d      	subs	r5, r1, #1
 801190e:	4355      	muls	r5, r2
 8011910:	460e      	mov	r6, r1
 8011912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011916:	f7ff fa77 	bl	8010e08 <_malloc_r>
 801191a:	4604      	mov	r4, r0
 801191c:	b140      	cbz	r0, 8011930 <__sfmoreglue+0x28>
 801191e:	2100      	movs	r1, #0
 8011920:	e9c0 1600 	strd	r1, r6, [r0]
 8011924:	300c      	adds	r0, #12
 8011926:	60a0      	str	r0, [r4, #8]
 8011928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801192c:	f7fb fdb4 	bl	800d498 <memset>
 8011930:	4620      	mov	r0, r4
 8011932:	bd70      	pop	{r4, r5, r6, pc}

08011934 <__sfp_lock_acquire>:
 8011934:	4801      	ldr	r0, [pc, #4]	; (801193c <__sfp_lock_acquire+0x8>)
 8011936:	f000 b8b3 	b.w	8011aa0 <__retarget_lock_acquire_recursive>
 801193a:	bf00      	nop
 801193c:	20001aa9 	.word	0x20001aa9

08011940 <__sfp_lock_release>:
 8011940:	4801      	ldr	r0, [pc, #4]	; (8011948 <__sfp_lock_release+0x8>)
 8011942:	f000 b8ae 	b.w	8011aa2 <__retarget_lock_release_recursive>
 8011946:	bf00      	nop
 8011948:	20001aa9 	.word	0x20001aa9

0801194c <__sinit_lock_acquire>:
 801194c:	4801      	ldr	r0, [pc, #4]	; (8011954 <__sinit_lock_acquire+0x8>)
 801194e:	f000 b8a7 	b.w	8011aa0 <__retarget_lock_acquire_recursive>
 8011952:	bf00      	nop
 8011954:	20001aaa 	.word	0x20001aaa

08011958 <__sinit_lock_release>:
 8011958:	4801      	ldr	r0, [pc, #4]	; (8011960 <__sinit_lock_release+0x8>)
 801195a:	f000 b8a2 	b.w	8011aa2 <__retarget_lock_release_recursive>
 801195e:	bf00      	nop
 8011960:	20001aaa 	.word	0x20001aaa

08011964 <__sinit>:
 8011964:	b510      	push	{r4, lr}
 8011966:	4604      	mov	r4, r0
 8011968:	f7ff fff0 	bl	801194c <__sinit_lock_acquire>
 801196c:	69a3      	ldr	r3, [r4, #24]
 801196e:	b11b      	cbz	r3, 8011978 <__sinit+0x14>
 8011970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011974:	f7ff bff0 	b.w	8011958 <__sinit_lock_release>
 8011978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801197c:	6523      	str	r3, [r4, #80]	; 0x50
 801197e:	4b13      	ldr	r3, [pc, #76]	; (80119cc <__sinit+0x68>)
 8011980:	4a13      	ldr	r2, [pc, #76]	; (80119d0 <__sinit+0x6c>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	62a2      	str	r2, [r4, #40]	; 0x28
 8011986:	42a3      	cmp	r3, r4
 8011988:	bf04      	itt	eq
 801198a:	2301      	moveq	r3, #1
 801198c:	61a3      	streq	r3, [r4, #24]
 801198e:	4620      	mov	r0, r4
 8011990:	f000 f820 	bl	80119d4 <__sfp>
 8011994:	6060      	str	r0, [r4, #4]
 8011996:	4620      	mov	r0, r4
 8011998:	f000 f81c 	bl	80119d4 <__sfp>
 801199c:	60a0      	str	r0, [r4, #8]
 801199e:	4620      	mov	r0, r4
 80119a0:	f000 f818 	bl	80119d4 <__sfp>
 80119a4:	2200      	movs	r2, #0
 80119a6:	60e0      	str	r0, [r4, #12]
 80119a8:	2104      	movs	r1, #4
 80119aa:	6860      	ldr	r0, [r4, #4]
 80119ac:	f7ff ff82 	bl	80118b4 <std>
 80119b0:	68a0      	ldr	r0, [r4, #8]
 80119b2:	2201      	movs	r2, #1
 80119b4:	2109      	movs	r1, #9
 80119b6:	f7ff ff7d 	bl	80118b4 <std>
 80119ba:	68e0      	ldr	r0, [r4, #12]
 80119bc:	2202      	movs	r2, #2
 80119be:	2112      	movs	r1, #18
 80119c0:	f7ff ff78 	bl	80118b4 <std>
 80119c4:	2301      	movs	r3, #1
 80119c6:	61a3      	str	r3, [r4, #24]
 80119c8:	e7d2      	b.n	8011970 <__sinit+0xc>
 80119ca:	bf00      	nop
 80119cc:	08012440 	.word	0x08012440
 80119d0:	080118fd 	.word	0x080118fd

080119d4 <__sfp>:
 80119d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d6:	4607      	mov	r7, r0
 80119d8:	f7ff ffac 	bl	8011934 <__sfp_lock_acquire>
 80119dc:	4b1e      	ldr	r3, [pc, #120]	; (8011a58 <__sfp+0x84>)
 80119de:	681e      	ldr	r6, [r3, #0]
 80119e0:	69b3      	ldr	r3, [r6, #24]
 80119e2:	b913      	cbnz	r3, 80119ea <__sfp+0x16>
 80119e4:	4630      	mov	r0, r6
 80119e6:	f7ff ffbd 	bl	8011964 <__sinit>
 80119ea:	3648      	adds	r6, #72	; 0x48
 80119ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	d503      	bpl.n	80119fc <__sfp+0x28>
 80119f4:	6833      	ldr	r3, [r6, #0]
 80119f6:	b30b      	cbz	r3, 8011a3c <__sfp+0x68>
 80119f8:	6836      	ldr	r6, [r6, #0]
 80119fa:	e7f7      	b.n	80119ec <__sfp+0x18>
 80119fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a00:	b9d5      	cbnz	r5, 8011a38 <__sfp+0x64>
 8011a02:	4b16      	ldr	r3, [pc, #88]	; (8011a5c <__sfp+0x88>)
 8011a04:	60e3      	str	r3, [r4, #12]
 8011a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8011a0c:	f000 f847 	bl	8011a9e <__retarget_lock_init_recursive>
 8011a10:	f7ff ff96 	bl	8011940 <__sfp_lock_release>
 8011a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a1c:	6025      	str	r5, [r4, #0]
 8011a1e:	61a5      	str	r5, [r4, #24]
 8011a20:	2208      	movs	r2, #8
 8011a22:	4629      	mov	r1, r5
 8011a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a28:	f7fb fd36 	bl	800d498 <memset>
 8011a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a34:	4620      	mov	r0, r4
 8011a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a38:	3468      	adds	r4, #104	; 0x68
 8011a3a:	e7d9      	b.n	80119f0 <__sfp+0x1c>
 8011a3c:	2104      	movs	r1, #4
 8011a3e:	4638      	mov	r0, r7
 8011a40:	f7ff ff62 	bl	8011908 <__sfmoreglue>
 8011a44:	4604      	mov	r4, r0
 8011a46:	6030      	str	r0, [r6, #0]
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d1d5      	bne.n	80119f8 <__sfp+0x24>
 8011a4c:	f7ff ff78 	bl	8011940 <__sfp_lock_release>
 8011a50:	230c      	movs	r3, #12
 8011a52:	603b      	str	r3, [r7, #0]
 8011a54:	e7ee      	b.n	8011a34 <__sfp+0x60>
 8011a56:	bf00      	nop
 8011a58:	08012440 	.word	0x08012440
 8011a5c:	ffff0001 	.word	0xffff0001

08011a60 <_fwalk_reent>:
 8011a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a64:	4606      	mov	r6, r0
 8011a66:	4688      	mov	r8, r1
 8011a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a6c:	2700      	movs	r7, #0
 8011a6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a72:	f1b9 0901 	subs.w	r9, r9, #1
 8011a76:	d505      	bpl.n	8011a84 <_fwalk_reent+0x24>
 8011a78:	6824      	ldr	r4, [r4, #0]
 8011a7a:	2c00      	cmp	r4, #0
 8011a7c:	d1f7      	bne.n	8011a6e <_fwalk_reent+0xe>
 8011a7e:	4638      	mov	r0, r7
 8011a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a84:	89ab      	ldrh	r3, [r5, #12]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d907      	bls.n	8011a9a <_fwalk_reent+0x3a>
 8011a8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	d003      	beq.n	8011a9a <_fwalk_reent+0x3a>
 8011a92:	4629      	mov	r1, r5
 8011a94:	4630      	mov	r0, r6
 8011a96:	47c0      	blx	r8
 8011a98:	4307      	orrs	r7, r0
 8011a9a:	3568      	adds	r5, #104	; 0x68
 8011a9c:	e7e9      	b.n	8011a72 <_fwalk_reent+0x12>

08011a9e <__retarget_lock_init_recursive>:
 8011a9e:	4770      	bx	lr

08011aa0 <__retarget_lock_acquire_recursive>:
 8011aa0:	4770      	bx	lr

08011aa2 <__retarget_lock_release_recursive>:
 8011aa2:	4770      	bx	lr

08011aa4 <__swhatbuf_r>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	460e      	mov	r6, r1
 8011aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aac:	2900      	cmp	r1, #0
 8011aae:	b096      	sub	sp, #88	; 0x58
 8011ab0:	4614      	mov	r4, r2
 8011ab2:	461d      	mov	r5, r3
 8011ab4:	da08      	bge.n	8011ac8 <__swhatbuf_r+0x24>
 8011ab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011aba:	2200      	movs	r2, #0
 8011abc:	602a      	str	r2, [r5, #0]
 8011abe:	061a      	lsls	r2, r3, #24
 8011ac0:	d410      	bmi.n	8011ae4 <__swhatbuf_r+0x40>
 8011ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ac6:	e00e      	b.n	8011ae6 <__swhatbuf_r+0x42>
 8011ac8:	466a      	mov	r2, sp
 8011aca:	f000 f903 	bl	8011cd4 <_fstat_r>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	dbf1      	blt.n	8011ab6 <__swhatbuf_r+0x12>
 8011ad2:	9a01      	ldr	r2, [sp, #4]
 8011ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011adc:	425a      	negs	r2, r3
 8011ade:	415a      	adcs	r2, r3
 8011ae0:	602a      	str	r2, [r5, #0]
 8011ae2:	e7ee      	b.n	8011ac2 <__swhatbuf_r+0x1e>
 8011ae4:	2340      	movs	r3, #64	; 0x40
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	b016      	add	sp, #88	; 0x58
 8011aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08011af0 <__smakebuf_r>:
 8011af0:	898b      	ldrh	r3, [r1, #12]
 8011af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011af4:	079d      	lsls	r5, r3, #30
 8011af6:	4606      	mov	r6, r0
 8011af8:	460c      	mov	r4, r1
 8011afa:	d507      	bpl.n	8011b0c <__smakebuf_r+0x1c>
 8011afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	6123      	str	r3, [r4, #16]
 8011b04:	2301      	movs	r3, #1
 8011b06:	6163      	str	r3, [r4, #20]
 8011b08:	b002      	add	sp, #8
 8011b0a:	bd70      	pop	{r4, r5, r6, pc}
 8011b0c:	ab01      	add	r3, sp, #4
 8011b0e:	466a      	mov	r2, sp
 8011b10:	f7ff ffc8 	bl	8011aa4 <__swhatbuf_r>
 8011b14:	9900      	ldr	r1, [sp, #0]
 8011b16:	4605      	mov	r5, r0
 8011b18:	4630      	mov	r0, r6
 8011b1a:	f7ff f975 	bl	8010e08 <_malloc_r>
 8011b1e:	b948      	cbnz	r0, 8011b34 <__smakebuf_r+0x44>
 8011b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b24:	059a      	lsls	r2, r3, #22
 8011b26:	d4ef      	bmi.n	8011b08 <__smakebuf_r+0x18>
 8011b28:	f023 0303 	bic.w	r3, r3, #3
 8011b2c:	f043 0302 	orr.w	r3, r3, #2
 8011b30:	81a3      	strh	r3, [r4, #12]
 8011b32:	e7e3      	b.n	8011afc <__smakebuf_r+0xc>
 8011b34:	4b0d      	ldr	r3, [pc, #52]	; (8011b6c <__smakebuf_r+0x7c>)
 8011b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	6020      	str	r0, [r4, #0]
 8011b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	9b00      	ldr	r3, [sp, #0]
 8011b44:	6163      	str	r3, [r4, #20]
 8011b46:	9b01      	ldr	r3, [sp, #4]
 8011b48:	6120      	str	r0, [r4, #16]
 8011b4a:	b15b      	cbz	r3, 8011b64 <__smakebuf_r+0x74>
 8011b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b50:	4630      	mov	r0, r6
 8011b52:	f000 f8d1 	bl	8011cf8 <_isatty_r>
 8011b56:	b128      	cbz	r0, 8011b64 <__smakebuf_r+0x74>
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	f023 0303 	bic.w	r3, r3, #3
 8011b5e:	f043 0301 	orr.w	r3, r3, #1
 8011b62:	81a3      	strh	r3, [r4, #12]
 8011b64:	89a0      	ldrh	r0, [r4, #12]
 8011b66:	4305      	orrs	r5, r0
 8011b68:	81a5      	strh	r5, [r4, #12]
 8011b6a:	e7cd      	b.n	8011b08 <__smakebuf_r+0x18>
 8011b6c:	080118fd 	.word	0x080118fd

08011b70 <_malloc_usable_size_r>:
 8011b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b74:	1f18      	subs	r0, r3, #4
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	bfbc      	itt	lt
 8011b7a:	580b      	ldrlt	r3, [r1, r0]
 8011b7c:	18c0      	addlt	r0, r0, r3
 8011b7e:	4770      	bx	lr

08011b80 <_raise_r>:
 8011b80:	291f      	cmp	r1, #31
 8011b82:	b538      	push	{r3, r4, r5, lr}
 8011b84:	4604      	mov	r4, r0
 8011b86:	460d      	mov	r5, r1
 8011b88:	d904      	bls.n	8011b94 <_raise_r+0x14>
 8011b8a:	2316      	movs	r3, #22
 8011b8c:	6003      	str	r3, [r0, #0]
 8011b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b96:	b112      	cbz	r2, 8011b9e <_raise_r+0x1e>
 8011b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b9c:	b94b      	cbnz	r3, 8011bb2 <_raise_r+0x32>
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f000 f830 	bl	8011c04 <_getpid_r>
 8011ba4:	462a      	mov	r2, r5
 8011ba6:	4601      	mov	r1, r0
 8011ba8:	4620      	mov	r0, r4
 8011baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bae:	f000 b817 	b.w	8011be0 <_kill_r>
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d00a      	beq.n	8011bcc <_raise_r+0x4c>
 8011bb6:	1c59      	adds	r1, r3, #1
 8011bb8:	d103      	bne.n	8011bc2 <_raise_r+0x42>
 8011bba:	2316      	movs	r3, #22
 8011bbc:	6003      	str	r3, [r0, #0]
 8011bbe:	2001      	movs	r0, #1
 8011bc0:	e7e7      	b.n	8011b92 <_raise_r+0x12>
 8011bc2:	2400      	movs	r4, #0
 8011bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bc8:	4628      	mov	r0, r5
 8011bca:	4798      	blx	r3
 8011bcc:	2000      	movs	r0, #0
 8011bce:	e7e0      	b.n	8011b92 <_raise_r+0x12>

08011bd0 <raise>:
 8011bd0:	4b02      	ldr	r3, [pc, #8]	; (8011bdc <raise+0xc>)
 8011bd2:	4601      	mov	r1, r0
 8011bd4:	6818      	ldr	r0, [r3, #0]
 8011bd6:	f7ff bfd3 	b.w	8011b80 <_raise_r>
 8011bda:	bf00      	nop
 8011bdc:	20000fc0 	.word	0x20000fc0

08011be0 <_kill_r>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	4d07      	ldr	r5, [pc, #28]	; (8011c00 <_kill_r+0x20>)
 8011be4:	2300      	movs	r3, #0
 8011be6:	4604      	mov	r4, r0
 8011be8:	4608      	mov	r0, r1
 8011bea:	4611      	mov	r1, r2
 8011bec:	602b      	str	r3, [r5, #0]
 8011bee:	f7f0 f92c 	bl	8001e4a <_kill>
 8011bf2:	1c43      	adds	r3, r0, #1
 8011bf4:	d102      	bne.n	8011bfc <_kill_r+0x1c>
 8011bf6:	682b      	ldr	r3, [r5, #0]
 8011bf8:	b103      	cbz	r3, 8011bfc <_kill_r+0x1c>
 8011bfa:	6023      	str	r3, [r4, #0]
 8011bfc:	bd38      	pop	{r3, r4, r5, pc}
 8011bfe:	bf00      	nop
 8011c00:	20001aa4 	.word	0x20001aa4

08011c04 <_getpid_r>:
 8011c04:	f7f0 b91a 	b.w	8001e3c <_getpid>

08011c08 <__sread>:
 8011c08:	b510      	push	{r4, lr}
 8011c0a:	460c      	mov	r4, r1
 8011c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c10:	f000 f894 	bl	8011d3c <_read_r>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	bfab      	itete	ge
 8011c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8011c1c:	181b      	addge	r3, r3, r0
 8011c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c22:	bfac      	ite	ge
 8011c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c26:	81a3      	strhlt	r3, [r4, #12]
 8011c28:	bd10      	pop	{r4, pc}

08011c2a <__swrite>:
 8011c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2e:	461f      	mov	r7, r3
 8011c30:	898b      	ldrh	r3, [r1, #12]
 8011c32:	05db      	lsls	r3, r3, #23
 8011c34:	4605      	mov	r5, r0
 8011c36:	460c      	mov	r4, r1
 8011c38:	4616      	mov	r6, r2
 8011c3a:	d505      	bpl.n	8011c48 <__swrite+0x1e>
 8011c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c40:	2302      	movs	r3, #2
 8011c42:	2200      	movs	r2, #0
 8011c44:	f000 f868 	bl	8011d18 <_lseek_r>
 8011c48:	89a3      	ldrh	r3, [r4, #12]
 8011c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c52:	81a3      	strh	r3, [r4, #12]
 8011c54:	4632      	mov	r2, r6
 8011c56:	463b      	mov	r3, r7
 8011c58:	4628      	mov	r0, r5
 8011c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5e:	f000 b817 	b.w	8011c90 <_write_r>

08011c62 <__sseek>:
 8011c62:	b510      	push	{r4, lr}
 8011c64:	460c      	mov	r4, r1
 8011c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6a:	f000 f855 	bl	8011d18 <_lseek_r>
 8011c6e:	1c43      	adds	r3, r0, #1
 8011c70:	89a3      	ldrh	r3, [r4, #12]
 8011c72:	bf15      	itete	ne
 8011c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c7e:	81a3      	strheq	r3, [r4, #12]
 8011c80:	bf18      	it	ne
 8011c82:	81a3      	strhne	r3, [r4, #12]
 8011c84:	bd10      	pop	{r4, pc}

08011c86 <__sclose>:
 8011c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c8a:	f000 b813 	b.w	8011cb4 <_close_r>
	...

08011c90 <_write_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	4d07      	ldr	r5, [pc, #28]	; (8011cb0 <_write_r+0x20>)
 8011c94:	4604      	mov	r4, r0
 8011c96:	4608      	mov	r0, r1
 8011c98:	4611      	mov	r1, r2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	602a      	str	r2, [r5, #0]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	f7f0 f90a 	bl	8001eb8 <_write>
 8011ca4:	1c43      	adds	r3, r0, #1
 8011ca6:	d102      	bne.n	8011cae <_write_r+0x1e>
 8011ca8:	682b      	ldr	r3, [r5, #0]
 8011caa:	b103      	cbz	r3, 8011cae <_write_r+0x1e>
 8011cac:	6023      	str	r3, [r4, #0]
 8011cae:	bd38      	pop	{r3, r4, r5, pc}
 8011cb0:	20001aa4 	.word	0x20001aa4

08011cb4 <_close_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4d06      	ldr	r5, [pc, #24]	; (8011cd0 <_close_r+0x1c>)
 8011cb8:	2300      	movs	r3, #0
 8011cba:	4604      	mov	r4, r0
 8011cbc:	4608      	mov	r0, r1
 8011cbe:	602b      	str	r3, [r5, #0]
 8011cc0:	f7f0 f916 	bl	8001ef0 <_close>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_close_r+0x1a>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_close_r+0x1a>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	20001aa4 	.word	0x20001aa4

08011cd4 <_fstat_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d07      	ldr	r5, [pc, #28]	; (8011cf4 <_fstat_r+0x20>)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4604      	mov	r4, r0
 8011cdc:	4608      	mov	r0, r1
 8011cde:	4611      	mov	r1, r2
 8011ce0:	602b      	str	r3, [r5, #0]
 8011ce2:	f7f0 f910 	bl	8001f06 <_fstat>
 8011ce6:	1c43      	adds	r3, r0, #1
 8011ce8:	d102      	bne.n	8011cf0 <_fstat_r+0x1c>
 8011cea:	682b      	ldr	r3, [r5, #0]
 8011cec:	b103      	cbz	r3, 8011cf0 <_fstat_r+0x1c>
 8011cee:	6023      	str	r3, [r4, #0]
 8011cf0:	bd38      	pop	{r3, r4, r5, pc}
 8011cf2:	bf00      	nop
 8011cf4:	20001aa4 	.word	0x20001aa4

08011cf8 <_isatty_r>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	4d06      	ldr	r5, [pc, #24]	; (8011d14 <_isatty_r+0x1c>)
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4608      	mov	r0, r1
 8011d02:	602b      	str	r3, [r5, #0]
 8011d04:	f7f0 f90e 	bl	8001f24 <_isatty>
 8011d08:	1c43      	adds	r3, r0, #1
 8011d0a:	d102      	bne.n	8011d12 <_isatty_r+0x1a>
 8011d0c:	682b      	ldr	r3, [r5, #0]
 8011d0e:	b103      	cbz	r3, 8011d12 <_isatty_r+0x1a>
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	bd38      	pop	{r3, r4, r5, pc}
 8011d14:	20001aa4 	.word	0x20001aa4

08011d18 <_lseek_r>:
 8011d18:	b538      	push	{r3, r4, r5, lr}
 8011d1a:	4d07      	ldr	r5, [pc, #28]	; (8011d38 <_lseek_r+0x20>)
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	4608      	mov	r0, r1
 8011d20:	4611      	mov	r1, r2
 8011d22:	2200      	movs	r2, #0
 8011d24:	602a      	str	r2, [r5, #0]
 8011d26:	461a      	mov	r2, r3
 8011d28:	f7f0 f906 	bl	8001f38 <_lseek>
 8011d2c:	1c43      	adds	r3, r0, #1
 8011d2e:	d102      	bne.n	8011d36 <_lseek_r+0x1e>
 8011d30:	682b      	ldr	r3, [r5, #0]
 8011d32:	b103      	cbz	r3, 8011d36 <_lseek_r+0x1e>
 8011d34:	6023      	str	r3, [r4, #0]
 8011d36:	bd38      	pop	{r3, r4, r5, pc}
 8011d38:	20001aa4 	.word	0x20001aa4

08011d3c <_read_r>:
 8011d3c:	b538      	push	{r3, r4, r5, lr}
 8011d3e:	4d07      	ldr	r5, [pc, #28]	; (8011d5c <_read_r+0x20>)
 8011d40:	4604      	mov	r4, r0
 8011d42:	4608      	mov	r0, r1
 8011d44:	4611      	mov	r1, r2
 8011d46:	2200      	movs	r2, #0
 8011d48:	602a      	str	r2, [r5, #0]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	f7f0 f897 	bl	8001e7e <_read>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_read_r+0x1e>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_read_r+0x1e>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	20001aa4 	.word	0x20001aa4

08011d60 <_init>:
 8011d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d62:	bf00      	nop
 8011d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d66:	bc08      	pop	{r3}
 8011d68:	469e      	mov	lr, r3
 8011d6a:	4770      	bx	lr

08011d6c <_fini>:
 8011d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6e:	bf00      	nop
 8011d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d72:	bc08      	pop	{r3}
 8011d74:	469e      	mov	lr, r3
 8011d76:	4770      	bx	lr
