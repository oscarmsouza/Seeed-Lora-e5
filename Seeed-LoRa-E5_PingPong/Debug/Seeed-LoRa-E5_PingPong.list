
Seeed-LoRa-E5_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4bc  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800c5f4  0800c5f4  0001c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb38  0800cb38  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb40  0800cb40  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800cb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  2000001c  0800cb64  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800cb64  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021714  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ad0  00000000  00000000  0004175a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00047230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  00049110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008ff2  00000000  00000000  0004ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a47  00000000  00000000  00053d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9db6  00000000  00000000  000777d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013158f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c6c  00000000  00000000  001315e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c5dc 	.word	0x0800c5dc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c5dc 	.word	0x0800c5dc

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b974 	b.w	8000488 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14d      	bne.n	8000264 <__udivmoddi4+0xac>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d968      	bls.n	80002a0 <__udivmoddi4+0xe8>
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	b152      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d4:	fa01 f302 	lsl.w	r3, r1, r2
 80001d8:	f1c2 0120 	rsb	r1, r2, #32
 80001dc:	fa20 f101 	lsr.w	r1, r0, r1
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	ea41 0803 	orr.w	r8, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	fbb8 fef5 	udiv	lr, r8, r5
 80001f4:	fa1f f78c 	uxth.w	r7, ip
 80001f8:	fb05 831e 	mls	r3, r5, lr, r8
 80001fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000200:	fb0e f107 	mul.w	r1, lr, r7
 8000204:	4299      	cmp	r1, r3
 8000206:	d90b      	bls.n	8000220 <__udivmoddi4+0x68>
 8000208:	eb1c 0303 	adds.w	r3, ip, r3
 800020c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000210:	f080 811e 	bcs.w	8000450 <__udivmoddi4+0x298>
 8000214:	4299      	cmp	r1, r3
 8000216:	f240 811b 	bls.w	8000450 <__udivmoddi4+0x298>
 800021a:	f1ae 0e02 	sub.w	lr, lr, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0f5 	udiv	r0, r3, r5
 8000228:	fb05 3310 	mls	r3, r5, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 f707 	mul.w	r7, r0, r7
 8000234:	42a7      	cmp	r7, r4
 8000236:	d90a      	bls.n	800024e <__udivmoddi4+0x96>
 8000238:	eb1c 0404 	adds.w	r4, ip, r4
 800023c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000240:	f080 8108 	bcs.w	8000454 <__udivmoddi4+0x29c>
 8000244:	42a7      	cmp	r7, r4
 8000246:	f240 8105 	bls.w	8000454 <__udivmoddi4+0x29c>
 800024a:	4464      	add	r4, ip
 800024c:	3802      	subs	r0, #2
 800024e:	1be4      	subs	r4, r4, r7
 8000250:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa8>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d908      	bls.n	800027a <__udivmoddi4+0xc2>
 8000268:	2e00      	cmp	r6, #0
 800026a:	f000 80ee 	beq.w	800044a <__udivmoddi4+0x292>
 800026e:	2100      	movs	r1, #0
 8000270:	e9c6 0500 	strd	r0, r5, [r6]
 8000274:	4608      	mov	r0, r1
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f183 	clz	r1, r3
 800027e:	2900      	cmp	r1, #0
 8000280:	d14a      	bne.n	8000318 <__udivmoddi4+0x160>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd4>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80f9 	bhi.w	800047e <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0303 	sbc.w	r3, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e2      	beq.n	8000260 <__udivmoddi4+0xa8>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7df      	b.n	8000260 <__udivmoddi4+0xa8>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xec>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 8091 	bne.w	80003d0 <__udivmoddi4+0x218>
 80002ae:	eba1 050c 	sub.w	r5, r1, ip
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fa1f fe8c 	uxth.w	lr, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	fbb5 f3f7 	udiv	r3, r5, r7
 80002c0:	fb07 5013 	mls	r0, r7, r3, r5
 80002c4:	0c25      	lsrs	r5, r4, #16
 80002c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ca:	fb0e f003 	mul.w	r0, lr, r3
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	eb1c 0505 	adds.w	r5, ip, r5
 80002d6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x12a>
 80002dc:	42a8      	cmp	r0, r5
 80002de:	f200 80cb 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 80002e2:	4643      	mov	r3, r8
 80002e4:	1a2d      	subs	r5, r5, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ec:	fb07 5510 	mls	r5, r7, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb0e fe00 	mul.w	lr, lr, r0
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x156>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x154>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f200 80bb 	bhi.w	8000482 <__udivmoddi4+0x2ca>
 800030c:	4628      	mov	r0, r5
 800030e:	eba4 040e 	sub.w	r4, r4, lr
 8000312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000316:	e79e      	b.n	8000256 <__udivmoddi4+0x9e>
 8000318:	f1c1 0720 	rsb	r7, r1, #32
 800031c:	408b      	lsls	r3, r1
 800031e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000322:	ea4c 0c03 	orr.w	ip, ip, r3
 8000326:	fa20 f407 	lsr.w	r4, r0, r7
 800032a:	fa05 f301 	lsl.w	r3, r5, r1
 800032e:	431c      	orrs	r4, r3
 8000330:	40fd      	lsrs	r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fbb5 f8f9 	udiv	r8, r5, r9
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	fb09 5518 	mls	r5, r9, r8, r5
 8000348:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800034c:	fb08 f00e 	mul.w	r0, r8, lr
 8000350:	42a8      	cmp	r0, r5
 8000352:	fa02 f201 	lsl.w	r2, r2, r1
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b8>
 8000358:	eb1c 0505 	adds.w	r5, ip, r5
 800035c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000360:	f080 8088 	bcs.w	8000474 <__udivmoddi4+0x2bc>
 8000364:	42a8      	cmp	r0, r5
 8000366:	f240 8085 	bls.w	8000474 <__udivmoddi4+0x2bc>
 800036a:	f1a8 0802 	sub.w	r8, r8, #2
 800036e:	4465      	add	r5, ip
 8000370:	1a2d      	subs	r5, r5, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb5 f0f9 	udiv	r0, r5, r9
 8000378:	fb09 5510 	mls	r5, r9, r0, r5
 800037c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45ae      	cmp	lr, r5
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1e2>
 8000388:	eb1c 0505 	adds.w	r5, ip, r5
 800038c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000390:	d26c      	bcs.n	800046c <__udivmoddi4+0x2b4>
 8000392:	45ae      	cmp	lr, r5
 8000394:	d96a      	bls.n	800046c <__udivmoddi4+0x2b4>
 8000396:	3802      	subs	r0, #2
 8000398:	4465      	add	r5, ip
 800039a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039e:	fba0 9402 	umull	r9, r4, r0, r2
 80003a2:	eba5 050e 	sub.w	r5, r5, lr
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	46c8      	mov	r8, r9
 80003aa:	46a6      	mov	lr, r4
 80003ac:	d356      	bcc.n	800045c <__udivmoddi4+0x2a4>
 80003ae:	d053      	beq.n	8000458 <__udivmoddi4+0x2a0>
 80003b0:	b15e      	cbz	r6, 80003ca <__udivmoddi4+0x212>
 80003b2:	ebb3 0208 	subs.w	r2, r3, r8
 80003b6:	eb65 050e 	sbc.w	r5, r5, lr
 80003ba:	fa05 f707 	lsl.w	r7, r5, r7
 80003be:	fa22 f301 	lsr.w	r3, r2, r1
 80003c2:	40cd      	lsrs	r5, r1
 80003c4:	431f      	orrs	r7, r3
 80003c6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ca:	2100      	movs	r1, #0
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f103 	lsr.w	r1, r0, r3
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	fa25 f303 	lsr.w	r3, r5, r3
 80003e0:	4095      	lsls	r5, r2
 80003e2:	430d      	orrs	r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3011 	mls	r0, r7, r1, r3
 80003f4:	0c2b      	lsrs	r3, r5, #16
 80003f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003fa:	fb01 f00e 	mul.w	r0, r1, lr
 80003fe:	4298      	cmp	r0, r3
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x260>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800040e:	d22f      	bcs.n	8000470 <__udivmoddi4+0x2b8>
 8000410:	4298      	cmp	r0, r3
 8000412:	d92d      	bls.n	8000470 <__udivmoddi4+0x2b8>
 8000414:	3902      	subs	r1, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000420:	fb07 3310 	mls	r3, r7, r0, r3
 8000424:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000428:	fb00 f30e 	mul.w	r3, r0, lr
 800042c:	42ab      	cmp	r3, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x28a>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000438:	d216      	bcs.n	8000468 <__udivmoddi4+0x2b0>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d914      	bls.n	8000468 <__udivmoddi4+0x2b0>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	1aed      	subs	r5, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e738      	b.n	80002bc <__udivmoddi4+0x104>
 800044a:	4631      	mov	r1, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e707      	b.n	8000260 <__udivmoddi4+0xa8>
 8000450:	4686      	mov	lr, r0
 8000452:	e6e5      	b.n	8000220 <__udivmoddi4+0x68>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fa      	b.n	800024e <__udivmoddi4+0x96>
 8000458:	454b      	cmp	r3, r9
 800045a:	d2a9      	bcs.n	80003b0 <__udivmoddi4+0x1f8>
 800045c:	ebb9 0802 	subs.w	r8, r9, r2
 8000460:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000464:	3801      	subs	r0, #1
 8000466:	e7a3      	b.n	80003b0 <__udivmoddi4+0x1f8>
 8000468:	4640      	mov	r0, r8
 800046a:	e7ea      	b.n	8000442 <__udivmoddi4+0x28a>
 800046c:	4620      	mov	r0, r4
 800046e:	e794      	b.n	800039a <__udivmoddi4+0x1e2>
 8000470:	4641      	mov	r1, r8
 8000472:	e7d1      	b.n	8000418 <__udivmoddi4+0x260>
 8000474:	46d0      	mov	r8, sl
 8000476:	e77b      	b.n	8000370 <__udivmoddi4+0x1b8>
 8000478:	3b02      	subs	r3, #2
 800047a:	4465      	add	r5, ip
 800047c:	e732      	b.n	80002e4 <__udivmoddi4+0x12c>
 800047e:	4608      	mov	r0, r1
 8000480:	e709      	b.n	8000296 <__udivmoddi4+0xde>
 8000482:	4464      	add	r4, ip
 8000484:	3802      	subs	r0, #2
 8000486:	e742      	b.n	800030e <__udivmoddi4+0x156>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b0:	68fb      	ldr	r3, [r7, #12]
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004c0:	2004      	movs	r0, #4
 80004c2:	f7ff ffe3 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	2001      	movs	r0, #1
 80004c8:	f7ff ffe0 	bl	800048c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2102      	movs	r1, #2
 80004d0:	200b      	movs	r0, #11
 80004d2:	f001 fcd8 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d6:	200b      	movs	r0, #11
 80004d8:	f001 fcef 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000504:	68fb      	ldr	r3, [r7, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ffdb 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2004      	movs	r0, #4
 800052c:	f7ff ffd8 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	2002      	movs	r0, #2
 8000532:	f7ff ffd5 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4857      	ldr	r0, [pc, #348]	; (800069c <MX_GPIO_Init+0x18c>)
 800053e:	f002 fb08 	bl	8002b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2131      	movs	r1, #49	; 0x31
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f002 fb02 	bl	8002b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800054e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000552:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	484d      	ldr	r0, [pc, #308]	; (800069c <MX_GPIO_Init+0x18c>)
 8000566:	f002 f8af 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800056a:	2331      	movs	r3, #49	; 0x31
 800056c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000576:	2303      	movs	r3, #3
 8000578:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f002 f8a1 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000592:	2301      	movs	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4840      	ldr	r0, [pc, #256]	; (800069c <MX_GPIO_Init+0x18c>)
 800059c:	f002 f894 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(GPIOA, PLAY5_Pin | PLAY1_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f002 fad2 	bl	8002b52 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(GPIOB,
 80005ae:	2201      	movs	r2, #1
 80005b0:	f248 6118 	movw	r1, #34328	; 0x8618
 80005b4:	4839      	ldr	r0, [pc, #228]	; (800069c <MX_GPIO_Init+0x18c>)
 80005b6:	f002 facc 	bl	8002b52 <HAL_GPIO_WritePin>
  			PLAY6_Pin | PLAY8_Pin | PLAY7_Pin | PLAY4_Pin | PLAY2_Pin,
  			GPIO_PIN_SET);

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4836      	ldr	r0, [pc, #216]	; (800069c <MX_GPIO_Init+0x18c>)
 80005c2:	f002 fac6 	bl	8002b52 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f002 fabf 	bl	8002b52 <HAL_GPIO_WritePin>

  	/*Configure GPIO pin Output Level */
  	HAL_GPIO_WritePin(PLAY3_GPIO_Port, PLAY3_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4831      	ldr	r0, [pc, #196]	; (80006a0 <MX_GPIO_Init+0x190>)
 80005da:	f002 faba 	bl	8002b52 <HAL_GPIO_WritePin>

  	/*Configure GPIO pins : PLAY5_Pin PLAY1_Pin */
  	GPIO_InitStruct.Pin = PLAY5_Pin | PLAY1_Pin;
 80005de:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80005e2:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f002 f866 	bl	80026c8 <HAL_GPIO_Init>

  	/*Configure GPIO pins : PLAY6_Pin PLAY8_Pin PLAY7_Pin PLAY4_Pin
  	 PLAY2_Pin */
  	GPIO_InitStruct.Pin = PLAY6_Pin | PLAY8_Pin | PLAY7_Pin | PLAY4_Pin
 80005fc:	f248 6318 	movw	r3, #34328	; 0x8618
 8000600:	607b      	str	r3, [r7, #4]
  			| PLAY2_Pin;
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4822      	ldr	r0, [pc, #136]	; (800069c <MX_GPIO_Init+0x18c>)
 8000614:	f002 f858 	bl	80026c8 <HAL_GPIO_Init>

  	/*Configure GPIO pin : LED2_Pin */
  	GPIO_InitStruct.Pin = LED2_Pin;
 8000618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800061e:	2311      	movs	r3, #17
 8000620:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <MX_GPIO_Init+0x18c>)
 8000630:	f002 f84a 	bl	80026c8 <HAL_GPIO_Init>

  	/*Configure GPIO pin : LED1_Pin */
  	GPIO_InitStruct.Pin = LED1_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800063a:	2311      	movs	r3, #17
 800063c:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	2302      	movs	r3, #2
 8000644:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f002 f83b 	bl	80026c8 <HAL_GPIO_Init>

  	/*Configure GPIO pin : PLAY3_Pin */
  	GPIO_InitStruct.Pin = PLAY3_Pin;
 8000652:	2302      	movs	r3, #2
 8000654:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PLAY3_GPIO_Port, &GPIO_InitStruct);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_GPIO_Init+0x190>)
 8000668:	f002 f82e 	bl	80026c8 <HAL_GPIO_Init>

  	/*Configure GPIO pins : BOTAO2_Pin BOTAO1_Pin */
  	GPIO_InitStruct.Pin = BOTAO2_Pin | BOTAO1_Pin;
 800066c:	230c      	movs	r3, #12
 800066e:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f002 f822 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2029      	movs	r0, #41	; 0x29
 800068a:	f001 fbfc 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068e:	2029      	movs	r0, #41	; 0x29
 8000690:	f001 fc13 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	48000400 	.word	0x48000400
 80006a0:	48000800 	.word	0x48000800

080006a4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b4:	f023 0218 	bic.w	r2, r3, #24
 80006b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4313      	orrs	r3, r2
 80006c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f001 faaf 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f845 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ff17 	bl	8000510 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80006e2:	f00a f9a4 	bl	800aa2e <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */
	LED1_OFF
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f002 fa2f 	bl	8002b52 <HAL_GPIO_WritePin>
	LED2_OFF
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	481a      	ldr	r0, [pc, #104]	; (8000764 <main+0x94>)
 80006fc:	f002 fa29 	bl	8002b52 <HAL_GPIO_WritePin>
	teste_led();
 8000700:	f000 fa14 	bl	8000b2c <teste_led>
	uint8_t central_num = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
	display_num(central_num);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f886 	bl	800081c <display_num>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
    if (HAL_GPIO_ReadPin(BOTAO1_GPIO_Port, BOTAO1_Pin)) {
 8000710:	2104      	movs	r1, #4
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f002 fa05 	bl	8002b24 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <main+0x54>
    	MX_SubGHz_Phy_Process();
 8000720:	f00a f98d 	bl	800aa3e <MX_SubGHz_Phy_Process>
    }
	if (HAL_GPIO_ReadPin(BOTAO2_GPIO_Port, BOTAO2_Pin)) {
 8000724:	2108      	movs	r1, #8
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f002 f9fb 	bl	8002b24 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0ed      	beq.n	8000710 <main+0x40>
		if (central_num < 10)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b09      	cmp	r3, #9
 8000738:	d803      	bhi.n	8000742 <main+0x72>
			central_num++;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	e001      	b.n	8000746 <main+0x76>
		else
			central_num = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
		display_num(central_num);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f867 	bl	800081c <display_num>
		while (HAL_GPIO_ReadPin(BOTAO2_GPIO_Port, BOTAO2_Pin)) {
 800074e:	bf00      	nop
 8000750:	2108      	movs	r1, #8
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f002 f9e5 	bl	8002b24 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f7      	bne.n	8000750 <main+0x80>
    if (HAL_GPIO_ReadPin(BOTAO1_GPIO_Port, BOTAO1_Pin)) {
 8000760:	e7d6      	b.n	8000710 <main+0x40>
 8000762:	bf00      	nop
 8000764:	48000400 	.word	0x48000400

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09a      	sub	sp, #104	; 0x68
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2248      	movs	r2, #72	; 0x48
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f00b ff14 	bl	800c5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800078e:	f002 fa19 	bl	8002bc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff86 	bl	80006a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xb0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <SystemClock_Config+0xb0>)
 80007a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <SystemClock_Config+0xb0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007b4:	2324      	movs	r3, #36	; 0x24
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b8:	2381      	movs	r3, #129	; 0x81
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80007c4:	23b0      	movs	r3, #176	; 0xb0
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fd43 	bl	800325c <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007dc:	f000 f9e2 	bl	8000ba4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80007e0:	234f      	movs	r3, #79	; 0x4f
 80007e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2102      	movs	r1, #2
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f8c8 	bl	8003994 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800080a:	f000 f9cb 	bl	8000ba4 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3768      	adds	r7, #104	; 0x68
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	58000400 	.word	0x58000400

0800081c <display_num>:

/* USER CODE BEGIN 4 */
uint8_t display_num(uint8_t numero) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	DISPLAY1_OFF
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f002 f98f 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY2_OFF
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	48b9      	ldr	r0, [pc, #740]	; (8000b20 <display_num+0x304>)
 800083c:	f002 f989 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY3_OFF
 8000840:	2201      	movs	r2, #1
 8000842:	2102      	movs	r1, #2
 8000844:	48b7      	ldr	r0, [pc, #732]	; (8000b24 <display_num+0x308>)
 8000846:	f002 f984 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY4_OFF
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	48b3      	ldr	r0, [pc, #716]	; (8000b20 <display_num+0x304>)
 8000852:	f002 f97e 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY5_OFF
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f002 f977 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY6_OFF
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086a:	48ad      	ldr	r0, [pc, #692]	; (8000b20 <display_num+0x304>)
 800086c:	f002 f971 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY7_OFF
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	48aa      	ldr	r0, [pc, #680]	; (8000b20 <display_num+0x304>)
 8000876:	f002 f96c 	bl	8002b52 <HAL_GPIO_WritePin>
	DISPLAY8_OFF
 800087a:	2201      	movs	r2, #1
 800087c:	2108      	movs	r1, #8
 800087e:	48a8      	ldr	r0, [pc, #672]	; (8000b20 <display_num+0x304>)
 8000880:	f002 f967 	bl	8002b52 <HAL_GPIO_WritePin>

	if (ativo)
 8000884:	4ba8      	ldr	r3, [pc, #672]	; (8000b28 <display_num+0x30c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <display_num+0x7c>
		DISPLAY4_ON
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000892:	48a3      	ldr	r0, [pc, #652]	; (8000b20 <display_num+0x304>)
 8000894:	f002 f95d 	bl	8002b52 <HAL_GPIO_WritePin>
	switch (numero) {
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b09      	cmp	r3, #9
 800089c:	f200 8139 	bhi.w	8000b12 <display_num+0x2f6>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <display_num+0x8c>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008d1 	.word	0x080008d1
 80008ac:	08000919 	.word	0x08000919
 80008b0:	0800092f 	.word	0x0800092f
 80008b4:	0800096b 	.word	0x0800096b
 80008b8:	080009a3 	.word	0x080009a3
 80008bc:	080009d3 	.word	0x080009d3
 80008c0:	08000a0f 	.word	0x08000a0f
 80008c4:	08000a59 	.word	0x08000a59
 80008c8:	08000a79 	.word	0x08000a79
 80008cc:	08000acd 	.word	0x08000acd
	case 0:
		DISPLAY1_ON
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f002 f93a 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	488e      	ldr	r0, [pc, #568]	; (8000b20 <display_num+0x304>)
 80008e6:	f002 f934 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	488d      	ldr	r0, [pc, #564]	; (8000b24 <display_num+0x308>)
 80008f0:	f002 f92f 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f002 f928 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 8000902:	2200      	movs	r2, #0
 8000904:	2110      	movs	r1, #16
 8000906:	4886      	ldr	r0, [pc, #536]	; (8000b20 <display_num+0x304>)
 8000908:	f002 f923 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4883      	ldr	r0, [pc, #524]	; (8000b20 <display_num+0x304>)
 8000912:	f002 f91e 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 8000916:	e0fd      	b.n	8000b14 <display_num+0x2f8>
	case 1:
		DISPLAY8_ON
 8000918:	2200      	movs	r2, #0
 800091a:	2108      	movs	r1, #8
 800091c:	4880      	ldr	r0, [pc, #512]	; (8000b20 <display_num+0x304>)
 800091e:	f002 f918 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	487f      	ldr	r0, [pc, #508]	; (8000b24 <display_num+0x308>)
 8000928:	f002 f913 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 800092c:	e0f2      	b.n	8000b14 <display_num+0x2f8>
	case 2:
		DISPLAY7_ON
 800092e:	2200      	movs	r2, #0
 8000930:	2110      	movs	r1, #16
 8000932:	487b      	ldr	r0, [pc, #492]	; (8000b20 <display_num+0x304>)
 8000934:	f002 f90d 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	4878      	ldr	r0, [pc, #480]	; (8000b20 <display_num+0x304>)
 800093e:	f002 f908 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	4875      	ldr	r0, [pc, #468]	; (8000b20 <display_num+0x304>)
 800094a:	f002 f902 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY1_ON
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f002 f8fb 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	486f      	ldr	r0, [pc, #444]	; (8000b20 <display_num+0x304>)
 8000964:	f002 f8f5 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 8000968:	e0d4      	b.n	8000b14 <display_num+0x2f8>
	case 3:
		DISPLAY7_ON
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	486c      	ldr	r0, [pc, #432]	; (8000b20 <display_num+0x304>)
 8000970:	f002 f8ef 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8000974:	2200      	movs	r2, #0
 8000976:	2108      	movs	r1, #8
 8000978:	4869      	ldr	r0, [pc, #420]	; (8000b20 <display_num+0x304>)
 800097a:	f002 f8ea 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	4868      	ldr	r0, [pc, #416]	; (8000b24 <display_num+0x308>)
 8000984:	f002 f8e5 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	4864      	ldr	r0, [pc, #400]	; (8000b20 <display_num+0x304>)
 8000990:	f002 f8df 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4861      	ldr	r0, [pc, #388]	; (8000b20 <display_num+0x304>)
 800099c:	f002 f8d9 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 80009a0:	e0b8      	b.n	8000b14 <display_num+0x2f8>
	case 4:
		DISPLAY5_ON
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f002 f8d1 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b6:	485a      	ldr	r0, [pc, #360]	; (8000b20 <display_num+0x304>)
 80009b8:	f002 f8cb 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	4857      	ldr	r0, [pc, #348]	; (8000b20 <display_num+0x304>)
 80009c2:	f002 f8c6 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	4856      	ldr	r0, [pc, #344]	; (8000b24 <display_num+0x308>)
 80009cc:	f002 f8c1 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 80009d0:	e0a0      	b.n	8000b14 <display_num+0x2f8>
	case 5:
		DISPLAY7_ON
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	4852      	ldr	r0, [pc, #328]	; (8000b20 <display_num+0x304>)
 80009d8:	f002 f8bb 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f002 f8b4 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f0:	484b      	ldr	r0, [pc, #300]	; (8000b20 <display_num+0x304>)
 80009f2:	f002 f8ae 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	484a      	ldr	r0, [pc, #296]	; (8000b24 <display_num+0x308>)
 80009fc:	f002 f8a9 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	4846      	ldr	r0, [pc, #280]	; (8000b20 <display_num+0x304>)
 8000a08:	f002 f8a3 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 8000a0c:	e082      	b.n	8000b14 <display_num+0x2f8>
	case 6:
		DISPLAY7_ON
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2110      	movs	r1, #16
 8000a12:	4843      	ldr	r0, [pc, #268]	; (8000b20 <display_num+0x304>)
 8000a14:	f002 f89d 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f002 f896 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2c:	483c      	ldr	r0, [pc, #240]	; (8000b20 <display_num+0x304>)
 8000a2e:	f002 f890 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY1_ON
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f002 f889 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <display_num+0x304>)
 8000a48:	f002 f883 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4834      	ldr	r0, [pc, #208]	; (8000b24 <display_num+0x308>)
 8000a52:	f002 f87e 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 8000a56:	e05d      	b.n	8000b14 <display_num+0x2f8>
	case 7:
		DISPLAY7_ON
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4830      	ldr	r0, [pc, #192]	; (8000b20 <display_num+0x304>)
 8000a5e:	f002 f878 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	482e      	ldr	r0, [pc, #184]	; (8000b20 <display_num+0x304>)
 8000a68:	f002 f873 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2102      	movs	r1, #2
 8000a70:	482c      	ldr	r0, [pc, #176]	; (8000b24 <display_num+0x308>)
 8000a72:	f002 f86e 	bl	8002b52 <HAL_GPIO_WritePin>
		break;
 8000a76:	e04d      	b.n	8000b14 <display_num+0x2f8>
	case 8:
		DISPLAY1_ON
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f002 f866 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8c:	4824      	ldr	r0, [pc, #144]	; (8000b20 <display_num+0x304>)
 8000a8e:	f002 f860 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY3_ON
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4823      	ldr	r0, [pc, #140]	; (8000b24 <display_num+0x308>)
 8000a98:	f002 f85b 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f002 f854 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab0:	481b      	ldr	r0, [pc, #108]	; (8000b20 <display_num+0x304>)
 8000ab2:	f002 f84e 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4819      	ldr	r0, [pc, #100]	; (8000b20 <display_num+0x304>)
 8000abc:	f002 f849 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4816      	ldr	r0, [pc, #88]	; (8000b20 <display_num+0x304>)
 8000ac6:	f002 f844 	bl	8002b52 <HAL_GPIO_WritePin>

		break;
 8000aca:	e023      	b.n	8000b14 <display_num+0x2f8>
	case 9:

		DISPLAY3_ON
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4814      	ldr	r0, [pc, #80]	; (8000b24 <display_num+0x308>)
 8000ad2:	f002 f83e 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY5_ON
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f002 f837 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY6_ON
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <display_num+0x304>)
 8000aec:	f002 f831 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY7_ON
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <display_num+0x304>)
 8000af6:	f002 f82c 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY8_ON
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <display_num+0x304>)
 8000b00:	f002 f827 	bl	8002b52 <HAL_GPIO_WritePin>
		DISPLAY2_ON
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <display_num+0x304>)
 8000b0c:	f002 f821 	bl	8002b52 <HAL_GPIO_WritePin>

		break;
 8000b10:	e000      	b.n	8000b14 <display_num+0x2f8>

	default:
		break;
 8000b12:	bf00      	nop
	}
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	20000038 	.word	0x20000038

08000b2c <teste_led>:
	HAL_Delay(300);
	display_num(99);

}

void teste_led(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	LED1_OFF
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f002 f80a 	bl	8002b52 <HAL_GPIO_WritePin>
	LED2_OFF
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b44:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <teste_led+0x74>)
 8000b46:	f002 f804 	bl	8002b52 <HAL_GPIO_WritePin>
	LED1_ON
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f001 fffd 	bl	8002b52 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f000 fa5e 	bl	800101c <HAL_Delay>
	LED1_OFF
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f001 fff2 	bl	8002b52 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f000 fa54 	bl	800101c <HAL_Delay>
	LED2_ON
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <teste_led+0x74>)
 8000b7c:	f001 ffe9 	bl	8002b52 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f000 fa4a 	bl	800101c <HAL_Delay>
	LED2_OFF
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <teste_led+0x74>)
 8000b90:	f001 ffdf 	bl	8002b52 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f000 fa41 	bl	800101c <HAL_Delay>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>

08000bae <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	222c      	movs	r2, #44	; 0x2c
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b fcc9 	bl	800c5a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <MX_RTC_Init+0xa0>)
 8000c16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c1a:	221f      	movs	r2, #31
 8000c1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c48:	f003 fb60 	bl	800430c <HAL_RTC_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000c52:	f7ff ffa7 	bl	8000ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c58:	f003 fe4e 	bl	80048f8 <HAL_RTCEx_SetSSRU_IT>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000c62:	f7ff ff9f 	bl	8000ba4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c76:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_RTC_Init+0x9c>)
 8000c86:	f003 fbbb 	bl	8004400 <HAL_RTC_SetAlarm_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000c90:	f7ff ff88 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000003c 	.word	0x2000003c
 8000ca0:	40002800 	.word	0x40002800

08000ca4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2238      	movs	r2, #56	; 0x38
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00b fc75 	bl	800c5a4 <memset>
  if(rtcHandle->Instance==RTC)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <HAL_RTC_MspInit+0x74>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d125      	bne.n	8000d10 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 f9ff 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ce0:	f7ff ff60 	bl	8000ba4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ce4:	f7ff ff63 	bl	8000bae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ce8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cec:	f7ff ff6f 	bl	8000bce <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f001 f8c6 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f001 f8dd 	bl	8001eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	202a      	movs	r0, #42	; 0x2a
 8000d06:	f001 f8be 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d0a:	202a      	movs	r0, #42	; 0x2a
 8000d0c:	f001 f8d5 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d10:	bf00      	nop
 8000d12:	3740      	adds	r7, #64	; 0x40
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40002800 	.word	0x40002800

08000d1c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	58000400 	.word	0x58000400

08000d34 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000d50:	f000 ff92 	bl	8001c78 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000d54:	f7ff ffe2 	bl	8000d1c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f001 ffc5 	bl	8002ce8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000d66:	f000 ff95 	bl	8001c94 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000d6a:	f000 fe15 	bl	8001998 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000d76:	f000 ff7f 	bl	8001c78 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f001 ff2f 	bl	8002be0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000d8a:	f000 ff83 	bl	8001c94 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <NMI_Handler+0x4>

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <HardFault_Handler+0x4>

08000daa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <BusFault_Handler+0x4>

08000db6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000df2:	f003 fdbd 	bl	8004970 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000003c 	.word	0x2000003c

08000e00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Channel1_IRQHandler+0x10>)
 8000e06:	f001 faef 	bl	80023e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000118 	.word	0x20000118

08000e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <USART1_IRQHandler+0x10>)
 8000e1a:	f004 fc09 	bl	8005630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000088 	.word	0x20000088

08000e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000e2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e30:	f001 fea6 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <RTC_Alarm_IRQHandler+0x10>)
 8000e3e:	f003 fc47 	bl	80046d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000003c 	.word	0x2000003c

08000e4c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000e52:	f004 f8f5 	bl	8005040 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000074 	.word	0x20000074

08000e60 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_SUBGHZ_Init+0x20>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_SUBGHZ_Init+0x20>)
 8000e9c:	f003 fe54 	bl	8004b48 <HAL_SUBGHZ_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000ea6:	f7ff fe7d 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000074 	.word	0x20000074

08000eb4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff ffcf 	bl	8000e60 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2032      	movs	r0, #50	; 0x32
 8000ec8:	f000 ffdd 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f000 fff4 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff ffe8 	bl	8000eda <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000f0a:	f00a fdf5 	bl	800baf8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <SystemApp_Init+0x40>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000f14:	f000 f8ba 	bl	800108c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000f18:	f00b f87e 	bl	800c018 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <SystemApp_Init+0x44>)
 8000f1e:	f00b f917 	bl	800c150 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f00b f922 	bl	800c16c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000f28:	f00a f89a 	bl	800b060 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f00a f8d6 	bl	800b0e0 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000f34:	2101      	movs	r1, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f00a f8a2 	bl	800b080 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000080 	.word	0x20000080
 8000f44:	08000f55 	.word	0x08000f55

08000f48 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000f4c:	f00a f8f8 	bl	800b140 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00a f996 	bl	800b294 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f6e:	9200      	str	r2, [sp, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <TimestampNow+0x3c>)
 8000f72:	2110      	movs	r1, #16
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f81d 	bl	8000fb4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f8fc 	bl	8000178 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800c5f4 	.word	0x0800c5f4

08000f94 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f00a f870 	bl	800b080 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2004      	movs	r0, #4
 8000fac:	f00a f868 	bl	800b080 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000fb4:	b40c      	push	{r2, r3}
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f00a faad 	bl	800b52c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fdc:	b002      	add	sp, #8
 8000fde:	4770      	bx	lr

08000fe0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_GetTick+0x24>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001006:	f000 f963 	bl	80012d0 <TIMER_IF_GetTimerValue>
 800100a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000080 	.word	0x20000080

0800101c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f9d9 	bl	80013de <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <LL_AHB2_GRP1_EnableClock>:
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <LL_EXTI_EnableIT_32_63+0x24>)
 800106e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001072:	4905      	ldr	r1, [pc, #20]	; (8001088 <LL_EXTI_EnableIT_32_63+0x24>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4313      	orrs	r3, r2
 8001078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	58000800 	.word	0x58000800

0800108c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001092:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001096:	f7ff ffe5 	bl	8001064 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 800109a:	f000 fe09 	bl	8001cb0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800109e:	f000 fe0d 	bl	8001cbc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80010a2:	f000 fe11 	bl	8001cc8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff ffb7 	bl	8001034 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff ffb4 	bl	8001034 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80010cc:	2002      	movs	r0, #2
 80010ce:	f7ff ffb1 	bl	8001034 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80010d2:	2002      	movs	r0, #2
 80010d4:	f7ff ffae 	bl	8001034 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 faf0 	bl	80026c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80010e8:	2308      	movs	r3, #8
 80010ea:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4815      	ldr	r0, [pc, #84]	; (8001148 <DBG_Init+0xbc>)
 80010f2:	f001 fae9 	bl	80026c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80010f6:	2310      	movs	r3, #16
 80010f8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <DBG_Init+0xbc>)
 8001100:	f001 fae2 	bl	80026c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <DBG_Init+0xbc>)
 8001110:	f001 fada 	bl	80026c8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 fd19 	bl	8002b52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <DBG_Init+0xbc>)
 8001126:	f001 fd14 	bl	8002b52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <DBG_Init+0xbc>)
 8001130:	f001 fd0f 	bl	8002b52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <DBG_Init+0xbc>)
 800113c:	f001 fd09 	bl	8002b52 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	48000400 	.word	0x48000400

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <TIMER_IF_Init+0x5c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01b      	beq.n	80011c0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <TIMER_IF_Init+0x60>)
 800118a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001190:	f7ff fd36 	bl	8000c00 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001194:	f000 f856 	bl	8001244 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <TIMER_IF_Init+0x60>)
 800119e:	f003 fa3b 	bl	8004618 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <TIMER_IF_Init+0x60>)
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <TIMER_IF_Init+0x60>)
 80011ac:	f003 fb72 	bl	8004894 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f9d3 	bl	800155c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80011b6:	f000 f85f 	bl	8001278 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <TIMER_IF_Init+0x5c>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000081 	.word	0x20000081
 80011d0:	2000003c 	.word	0x2000003c

080011d4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	222c      	movs	r2, #44	; 0x2c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00b f9da 	bl	800c5a4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80011f0:	f000 f828 	bl	8001244 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <TIMER_IF_StartTimer+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	43db      	mvns	r3, r3
 8001206:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800120c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001210:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <TIMER_IF_StartTimer+0x6c>)
 8001222:	f003 f8ed 	bl	8004400 <HAL_RTC_SetAlarm_IT>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800122c:	f7ff fcba 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001234:	4618      	mov	r0, r3
 8001236:	3738      	adds	r7, #56	; 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000084 	.word	0x20000084
 8001240:	2000003c 	.word	0x2000003c

08001244 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <TIMER_IF_StopTimer+0x2c>)
 8001250:	2201      	movs	r2, #1
 8001252:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <TIMER_IF_StopTimer+0x30>)
 800125a:	f003 f9dd 	bl	8004618 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <TIMER_IF_StopTimer+0x30>)
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001266:	79fb      	ldrb	r3, [r7, #7]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40002800 	.word	0x40002800
 8001274:	2000003c 	.word	0x2000003c

08001278 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800127c:	f000 f98e 	bl	800159c <GetTimerTicks>
 8001280:	4603      	mov	r3, r0
 8001282:	4a03      	ldr	r2, [pc, #12]	; (8001290 <TIMER_IF_SetTimerContext+0x18>)
 8001284:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001286:	4b02      	ldr	r3, [pc, #8]	; (8001290 <TIMER_IF_SetTimerContext+0x18>)
 8001288:	681b      	ldr	r3, [r3, #0]
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000084 	.word	0x20000084

08001294 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <TIMER_IF_GetTimerContext+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000084 	.word	0x20000084

080012a8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80012b2:	f000 f973 	bl	800159c <GetTimerTicks>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000084 	.word	0x20000084

080012d0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <TIMER_IF_GetTimerValue+0x24>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80012e2:	f000 f95b 	bl	800159c <GetTimerTicks>
 80012e6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000081 	.word	0x20000081

080012f8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001302:	2303      	movs	r3, #3
 8001304:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001306:	687b      	ldr	r3, [r7, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001312:	b5b0      	push	{r4, r5, r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800131a:	2100      	movs	r1, #0
 800131c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	2000      	movs	r0, #0
 8001322:	460a      	mov	r2, r1
 8001324:	4603      	mov	r3, r0
 8001326:	0d95      	lsrs	r5, r2, #22
 8001328:	0294      	lsls	r4, r2, #10
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7fe ff27 	bl	8000188 <__aeabi_uldivmod>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4613      	mov	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}

0800134c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800134c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001356:	2100      	movs	r1, #0
 8001358:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2000      	movs	r0, #0
 800135e:	460c      	mov	r4, r1
 8001360:	4605      	mov	r5, r0
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f04f 0a00 	mov.w	sl, #0
 800136a:	f04f 0b00 	mov.w	fp, #0
 800136e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001372:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001376:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800137a:	4650      	mov	r0, sl
 800137c:	4659      	mov	r1, fp
 800137e:	1b02      	subs	r2, r0, r4
 8001380:	eb61 0305 	sbc.w	r3, r1, r5
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	0099      	lsls	r1, r3, #2
 800138e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001392:	0090      	lsls	r0, r2, #2
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	eb12 0804 	adds.w	r8, r2, r4
 800139c:	eb43 0905 	adc.w	r9, r3, r5
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b4:	4690      	mov	r8, r2
 80013b6:	4699      	mov	r9, r3
 80013b8:	4640      	mov	r0, r8
 80013ba:	4649      	mov	r1, r9
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	0a82      	lsrs	r2, r0, #10
 80013c6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80013ca:	0a8b      	lsrs	r3, r1, #10
 80013cc:	4613      	mov	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013dc:	4770      	bx	lr

080013de <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff93 	bl	8001312 <TIMER_IF_Convert_ms2Tick>
 80013ec:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80013ee:	f000 f8d5 	bl	800159c <GetTimerTicks>
 80013f2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80013f4:	e000      	b.n	80013f8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80013f6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80013f8:	f000 f8d0 	bl	800159c <GetTimerTicks>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f6      	bhi.n	80013f6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800141a:	f00a fcbb 	bl	800bd94 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800142e:	f000 f8a5 	bl	800157c <TIMER_IF_BkUp_Read_MSBticks>
 8001432:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f88f 	bl	800155c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001446:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001454:	f000 f8a2 	bl	800159c <GetTimerTicks>
 8001458:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800145a:	f000 f88f 	bl	800157c <TIMER_IF_BkUp_Read_MSBticks>
 800145e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	2200      	movs	r2, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	000b      	movs	r3, r1
 8001474:	2200      	movs	r2, #0
 8001476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001478:	2000      	movs	r0, #0
 800147a:	460c      	mov	r4, r1
 800147c:	4605      	mov	r5, r0
 800147e:	eb12 0804 	adds.w	r8, r2, r4
 8001482:	eb43 0905 	adc.w	r9, r3, r5
 8001486:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800148a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	0a82      	lsrs	r2, r0, #10
 8001498:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800149c:	0a8b      	lsrs	r3, r1, #10
 800149e:	4613      	mov	r3, r2
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2200      	movs	r2, #0
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80014b0:	f04f 0b00 	mov.w	fp, #0
 80014b4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff46 	bl	800134c <TIMER_IF_Convert_Tick2ms>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3730      	adds	r7, #48	; 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014d4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	2100      	movs	r1, #0
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80014e2:	f003 fa69 	bl	80049b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000003c 	.word	0x2000003c

080014f4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	2101      	movs	r1, #1
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001502:	f003 fa59 	bl	80049b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000003c 	.word	0x2000003c

08001514 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800151e:	2100      	movs	r1, #0
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001522:	f003 fa61 	bl	80049e8 <HAL_RTCEx_BKUPRead>
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000003c 	.word	0x2000003c

08001538 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001542:	2101      	movs	r1, #1
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001546:	f003 fa4f 	bl	80049e8 <HAL_RTCEx_BKUPRead>
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000003c 	.word	0x2000003c

0800155c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	2102      	movs	r1, #2
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800156a:	f003 fa25 	bl	80049b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000003c 	.word	0x2000003c

0800157c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001582:	2102      	movs	r1, #2
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001586:	f003 fa2f 	bl	80049e8 <HAL_RTCEx_BKUPRead>
 800158a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800158c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000003c 	.word	0x2000003c

0800159c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <GetTimerTicks+0x34>)
 80015a4:	f7ff fdd8 	bl	8001158 <LL_RTC_TIME_GetSubSecond>
 80015a8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80015aa:	e003      	b.n	80015b4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <GetTimerTicks+0x34>)
 80015ae:	f7ff fdd3 	bl	8001158 <LL_RTC_TIME_GetSubSecond>
 80015b2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <GetTimerTicks+0x34>)
 80015b6:	f7ff fdcf 	bl	8001158 <LL_RTC_TIME_GetSubSecond>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d1f4      	bne.n	80015ac <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40002800 	.word	0x40002800

080015d4 <LL_AHB2_GRP1_EnableClock>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_APB2_GRP1_EnableClock>:
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001628:	68fb      	ldr	r3, [r7, #12]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <LL_APB2_GRP1_DisableClock>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	43db      	mvns	r3, r3
 8001646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800164a:	4013      	ands	r3, r2
 800164c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART1_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016a2:	f003 fe8c 	bl	80053be <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f7ff fa7a 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016b4:	f005 ff03 	bl	80074be <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f7ff fa71 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016c6:	f005 ff38 	bl	800753a <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f7ff fa68 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016d6:	f005 feb7 	bl	8007448 <HAL_UARTEx_EnableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f7ff fa60 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000088 	.word	0x20000088
 80016ec:	40013800 	.word	0x40013800

080016f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2238      	movs	r2, #56	; 0x38
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f00a ff47 	bl	800c5a4 <memset>
  if(uartHandle->Instance==USART1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <HAL_UART_MspInit+0xe8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d156      	bne.n	80017ce <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001720:	2301      	movs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001724:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001728:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fcd2 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800173a:	f7ff fa33 	bl	8000ba4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001742:	f7ff ff5f 	bl	8001604 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2002      	movs	r0, #2
 8001748:	f7ff ff44 	bl	80015d4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800174c:	23c0      	movs	r3, #192	; 0xc0
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175c:	2307      	movs	r3, #7
 800175e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001764:	4619      	mov	r1, r3
 8001766:	481d      	ldr	r0, [pc, #116]	; (80017dc <HAL_UART_MspInit+0xec>)
 8001768:	f000 ffae 	bl	80026c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0xf4>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 8001774:	2212      	movs	r2, #18
 8001776:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 800177a:	2210      	movs	r2, #16
 800177c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017a2:	480f      	ldr	r0, [pc, #60]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 80017a4:	f000 fba6 	bl	8001ef4 <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80017ae:	f7ff f9f9 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 80017b6:	679a      	str	r2, [r3, #120]	; 0x78
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_UART_MspInit+0xf0>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2102      	movs	r1, #2
 80017c2:	2024      	movs	r0, #36	; 0x24
 80017c4:	f000 fb5f 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c8:	2024      	movs	r0, #36	; 0x24
 80017ca:	f000 fb76 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017ce:	bf00      	nop
 80017d0:	3758      	adds	r7, #88	; 0x58
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013800 	.word	0x40013800
 80017dc:	48000400 	.word	0x48000400
 80017e0:	20000118 	.word	0x20000118
 80017e4:	40020008 	.word	0x40020008

080017e8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_UART_MspDeInit+0x3c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10f      	bne.n	800181a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80017fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017fe:	f7ff ff19 	bl	8001634 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8001802:	21c0      	movs	r1, #192	; 0xc0
 8001804:	4808      	ldr	r0, [pc, #32]	; (8001828 <HAL_UART_MspDeInit+0x40>)
 8001806:	f001 f8bf 	bl	8002988 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fc18 	bl	8002044 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001814:	2024      	movs	r0, #36	; 0x24
 8001816:	f000 fb5e 	bl	8001ed6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013800 	.word	0x40013800
 8001828:	48000400 	.word	0x48000400

0800182c <LL_APB2_GRP1_ForceReset>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <LL_APB2_GRP1_ReleaseReset>:
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	43db      	mvns	r3, r3
 8001860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001864:	4013      	ands	r3, r2
 8001866:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <LL_EXTI_EnableIT_0_31>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <LL_EXTI_EnableIT_0_31+0x24>)
 800187e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001882:	4905      	ldr	r1, [pc, #20]	; (8001898 <LL_EXTI_EnableIT_0_31+0x24>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	58000800 	.word	0x58000800

0800189c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <vcom_Init+0x28>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80018aa:	f7fe fe07 	bl	80004bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018ae:	f7ff fed3 	bl	8001658 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80018b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018b6:	f7ff ffdd 	bl	8001874 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80018ba:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000017c 	.word	0x2000017c

080018c8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80018cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018d0:	f7ff ffac 	bl	800182c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80018d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018d8:	f7ff ffb9 	bl	800184e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <vcom_DeInit+0x28>)
 80018de:	f7ff ff83 	bl	80017e8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 faf7 	bl	8001ed6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80018e8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000088 	.word	0x20000088

080018f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	461a      	mov	r2, r3
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <vcom_Trace_DMA+0x24>)
 8001908:	f003 fe00 	bl	800550c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800190c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000088 	.word	0x20000088

0800191c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <vcom_ReceiveInit+0x70>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800192a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800192e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001938:	4815      	ldr	r0, [pc, #84]	; (8001990 <vcom_ReceiveInit+0x74>)
 800193a:	f005 fcf8 	bl	800732e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800193e:	bf00      	nop
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <vcom_ReceiveInit+0x74>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194e:	d0f7      	beq.n	8001940 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001950:	bf00      	nop
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <vcom_ReceiveInit+0x74>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001960:	d1f7      	bne.n	8001952 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <vcom_ReceiveInit+0x74>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <vcom_ReceiveInit+0x74>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001970:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <vcom_ReceiveInit+0x74>)
 8001974:	f005 fd36 	bl	80073e4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	4906      	ldr	r1, [pc, #24]	; (8001994 <vcom_ReceiveInit+0x78>)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <vcom_ReceiveInit+0x74>)
 800197e:	f003 fd6f 	bl	8005460 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001982:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000180 	.word	0x20000180
 8001990:	20000088 	.word	0x20000088
 8001994:	20000178 	.word	0x20000178

08001998 <vcom_Resume>:

void vcom_Resume(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <vcom_Resume+0x28>)
 800199e:	f003 fd0e 	bl	80053be <HAL_UART_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <vcom_Resume+0x14>
  {
    Error_Handler();
 80019a8:	f7ff f8fc 	bl	8000ba4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <vcom_Resume+0x2c>)
 80019ae:	f000 faa1 	bl	8001ef4 <HAL_DMA_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <vcom_Resume+0x24>
  {
    Error_Handler();
 80019b8:	f7ff f8f4 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000088 	.word	0x20000088
 80019c4:	20000118 	.word	0x20000118

080019c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_UART_TxCpltCallback+0x24>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d103      	bne.n	80019e2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_UART_TxCpltCallback+0x28>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2000      	movs	r0, #0
 80019e0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013800 	.word	0x40013800
 80019f0:	2000017c 	.word	0x2000017c

080019f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_UART_RxCpltCallback+0x44>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d113      	bne.n	8001a2e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_UART_RxCpltCallback+0x48>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_UART_RxCpltCallback+0x30>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_UART_RxCpltCallback+0x48>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <HAL_UART_RxCpltCallback+0x4c>)
 8001a22:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	4906      	ldr	r1, [pc, #24]	; (8001a40 <HAL_UART_RxCpltCallback+0x4c>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f003 fd19 	bl	8005460 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	20000180 	.word	0x20000180
 8001a40:	20000178 	.word	0x20000178

08001a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a48:	f7ff fb80 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	; (8001a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <LoopForever+0xe>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	; (8001a90 <LoopForever+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a72:	f00a fd65 	bl	800c540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7fe fe2b 	bl	80006d0 <main>

08001a7a <LoopForever>:

LoopForever:
    b LoopForever
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
  ldr   r0, =_estack
 8001a7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a88:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 8001a8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001a90:	2000088c 	.word	0x2000088c

08001a94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>

08001a96 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f000 fe01 	bl	80026c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fdf9 	bl	80026c8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2120      	movs	r1, #32
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f001 f838 	bl	8002b52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f001 f832 	bl	8002b52 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d83f      	bhi.n	8001b88 <BSP_RADIO_ConfigRFSwitch+0x90>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b3b 	.word	0x08001b3b
 8001b18:	08001b55 	.word	0x08001b55
 8001b1c:	08001b6f 	.word	0x08001b6f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2110      	movs	r1, #16
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b28:	f001 f813 	bl	8002b52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2120      	movs	r1, #32
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f001 f80d 	bl	8002b52 <HAL_GPIO_WritePin>
      break;      
 8001b38:	e027      	b.n	8001b8a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 f806 	bl	8002b52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001b46:	2200      	movs	r2, #0
 8001b48:	2120      	movs	r1, #32
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f001 f800 	bl	8002b52 <HAL_GPIO_WritePin>
      break;
 8001b52:	e01a      	b.n	8001b8a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001b54:	2201      	movs	r2, #1
 8001b56:	2110      	movs	r1, #16
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f000 fff9 	bl	8002b52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b60:	2201      	movs	r2, #1
 8001b62:	2120      	movs	r1, #32
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f000 fff3 	bl	8002b52 <HAL_GPIO_WritePin>
      break;
 8001b6c:	e00d      	b.n	8001b8a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2110      	movs	r1, #16
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f000 ffec 	bl	8002b52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f000 ffe6 	bl	8002b52 <HAL_GPIO_WritePin>
      break;
 8001b86:	e000      	b.n	8001b8a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8001b88:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8001b98:	2302      	movs	r3, #2
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001bce:	230f      	movs	r3, #15
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e001      	b.n	8001bd8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001bd4:	2316      	movs	r3, #22
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6053      	str	r3, [r2, #4]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	e0042000 	.word	0xe0042000

08001c00 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	6053      	str	r3, [r2, #4]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	e0042000 	.word	0xe0042000

08001c1c <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6053      	str	r3, [r2, #4]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	e0042000 	.word	0xe0042000

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c42:	2003      	movs	r0, #3
 8001c44:	f000 f914 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c48:	f002 f868 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_Init+0x3c>)
 8001c50:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c52:	200f      	movs	r0, #15
 8001c54:	f7ff f9c4 	bl	8000fe0 <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	e001      	b.n	8001c68 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c64:	f7ff f895 	bl	8000d92 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c68:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_SuspendTick+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_SuspendTick+0x18>)
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_ResumeTick+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_ResumeTick+0x18>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001cb4:	f7ff ff96 	bl	8001be4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001cc0:	f7ff ff9e 	bl	8001c00 <LL_DBGMCU_EnableDBGStopMode>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001ccc:	f7ff ffa6 	bl	8001c1c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4906      	ldr	r1, [pc, #24]	; (8001d6c <__NVIC_EnableIRQ+0x34>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db12      	blt.n	8001da8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	490a      	ldr	r1, [pc, #40]	; (8001db4 <__NVIC_DisableIRQ+0x44>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	3320      	adds	r3, #32
 8001d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9c:	f3bf 8f4f 	dsb	sy
}
 8001da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001da2:	f3bf 8f6f 	isb	sy
}
 8001da6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff2b 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff42 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ffb4 	bl	8001e0c <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff83 	bl	8001db8 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff35 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff43 	bl	8001d70 <__NVIC_DisableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e08e      	b.n	8002024 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_DMA_Init+0x138>)
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d80f      	bhi.n	8001f32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_DMA_Init+0x13c>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a45      	ldr	r2, [pc, #276]	; (8002034 <HAL_DMA_Init+0x140>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	009a      	lsls	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <HAL_DMA_Init+0x144>)
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f30:	e00e      	b.n	8001f50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_DMA_Init+0x148>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_DMA_Init+0x140>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <HAL_DMA_Init+0x14c>)
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fb24 	bl	80025f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb0:	d102      	bne.n	8001fb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_DMA_Init+0x106>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d80c      	bhi.n	8001ffa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fb4d 	bl	8002680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	e008      	b.n	800200c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40020407 	.word	0x40020407
 8002030:	bffdfff8 	.word	0xbffdfff8
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020000 	.word	0x40020000
 800203c:	bffdfbf8 	.word	0xbffdfbf8
 8002040:	40020400 	.word	0x40020400

08002044 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07b      	b.n	800214e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_DMA_DeInit+0x114>)
 800206e:	429a      	cmp	r2, r3
 8002070:	d80f      	bhi.n	8002092 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_DMA_DeInit+0x118>)
 800207a:	4413      	add	r3, r2
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_DMA_DeInit+0x11c>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a35      	ldr	r2, [pc, #212]	; (8002164 <HAL_DMA_DeInit+0x120>)
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
 8002090:	e00e      	b.n	80020b0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_DMA_DeInit+0x124>)
 800209a:	4413      	add	r3, r2
 800209c:	4a30      	ldr	r2, [pc, #192]	; (8002160 <HAL_DMA_DeInit+0x11c>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	009a      	lsls	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2f      	ldr	r2, [pc, #188]	; (800216c <HAL_DMA_DeInit+0x128>)
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f003 021c 	and.w	r2, r3, #28
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fa8f 	bl	80025f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <HAL_DMA_DeInit+0xc8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d80b      	bhi.n	800210c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fac3 	bl	8002680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800210a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40020407 	.word	0x40020407
 800215c:	bffdfff8 	.word	0xbffdfff8
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	40020000 	.word	0x40020000
 8002168:	bffdfbf8 	.word	0xbffdfbf8
 800216c:	40020400 	.word	0x40020400

08002170 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Start_IT+0x20>
 800218c:	2302      	movs	r3, #2
 800218e:	e069      	b.n	8002264 <HAL_DMA_Start_IT+0xf4>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d155      	bne.n	8002250 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f9d3 	bl	8002574 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 020e 	orr.w	r2, r2, #14
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e00f      	b.n	8002208 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 020a 	orr.w	r2, r2, #10
 8002206:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002224:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e008      	b.n	8002262 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e04f      	b.n	800231e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d008      	beq.n	800229c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e040      	b.n	800231e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f003 021c 	and.w	r2, r3, #28
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800230a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d005      	beq.n	800234c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2204      	movs	r2, #4
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e047      	b.n	80023dc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020e 	bic.w	r2, r2, #14
 800235a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f003 021c 	and.w	r2, r3, #28
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002398:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
    }
  }
  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f003 031c 	and.w	r3, r3, #28
 8002408:	2204      	movs	r2, #4
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d027      	beq.n	8002464 <HAL_DMA_IRQHandler+0x7c>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d022      	beq.n	8002464 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f003 021c 	and.w	r2, r3, #28
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2104      	movs	r1, #4
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8081 	beq.w	800255c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002462:	e07b      	b.n	800255c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 031c 	and.w	r3, r3, #28
 800246c:	2202      	movs	r2, #2
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d03d      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x10c>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d038      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020a 	bic.w	r2, r2, #10
 800249e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_DMA_IRQHandler+0x180>)
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d909      	bls.n	80024c8 <HAL_DMA_IRQHandler+0xe0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 031c 	and.w	r3, r3, #28
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_DMA_IRQHandler+0x184>)
 80024be:	2102      	movs	r1, #2
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	6053      	str	r3, [r2, #4]
 80024c6:	e008      	b.n	80024da <HAL_DMA_IRQHandler+0xf2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f003 031c 	and.w	r3, r3, #28
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_DMA_IRQHandler+0x188>)
 80024d2:	2102      	movs	r1, #2
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d038      	beq.n	800255c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80024f2:	e033      	b.n	800255c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f003 031c 	and.w	r3, r3, #28
 80024fc:	2208      	movs	r2, #8
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02a      	beq.n	800255e <HAL_DMA_IRQHandler+0x176>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d025      	beq.n	800255e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 020e 	bic.w	r2, r2, #14
 8002520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 021c 	and.w	r2, r3, #28
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800255c:	bf00      	nop
 800255e:	bf00      	nop
}
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020080 	.word	0x40020080
 800256c:	40020400 	.word	0x40020400
 8002570:	40020000 	.word	0x40020000

08002574 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800258a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800259c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 021c 	and.w	r2, r3, #28
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d108      	bne.n	80025d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025d2:	e007      	b.n	80025e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
	...

080025f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002600:	429a      	cmp	r2, r3
 8002602:	d813      	bhi.n	800262c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002610:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3b08      	subs	r3, #8
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e011      	b.n	8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002636:	4413      	add	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b08      	subs	r3, #8
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	3307      	adds	r3, #7
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002654:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40020407 	.word	0x40020407
 8002674:	cccccccd 	.word	0xcccccccd
 8002678:	4002081c 	.word	0x4002081c
 800267c:	40020880 	.word	0x40020880

08002680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002690:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	1000823f 	.word	0x1000823f
 80026c4:	40020940 	.word	0x40020940

080026c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d6:	e140      	b.n	800295a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8132 	beq.w	8002954 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d005      	beq.n	8002708 <HAL_GPIO_Init+0x40>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d130      	bne.n	800276a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800273e:	2201      	movs	r2, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0201 	and.w	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b03      	cmp	r3, #3
 8002774:	d017      	beq.n	80027a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d123      	bne.n	80027fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	6939      	ldr	r1, [r7, #16]
 80027f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0203 	and.w	r2, r3, #3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 808c 	beq.w	8002954 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800283c:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	2207      	movs	r2, #7
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002866:	d00d      	beq.n	8002884 <HAL_GPIO_Init+0x1bc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a44      	ldr	r2, [pc, #272]	; (800297c <HAL_GPIO_Init+0x2b4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <HAL_GPIO_Init+0x1b8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_GPIO_Init+0x1b4>
 8002878:	2302      	movs	r3, #2
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x1be>
 800287c:	2307      	movs	r3, #7
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x1be>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x1be>
 8002884:	2300      	movs	r3, #0
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002896:	4938      	ldr	r1, [pc, #224]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a4:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800291e:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	f47f aeb7 	bne.w	80026d8 <HAL_GPIO_Init+0x10>
  }
}
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	48000400 	.word	0x48000400
 8002980:	48000800 	.word	0x48000800
 8002984:	58000800 	.word	0x58000800

08002988 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002996:	e0af      	b.n	8002af8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002998:	2201      	movs	r2, #1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029ae:	4a59      	ldr	r2, [pc, #356]	; (8002b14 <HAL_GPIO_DeInit+0x18c>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	2207      	movs	r2, #7
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d6:	d00d      	beq.n	80029f4 <HAL_GPIO_DeInit+0x6c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_GPIO_DeInit+0x190>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_DeInit+0x68>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_GPIO_DeInit+0x194>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_GPIO_DeInit+0x64>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_DeInit+0x6e>
 80029ec:	2307      	movs	r3, #7
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_DeInit+0x6e>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_DeInit+0x6e>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d136      	bne.n	8002a74 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	4943      	ldr	r1, [pc, #268]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	493f      	ldr	r1, [pc, #252]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	493b      	ldr	r1, [pc, #236]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_GPIO_DeInit+0x198>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	2207      	movs	r2, #7
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_GPIO_DeInit+0x18c>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43da      	mvns	r2, r3
 8002a66:	482b      	ldr	r0, [pc, #172]	; (8002b14 <HAL_GPIO_DeInit+0x18c>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	3302      	adds	r3, #2
 8002a70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	08d2      	lsrs	r2, r2, #3
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2103      	movs	r1, #3
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	2101      	movs	r1, #1
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	401a      	ands	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f af49 	bne.w	8002998 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	58000800 	.word	0x58000800

08002b24 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b62:	787b      	ldrb	r3, [r7, #1]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b6e:	e002      	b.n	8002b76 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f806 	bl	8002bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	58000800 	.word	0x58000800

08002bb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	58000400 	.word	0x58000400

08002be0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d10d      	bne.n	8002c1c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002c00:	f000 f83c 	bl	8002c7c <HAL_PWREx_DisableLowPowerRunMode>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8002c0a:	e015      	b.n	8002c38 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002c18:	f000 f822 	bl	8002c60 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002c2e:	bf30      	wfi
 8002c30:	e002      	b.n	8002c38 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002c32:	bf40      	sev
    __WFE();
 8002c34:	bf20      	wfe
    __WFE();
 8002c36:	bf20      	wfe
  }
}
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	58000400 	.word	0x58000400
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_PWREx_GetVoltageRange+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	58000400 	.word	0x58000400

08002c60 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	58000400 	.word	0x58000400

08002c7c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2232      	movs	r2, #50	; 0x32
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cca:	d101      	bne.n	8002cd0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	58000400 	.word	0x58000400
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	431bde83 	.word	0x431bde83

08002ce8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d14:	bf30      	wfi
 8002d16:	e002      	b.n	8002d1e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002d18:	bf40      	sev
    __WFE();
 8002d1a:	bf20      	wfe
    __WFE();
 8002d1c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6113      	str	r3, [r2, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	58000400 	.word	0x58000400
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <LL_PWR_IsEnabledBkUpAccess>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4c:	d101      	bne.n	8002d52 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	58000400 	.word	0x58000400

08002d60 <LL_RCC_HSE_EnableTcxo>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_RCC_HSE_DisableTcxo>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002daa:	d101      	bne.n	8002db0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_HSE_Enable>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_HSE_Disable>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_HSE_IsReady>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e04:	d101      	bne.n	8002e0a <LL_RCC_HSE_IsReady+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_RCC_HSE_IsReady+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_HSI_Enable>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <LL_RCC_HSI_Disable>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <LL_RCC_HSI_IsReady>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	d101      	bne.n	8002e64 <LL_RCC_HSI_IsReady+0x18>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LL_RCC_HSI_IsReady+0x1a>
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_LSE_IsReady>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d101      	bne.n	8002eae <LL_RCC_LSE_IsReady+0x18>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_RCC_LSE_IsReady+0x1a>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_LSI_Enable>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_LSI_Disable>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_LSI_IsReady>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d101      	bne.n	8002f10 <LL_RCC_LSI_IsReady+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_RCC_LSI_IsReady+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_MSI_Enable>:
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_MSI_Disable>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6013      	str	r3, [r2, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_MSI_IsReady>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d101      	bne.n	8002f68 <LL_RCC_MSI_IsReady+0x16>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_RCC_MSI_IsReady+0x18>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d101      	bne.n	8002f88 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <LL_RCC_MSI_GetRange>:
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <LL_RCC_SetSysClkSource>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <LL_RCC_GetSysClkSource>:
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <LL_RCC_SetAHBPrescaler>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <LL_RCC_SetAHB3Prescaler>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <LL_RCC_SetAPB1Prescaler>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <LL_RCC_SetAPB2Prescaler>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_GetAHBPrescaler>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <LL_RCC_GetAHB3Prescaler>:
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_GetAPB1Prescaler>:
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <LL_RCC_GetAPB2Prescaler>:
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003130:	6013      	str	r3, [r2, #0]
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314c:	6013      	str	r3, [r2, #0]
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003168:	d101      	bne.n	800316e <LL_RCC_PLL_IsReady+0x18>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_RCC_PLL_IsReady+0x1a>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d101      	bne.n	80031ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d101      	bne.n	800320e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800322a:	d101      	bne.n	8003230 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003248:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800324c:	d101      	bne.n	8003252 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e38b      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326e:	f7ff fece 	bl	800300e <LL_RCC_GetSysClkSource>
 8003272:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003274:	f7ff ffa2 	bl	80031bc <LL_RCC_PLL_GetMainSource>
 8003278:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80c9 	beq.w	800341a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x3e>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d17b      	bne.n	800338c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d178      	bne.n	800338c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800329a:	f7ff fe5a 	bl	8002f52 <LL_RCC_MSI_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x54>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e36a      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_RCC_OscConfig+0x72>
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032cc:	e006      	b.n	80032dc <HAL_RCC_OscConfig+0x80>
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d222      	bcs.n	8003326 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd51 	bl	8003d8c <RCC_SetFlashLatencyFromMSIRange>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e348      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fe4e 	bl	8002fc0 <LL_RCC_MSI_SetCalibTrimming>
 8003324:	e021      	b.n	800336a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003330:	f043 0308 	orr.w	r3, r3, #8
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe35 	bl	8002fc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fd16 	bl	8003d8c <RCC_SetFlashLatencyFromMSIRange>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e30d      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800336a:	f000 fcd7 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 800336e:	4603      	mov	r3, r0
 8003370:	4aa1      	ldr	r2, [pc, #644]	; (80035f8 <HAL_RCC_OscConfig+0x39c>)
 8003372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003374:	4ba1      	ldr	r3, [pc, #644]	; (80035fc <HAL_RCC_OscConfig+0x3a0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fe31 	bl	8000fe0 <HAL_InitTick>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d047      	beq.n	8003418 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	e2fc      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02c      	beq.n	80033ee <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003394:	f7ff fdc1 	bl	8002f1a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003398:	f7fd fe2c 	bl	8000ff4 <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a0:	f7fd fe28 	bl	8000ff4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e2e9      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80033b2:	f7ff fdce 	bl	8002f52 <LL_RCC_MSI_IsReady>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f1      	beq.n	80033a0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c6:	f043 0308 	orr.w	r3, r3, #8
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fdea 	bl	8002fc0 <LL_RCC_MSI_SetCalibTrimming>
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ee:	f7ff fda2 	bl	8002f36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f2:	f7fd fdff 	bl	8000ff4 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fa:	f7fd fdfb 	bl	8000ff4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e2bc      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800340c:	f7ff fda1 	bl	8002f52 <LL_RCC_MSI_IsReady>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f1      	bne.n	80033fa <HAL_RCC_OscConfig+0x19e>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003418:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d05f      	beq.n	80034e6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x1dc>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d10d      	bne.n	800344e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d10a      	bne.n	800344e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	f7ff fcdb 	bl	8002df2 <LL_RCC_HSE_IsReady>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d050      	beq.n	80034e4 <HAL_RCC_OscConfig+0x288>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d14c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e29b      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d102      	bne.n	8003474 <HAL_RCC_OscConfig+0x218>
 800346e:	f7ff fca4 	bl	8002dba <LL_RCC_HSE_Enable>
 8003472:	e00d      	b.n	8003490 <HAL_RCC_OscConfig+0x234>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800347c:	d104      	bne.n	8003488 <HAL_RCC_OscConfig+0x22c>
 800347e:	f7ff fc6f 	bl	8002d60 <LL_RCC_HSE_EnableTcxo>
 8003482:	f7ff fc9a 	bl	8002dba <LL_RCC_HSE_Enable>
 8003486:	e003      	b.n	8003490 <HAL_RCC_OscConfig+0x234>
 8003488:	f7ff fca5 	bl	8002dd6 <LL_RCC_HSE_Disable>
 800348c:	f7ff fc76 	bl	8002d7c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fdac 	bl	8000ff4 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fd fda8 	bl	8000ff4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e269      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034b2:	f7ff fc9e 	bl	8002df2 <LL_RCC_HSE_IsReady>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f1      	beq.n	80034a0 <HAL_RCC_OscConfig+0x244>
 80034bc:	e013      	b.n	80034e6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fd99 	bl	8000ff4 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c6:	f7fd fd95 	bl	8000ff4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	; 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e256      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034d8:	f7ff fc8b 	bl	8002df2 <LL_RCC_HSE_IsReady>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f1      	bne.n	80034c6 <HAL_RCC_OscConfig+0x26a>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d04b      	beq.n	800358a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_OscConfig+0x2a8>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d113      	bne.n	8003526 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d110      	bne.n	8003526 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003504:	f7ff fca2 	bl	8002e4c <LL_RCC_HSI_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x2be>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e235      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fca5 	bl	8002e6e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	e031      	b.n	800358a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352e:	f7ff fc71 	bl	8002e14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fd fd5f 	bl	8000ff4 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353a:	f7fd fd5b 	bl	8000ff4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e21c      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800354c:	f7ff fc7e 	bl	8002e4c <LL_RCC_HSI_IsReady>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f1      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fc87 	bl	8002e6e <LL_RCC_HSI_SetCalibTrimming>
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	f7ff fc65 	bl	8002e30 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fd fd45 	bl	8000ff4 <HAL_GetTick>
 800356a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356e:	f7fd fd41 	bl	8000ff4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e202      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003580:	f7ff fc64 	bl	8002e4c <LL_RCC_HSI_IsReady>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f1      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d06f      	beq.n	8003676 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d057      	beq.n	800364e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d036      	beq.n	8003624 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1db      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d018      	beq.n	800360a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80035d8:	f7ff fc7e 	bl	8002ed8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035dc:	f7fd fd0a 	bl	8000ff4 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80035e2:	e00d      	b.n	8003600 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fd06 	bl	8000ff4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d906      	bls.n	8003600 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1c7      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8003600:	f7ff fc7a 	bl	8002ef8 <LL_RCC_LSI_IsReady>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ec      	bne.n	80035e4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003624:	f7ff fc48 	bl	8002eb8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd fce4 	bl	8000ff4 <HAL_GetTick>
 800362c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fce0 	bl	8000ff4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b11      	cmp	r3, #17
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1a1      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003642:	f7ff fc59 	bl	8002ef8 <LL_RCC_LSI_IsReady>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f1      	beq.n	8003630 <HAL_RCC_OscConfig+0x3d4>
 800364c:	e013      	b.n	8003676 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364e:	f7ff fc43 	bl	8002ed8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fd fccf 	bl	8000ff4 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fd fccb 	bl	8000ff4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b11      	cmp	r3, #17
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e18c      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800366c:	f7ff fc44 	bl	8002ef8 <LL_RCC_LSI_IsReady>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f1      	bne.n	800365a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80d8 	beq.w	8003834 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003684:	f7ff fb5a 	bl	8002d3c <LL_PWR_IsEnabledBkUpAccess>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800368e:	f7ff fa99 	bl	8002bc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fd fcaf 	bl	8000ff4 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fd fcab 	bl	8000ff4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e16c      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80036ac:	f7ff fb46 	bl	8002d3c <LL_PWR_IsEnabledBkUpAccess>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f1      	beq.n	800369a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d07b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b85      	cmp	r3, #133	; 0x85
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fc87 	bl	8000ff4 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd fc79 	bl	8000ff4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e138      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003714:	f7ff fbbf 	bl	8002e96 <LL_RCC_LSE_IsReady>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ef      	beq.n	80036fe <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b81      	cmp	r3, #129	; 0x81
 8003724:	d003      	beq.n	800372e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b85      	cmp	r3, #133	; 0x85
 800372c:	d121      	bne.n	8003772 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fc61 	bl	8000ff4 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fd fc53 	bl	8000ff4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e112      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ec      	beq.n	800374a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003770:	e060      	b.n	8003834 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fd fc3f 	bl	8000ff4 <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fc31 	bl	8000ff4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0f0      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ec      	bne.n	800378e <HAL_RCC_OscConfig+0x532>
 80037b4:	e03e      	b.n	8003834 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fd fc1d 	bl	8000ff4 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fc0f 	bl	8000ff4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0ce      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ec      	bne.n	80037d2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd fbfc 	bl	8000ff4 <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fd fbee 	bl	8000ff4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0ad      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800382a:	f7ff fb34 	bl	8002e96 <LL_RCC_LSE_IsReady>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ef      	bne.n	8003814 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a3 	beq.w	8003984 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d076      	beq.n	8003932 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	2b02      	cmp	r3, #2
 800384a:	d14b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	f7ff fc75 	bl	800313a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fbd0 	bl	8000ff4 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fbcc 	bl	8000ff4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b0a      	cmp	r3, #10
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e08d      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800386a:	f7ff fc74 	bl	8003156 <LL_RCC_PLL_IsReady>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f1      	bne.n	8003858 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	4b45      	ldr	r3, [pc, #276]	; (8003990 <HAL_RCC_OscConfig+0x734>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800388c:	0212      	lsls	r2, r2, #8
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038a0:	430a      	orrs	r2, r1
 80038a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038aa:	f7ff fc38 	bl	800311e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd fb99 	bl	8000ff4 <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fd fb95 	bl	8000ff4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e056      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80038d8:	f7ff fc3d 	bl	8003156 <LL_RCC_PLL_IsReady>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f1      	beq.n	80038c6 <HAL_RCC_OscConfig+0x66a>
 80038e2:	e04f      	b.n	8003984 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	f7ff fc29 	bl	800313a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003902:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fb72 	bl	8000ff4 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fb6e 	bl	8000ff4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b0a      	cmp	r3, #10
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02f      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003926:	f7ff fc16 	bl	8003156 <LL_RCC_PLL_IsReady>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f1      	bne.n	8003914 <HAL_RCC_OscConfig+0x6b8>
 8003930:	e028      	b.n	8003984 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e023      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	429a      	cmp	r2, r3
 8003952:	d115      	bne.n	8003980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	429a      	cmp	r2, r3
 8003960:	d10e      	bne.n	8003980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	11c1808c 	.word	0x11c1808c

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e10f      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d91b      	bls.n	80039ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b86      	ldr	r3, [pc, #536]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4984      	ldr	r1, [pc, #528]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fd fb15 	bl	8000ff4 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039ce:	f7fd fb11 	bl	8000ff4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0f3      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e0:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb10 	bl	8003024 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a04:	f7fd faf6 	bl	8000ff4 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a0c:	f7fd faf2 	bl	8000ff4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0d4      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a1e:	f7ff fbd8 	bl	80031d2 <LL_RCC_IsActiveFlag_HPRE>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f1      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d016      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fb06 	bl	800304a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fad9 	bl	8000ff4 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a46:	f7fd fad5 	bl	8000ff4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0b7      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a58:	f7ff fbcc 	bl	80031f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f1      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff faff 	bl	8003076 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a78:	f7fd fabc 	bl	8000ff4 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a80:	f7fd fab8 	bl	8000ff4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e09a      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a92:	f7ff fbc1 	bl	8003218 <LL_RCC_IsActiveFlag_PPRE1>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f1      	beq.n	8003a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff faf4 	bl	800309c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ab4:	f7fd fa9e 	bl	8000ff4 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003abc:	f7fd fa9a 	bl	8000ff4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e07c      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ace:	f7ff fbb4 	bl	800323a <LL_RCC_IsActiveFlag_PPRE2>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f1      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d043      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003aec:	f7ff f981 	bl	8002df2 <LL_RCC_HSE_IsReady>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11e      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e066      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b02:	f7ff fb28 	bl	8003156 <LL_RCC_PLL_IsReady>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e05b      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b18:	f7ff fa1b 	bl	8002f52 <LL_RCC_MSI_IsReady>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e050      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b26:	f7ff f991 	bl	8002e4c <LL_RCC_HSI_IsReady>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e049      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fa55 	bl	8002fe8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3e:	f7fd fa59 	bl	8000ff4 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b46:	f7fd fa55 	bl	8000ff4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e035      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5c:	f7ff fa57 	bl	800300e <LL_RCC_GetSysClkSource>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1ec      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d21b      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	4913      	ldr	r1, [pc, #76]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fa33 	bl	8000ff4 <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b92:	f7fd fa2f 	bl	8000ff4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e011      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x23c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d1ef      	bne.n	8003b92 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bb2:	f000 f8b3 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <HAL_RCC_ClockConfig+0x240>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fa0d 	bl	8000fe0 <HAL_InitTick>
 8003bc6:	4603      	mov	r3, r0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58004000 	.word	0x58004000
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	f7ff fa10 	bl	800300e <LL_RCC_GetSysClkSource>
 8003bee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf0:	f7ff fae4 	bl	80031bc <LL_RCC_PLL_GetMainSource>
 8003bf4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d139      	bne.n	8003c76 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d136      	bne.n	8003c76 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c08:	f7ff f9b3 	bl	8002f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d115      	bne.n	8003c3e <HAL_RCC_GetSysClockFreq+0x62>
 8003c12:	f7ff f9ae 	bl	8002f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x4e>
 8003c1c:	f7ff f9b9 	bl	8002f92 <LL_RCC_MSI_GetRange>
 8003c20:	4603      	mov	r3, r0
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	e005      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x5a>
 8003c2a:	f7ff f9bd 	bl	8002fa8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3c:	e014      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c3e:	f7ff f998 	bl	8002f72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x7a>
 8003c48:	f7ff f9a3 	bl	8002f92 <LL_RCC_MSI_GetRange>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	e005      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x86>
 8003c56:	f7ff f9a7 	bl	8002fa8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a2b      	ldr	r2, [pc, #172]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c74:	e012      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00c      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c88:	f7ff f886 	bl	8002d98 <LL_RCC_HSE_IsEnabledDiv2>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e001      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c9a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9c:	f7ff f9b7 	bl	800300e <LL_RCC_GetSysClkSource>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d12f      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003ca6:	f7ff fa89 	bl	80031bc <LL_RCC_PLL_GetMainSource>
 8003caa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0xde>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003cb8:	e00d      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cbc:	60fb      	str	r3, [r7, #12]
        break;
 8003cbe:	e00d      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cc0:	f7ff f86a 	bl	8002d98 <LL_RCC_HSE_IsEnabledDiv2>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ccc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cce:	e005      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cd2:	60fb      	str	r3, [r7, #12]
        break;
 8003cd4:	e002      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	60fb      	str	r3, [r7, #12]
        break;
 8003cda:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cdc:	f7ff fa4c 	bl	8003178 <LL_RCC_PLL_GetN>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	fb03 f402 	mul.w	r4, r3, r2
 8003ce8:	f7ff fa5d 	bl	80031a6 <LL_RCC_PLL_GetDivider>
 8003cec:	4603      	mov	r3, r0
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cf6:	f7ff fa4b 	bl	8003190 <LL_RCC_PLL_GetR>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	0f5b      	lsrs	r3, r3, #29
 8003cfe:	3301      	adds	r3, #1
 8003d00:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d04:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d06:	697b      	ldr	r3, [r7, #20]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	0800c938 	.word	0x0800c938
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	01e84800 	.word	0x01e84800

08003d1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b598      	push	{r3, r4, r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d20:	f7ff ff5c 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003d24:	4604      	mov	r4, r0
 8003d26:	f7ff f9cc 	bl	80030c2 <LL_RCC_GetAHBPrescaler>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd98      	pop	{r3, r4, r7, pc}
 8003d40:	0800c8d8 	.word	0x0800c8d8

08003d44 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b598      	push	{r3, r4, r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d48:	f7ff ffe8 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	f7ff f9d0 	bl	80030f2 <LL_RCC_GetAPB1Prescaler>
 8003d52:	4603      	mov	r3, r0
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd98      	pop	{r3, r4, r7, pc}
 8003d64:	0800c918 	.word	0x0800c918

08003d68 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b598      	push	{r3, r4, r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d6c:	f7ff ffd6 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d70:	4604      	mov	r4, r0
 8003d72:	f7ff f9c9 	bl	8003108 <LL_RCC_GetAPB2Prescaler>
 8003d76:	4603      	mov	r3, r0
 8003d78:	0adb      	lsrs	r3, r3, #11
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd98      	pop	{r3, r4, r7, pc}
 8003d88:	0800c918 	.word	0x0800c918

08003d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003da4:	f7ff f998 	bl	80030d8 <LL_RCC_GetAHB3Prescaler>
 8003da8:	4603      	mov	r3, r0
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9c      	lsrs	r4, r3, #18
 8003dc8:	f7fe ff3e 	bl	8002c48 <HAL_PWREx_GetVoltageRange>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 f80b 	bl	8003dec <RCC_SetFlashLatency>
 8003dd6:	4603      	mov	r3, r0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	0800c938 	.word	0x0800c938
 8003de4:	0800c8d8 	.word	0x0800c8d8
 8003de8:	431bde83 	.word	0x431bde83

08003dec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	; 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003df6:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <RCC_SetFlashLatency+0xf4>)
 8003df8:	f107 0320 	add.w	r3, r7, #32
 8003dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e00:	6018      	str	r0, [r3, #0]
 8003e02:	3304      	adds	r3, #4
 8003e04:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003e06:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <RCC_SetFlashLatency+0xf8>)
 8003e08:	f107 0318 	add.w	r3, r7, #24
 8003e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e10:	6018      	str	r0, [r3, #0]
 8003e12:	3304      	adds	r3, #4
 8003e14:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e16:	4a34      	ldr	r2, [pc, #208]	; (8003ee8 <RCC_SetFlashLatency+0xfc>)
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2c:	d11b      	bne.n	8003e66 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	e014      	b.n	8003e5e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	3338      	adds	r3, #56	; 0x38
 8003e3a:	443b      	add	r3, r7
 8003e3c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e40:	461a      	mov	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d807      	bhi.n	8003e58 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	443b      	add	r3, r7
 8003e50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e56:	e021      	b.n	8003e9c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d9e7      	bls.n	8003e34 <RCC_SetFlashLatency+0x48>
 8003e64:	e01a      	b.n	8003e9c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e014      	b.n	8003e96 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	443b      	add	r3, r7
 8003e74:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d807      	bhi.n	8003e90 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	3338      	adds	r3, #56	; 0x38
 8003e86:	443b      	add	r3, r7
 8003e88:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e8e:	e005      	b.n	8003e9c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	3301      	adds	r3, #1
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d9e7      	bls.n	8003e6c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <RCC_SetFlashLatency+0x100>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0207 	bic.w	r2, r3, #7
 8003ea4:	4911      	ldr	r1, [pc, #68]	; (8003eec <RCC_SetFlashLatency+0x100>)
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eac:	f7fd f8a2 	bl	8000ff4 <HAL_GetTick>
 8003eb0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eb2:	e008      	b.n	8003ec6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eb4:	f7fd f89e 	bl	8000ff4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e007      	b.n	8003ed6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <RCC_SetFlashLatency+0x100>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1ef      	bne.n	8003eb4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3738      	adds	r7, #56	; 0x38
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	0800c600 	.word	0x0800c600
 8003ee4:	0800c608 	.word	0x0800c608
 8003ee8:	0800c610 	.word	0x0800c610
 8003eec:	58004000 	.word	0x58004000

08003ef0 <LL_RCC_LSE_IsReady>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d101      	bne.n	8003f08 <LL_RCC_LSE_IsReady+0x18>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <LL_RCC_LSE_IsReady+0x1a>
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_SetUSARTClockSource>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	43db      	mvns	r3, r3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_SetI2SClockSource>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_SetLPUARTClockSource>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_SetI2CClockSource>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_SetLPTIMClockSource>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_SetRNGClockSource>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <LL_RCC_SetADCClockSource>:
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <LL_RCC_SetRTCClockSource>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <LL_RCC_GetRTCClockSource>:
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <LL_RCC_ForceBackupDomainReset>:
{
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040e8:	2300      	movs	r3, #0
 80040ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d058      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80040f8:	f7fe fd64 	bl	8002bc4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040fc:	f7fc ff7a 	bl	8000ff4 <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004104:	f7fc ff76 	bl	8000ff4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	74fb      	strb	r3, [r7, #19]
        break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004118:	4b7b      	ldr	r3, [pc, #492]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004124:	d1ee      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13c      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800412c:	f7ff ffa7 	bl	800407e <LL_RCC_GetRTCClockSource>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	429a      	cmp	r2, r3
 8004138:	d00f      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004148:	f7ff ffa5 	bl	8004096 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414c:	f7ff ffb3 	bl	80040b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fc ff46 	bl	8000ff4 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fc ff42 	bl	8000ff4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d902      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	74fb      	strb	r3, [r7, #19]
            break;
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004184:	f7ff feb4 	bl	8003ef0 <LL_RCC_LSE_IsReady>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d1ee      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5b 	bl	8004054 <LL_RCC_SetRTCClockSource>
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
 80041a4:	e001      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fea9 	bl	8003f12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fe9e 	bl	8003f12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fec0 	bl	8003f6c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fee6 	bl	8003fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fedb 	bl	8003fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fed0 	bl	8003fce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fea9 	bl	8003f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe9e 	bl	8003f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fe93 	bl	8003f96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fe5e 	bl	8003f42 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d107      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d010      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fea5 	bl	8004000 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fea3 	bl	800402a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d107      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80042fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	58000400 	.word	0x58000400

0800430c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d068      	beq.n	80043f0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fcb6 	bl	8000ca4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004342:	22ca      	movs	r2, #202	; 0xca
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004348:	2253      	movs	r2, #83	; 0x53
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa0f 	bl	8004770 <RTC_EnterInitMode>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d13f      	bne.n	80043dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RTC_Init+0xf0>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004362:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RTC_Init+0xf0>)
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	4319      	orrs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	430b      	orrs	r3, r1
 8004380:	491e      	ldr	r1, [pc, #120]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	491a      	ldr	r1, [pc, #104]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004396:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RTC_Init+0xf0>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4914      	ldr	r1, [pc, #80]	; (80043fc <HAL_RTC_Init+0xf0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa12 	bl	80047d8 <RTC_ExitInitMode>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10e      	bne.n	80043dc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RTC_Init+0xf0>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a19      	ldr	r1, [r3, #32]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4319      	orrs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	4909      	ldr	r1, [pc, #36]	; (80043fc <HAL_RTC_Init+0xf0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_RTC_Init+0xf0>)
 80043de:	22ff      	movs	r2, #255	; 0xff
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40002800 	.word	0x40002800

08004400 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_RTC_SetAlarm_IT+0x1e>
 800441a:	2302      	movs	r3, #2
 800441c:	e0f3      	b.n	8004606 <HAL_RTC_SetAlarm_IT+0x206>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800442e:	4b78      	ldr	r3, [pc, #480]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443e:	d06a      	beq.n	8004516 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d13a      	bne.n	80044bc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004446:	4b72      	ldr	r3, [pc, #456]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f9f5 	bl	8004854 <RTC_ByteToBcd2>
 800446a:	4603      	mov	r3, r0
 800446c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f9ee 	bl	8004854 <RTC_ByteToBcd2>
 8004478:	4603      	mov	r3, r0
 800447a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800447c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	789b      	ldrb	r3, [r3, #2]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f9e6 	bl	8004854 <RTC_ByteToBcd2>
 8004488:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800448a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	78db      	ldrb	r3, [r3, #3]
 8004492:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004494:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f9d8 	bl	8004854 <RTC_ByteToBcd2>
 80044a4:	4603      	mov	r3, r0
 80044a6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044a8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044b0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e02c      	b.n	8004516 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80044c4:	d00d      	beq.n	80044e2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ce:	d008      	beq.n	80044e2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80044d0:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044ee:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044f4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	78db      	ldrb	r3, [r3, #3]
 80044fa:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044fc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004504:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004506:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800450c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004516:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004518:	22ca      	movs	r2, #202	; 0xca
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
 800451c:	4b3c      	ldr	r3, [pc, #240]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800451e:	2253      	movs	r2, #83	; 0x53
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452a:	d12c      	bne.n	8004586 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4a37      	ldr	r2, [pc, #220]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004532:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004536:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004538:	4b35      	ldr	r3, [pc, #212]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800453a:	2201      	movs	r2, #1
 800453c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004544:	d107      	bne.n	8004556 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4930      	ldr	r1, [pc, #192]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004550:	4313      	orrs	r3, r2
 8004552:	644b      	str	r3, [r1, #68]	; 0x44
 8004554:	e006      	b.n	8004564 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800457e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	e02b      	b.n	80045de <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	4a21      	ldr	r2, [pc, #132]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 800458c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004590:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004592:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 8004594:	2202      	movs	r2, #2
 8004596:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d107      	bne.n	80045b0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4919      	ldr	r1, [pc, #100]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045ae:	e006      	b.n	80045be <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80045b6:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045d8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80045dc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_RTC_SetAlarm_IT+0x214>)
 80045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e4:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <HAL_RTC_SetAlarm_IT+0x214>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_RTC_SetAlarm_IT+0x210>)
 80045f0:	22ff      	movs	r2, #255	; 0xff
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}
 800460e:	bf00      	nop
 8004610:	40002800 	.word	0x40002800
 8004614:	58000800 	.word	0x58000800

08004618 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_RTC_DeactivateAlarm+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e048      	b.n	80046c2 <HAL_RTC_DeactivateAlarm+0xaa>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004640:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004642:	22ca      	movs	r2, #202	; 0xca
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
 8004646:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004648:	2253      	movs	r2, #83	; 0x53
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d115      	bne.n	8004680 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800465a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800465e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004660:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800466a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f023 0201 	bic.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800467a:	2201      	movs	r2, #1
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c
 800467e:	e014      	b.n	80046aa <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4a11      	ldr	r2, [pc, #68]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004686:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800468a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8004692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004696:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f023 0202 	bic.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80046a6:	2202      	movs	r2, #2
 80046a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80046ac:	22ff      	movs	r2, #255	; 0xff
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40002800 	.word	0x40002800

080046d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RTC_AlarmIRQHandler+0x50>)
 80046da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RTC_AlarmIRQHandler+0x50>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fc fe8c 	bl	8001412 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004706:	2202      	movs	r2, #2
 8004708:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f94a 	bl	80049a4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40002800 	.word	0x40002800

08004724 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <HAL_RTC_WaitForSynchro+0x48>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a0e      	ldr	r2, [pc, #56]	; (800476c <HAL_RTC_WaitForSynchro+0x48>)
 8004732:	f023 0320 	bic.w	r3, r3, #32
 8004736:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004738:	f7fc fc5c 	bl	8000ff4 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800473e:	e009      	b.n	8004754 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004740:	f7fc fc58 	bl	8000ff4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474e:	d901      	bls.n	8004754 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RTC_WaitForSynchro+0x48>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40002800 	.word	0x40002800

08004770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800477c:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <RTC_EnterInitMode+0x64>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d120      	bne.n	80047ca <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <RTC_EnterInitMode+0x64>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <RTC_EnterInitMode+0x64>)
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004794:	f7fc fc2e 	bl	8000ff4 <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800479a:	e00d      	b.n	80047b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800479c:	f7fc fc2a 	bl	8000ff4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047aa:	d905      	bls.n	80047b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2203      	movs	r2, #3
 80047b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <RTC_EnterInitMode+0x64>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <RTC_EnterInitMode+0x5a>
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d1e8      	bne.n	800479c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40002800 	.word	0x40002800

080047d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <RTC_ExitInitMode+0x78>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <RTC_ExitInitMode+0x78>)
 80047ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <RTC_ExitInitMode+0x78>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10c      	bne.n	8004816 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff91 	bl	8004724 <HAL_RTC_WaitForSynchro>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01e      	beq.n	8004846 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e017      	b.n	8004846 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <RTC_ExitInitMode+0x78>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <RTC_ExitInitMode+0x78>)
 800481c:	f023 0320 	bic.w	r3, r3, #32
 8004820:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff7e 	bl	8004724 <HAL_RTC_WaitForSynchro>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2203      	movs	r2, #3
 8004832:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <RTC_ExitInitMode+0x78>)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	4a04      	ldr	r2, [pc, #16]	; (8004850 <RTC_ExitInitMode+0x78>)
 8004840:	f043 0320 	orr.w	r3, r3, #32
 8004844:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40002800 	.word	0x40002800

08004854 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004866:	e005      	b.n	8004874 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	3b0a      	subs	r3, #10
 8004872:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004874:	7afb      	ldrb	r3, [r7, #11]
 8004876:	2b09      	cmp	r3, #9
 8004878:	d8f6      	bhi.n	8004868 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	b2da      	uxtb	r2, r3
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	4313      	orrs	r3, r2
 8004886:	b2db      	uxtb	r3, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
	...

08004894 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RTCEx_EnableBypassShadow+0x16>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e01f      	b.n	80048ea <HAL_RTCEx_EnableBypassShadow+0x56>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048bc:	22ca      	movs	r2, #202	; 0xca
 80048be:	625a      	str	r2, [r3, #36]	; 0x24
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048c2:	2253      	movs	r2, #83	; 0x53
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80048d4:	22ff      	movs	r2, #255	; 0xff
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40002800 	.word	0x40002800

080048f8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_RTCEx_SetSSRU_IT+0x16>
 800490a:	2302      	movs	r3, #2
 800490c:	e027      	b.n	800495e <HAL_RTCEx_SetSSRU_IT+0x66>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004920:	22ca      	movs	r2, #202	; 0xca
 8004922:	625a      	str	r2, [r3, #36]	; 0x24
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004926:	2253      	movs	r2, #83	; 0x53
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493c:	4a0b      	ldr	r2, [pc, #44]	; (800496c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800493e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004942:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40002800 	.word	0x40002800
 800496c:	58000800 	.word	0x58000800

08004970 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc fd4b 	bl	8001426 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40002800 	.word	0x40002800

080049a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80049c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4413      	add	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	4000b100 	.word	0x4000b100

080049e8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RTCEx_BKUPRead+0x28>)
 80049f4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	4000b100 	.word	0x4000b100

08004a14 <LL_PWR_SetRadioBusyTrigger>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	58000400 	.word	0x58000400

08004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a50:	bf00      	nop
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	58000400 	.word	0x58000400

08004a5c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	58000400 	.word	0x58000400

08004a7c <LL_PWR_ClearFlag_RFBUSY>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a86:	619a      	str	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	58000400 	.word	0x58000400

08004a94 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d101      	bne.n	8004aa8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	58000400 	.word	0x58000400

08004ab8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d101      	bne.n	8004acc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	58000400 	.word	0x58000400

08004adc <LL_RCC_RF_DisableReset>:
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <LL_RCC_IsRFUnderReset>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b10:	d101      	bne.n	8004b16 <LL_RCC_IsRFUnderReset+0x1a>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <LL_RCC_IsRFUnderReset+0x1c>
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <LL_EXTI_EnableIT_32_63>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <LL_EXTI_EnableIT_32_63+0x24>)
 8004b2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b2e:	4905      	ldr	r1, [pc, #20]	; (8004b44 <LL_EXTI_EnableIT_32_63+0x24>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	58000800 	.word	0x58000800

08004b48 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
    return status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	e04b      	b.n	8004bf6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	799b      	ldrb	r3, [r3, #6]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc f99e 	bl	8000eb4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004b7e:	f7ff ffad 	bl	8004adc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004b82:	4b1f      	ldr	r3, [pc, #124]	; (8004c00 <HAL_SUBGHZ_Init+0xb8>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	0cdb      	lsrs	r3, r3, #19
 8004b90:	2264      	movs	r2, #100	; 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	609a      	str	r2, [r3, #8]
      break;
 8004ba8:	e007      	b.n	8004bba <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004bb0:	f7ff ffa4 	bl	8004afc <LL_RCC_IsRFUnderReset>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ee      	bne.n	8004b98 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bba:	f7ff ff3f 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004bbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bc2:	f7ff ffad 	bl	8004b20 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004bc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bca:	f7ff ff23 	bl	8004a14 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004bce:	f7ff ff55 	bl	8004a7c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 faad 	bl	800513c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	719a      	strb	r2, [r3, #6]

  return status;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000000 	.word	0x20000000

08004c04 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	460b      	mov	r3, r1
 8004c12:	817b      	strh	r3, [r7, #10]
 8004c14:	4613      	mov	r3, r2
 8004c16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	799b      	ldrb	r3, [r3, #6]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d14a      	bne.n	8004cb8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	795b      	ldrb	r3, [r3, #5]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e045      	b.n	8004cba <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2202      	movs	r2, #2
 8004c38:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fb4c 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004c40:	f7ff ff0c 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004c44:	210d      	movs	r1, #13
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa98 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004c4c:	897b      	ldrh	r3, [r7, #10]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa90 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004c5c:	897b      	ldrh	r3, [r7, #10]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fa8a 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	82bb      	strh	r3, [r7, #20]
 8004c6c:	e00a      	b.n	8004c84 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004c6e:	8abb      	ldrh	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fa7f 	bl	800517c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c7e:	8abb      	ldrh	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	82bb      	strh	r3, [r7, #20]
 8004c84:	8aba      	ldrh	r2, [r7, #20]
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3f0      	bcc.n	8004c6e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c8c:	f7ff fed6 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb45 	bl	8005320 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
 8004ca2:	e001      	b.n	8004ca8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	715a      	strb	r2, [r3, #5]

    return status;
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	e000      	b.n	8004cba <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b088      	sub	sp, #32
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	460b      	mov	r3, r1
 8004cd0:	817b      	strh	r3, [r7, #10]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	799b      	ldrb	r3, [r3, #6]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d14a      	bne.n	8004d7a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	795b      	ldrb	r3, [r3, #5]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e045      	b.n	8004d7c <HAL_SUBGHZ_ReadRegisters+0xba>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 faee 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004cfc:	f7ff feae 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004d00:	211d      	movs	r1, #29
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa3a 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa32 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004d18:	897b      	ldrh	r3, [r7, #10]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fa2c 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004d24:	2100      	movs	r1, #0
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fa28 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	82fb      	strh	r3, [r7, #22]
 8004d30:	e009      	b.n	8004d46 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fa77 	bl	8005228 <SUBGHZSPI_Receive>
      pData++;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004d40:	8afb      	ldrh	r3, [r7, #22]
 8004d42:	3301      	adds	r3, #1
 8004d44:	82fb      	strh	r3, [r7, #22]
 8004d46:	8afa      	ldrh	r2, [r7, #22]
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3f1      	bcc.n	8004d32 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d4e:	f7ff fe75 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fae4 	bl	8005320 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e001      	b.n	8004d6a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	715a      	strb	r2, [r3, #5]

    return status;
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
 8004d78:	e000      	b.n	8004d7c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	460b      	mov	r3, r1
 8004d92:	72fb      	strb	r3, [r7, #11]
 8004d94:	4613      	mov	r3, r2
 8004d96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	799b      	ldrb	r3, [r3, #6]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d14a      	bne.n	8004e38 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	795b      	ldrb	r3, [r3, #5]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e045      	b.n	8004e3a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa8f 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	2b84      	cmp	r3, #132	; 0x84
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004dc0:	7afb      	ldrb	r3, [r7, #11]
 8004dc2:	2b94      	cmp	r3, #148	; 0x94
 8004dc4:	d103      	bne.n	8004dce <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	711a      	strb	r2, [r3, #4]
 8004dcc:	e002      	b.n	8004dd4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004dd4:	f7ff fe42 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004dd8:	7afb      	ldrb	r3, [r7, #11]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f9cd 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	82bb      	strh	r3, [r7, #20]
 8004de6:	e00a      	b.n	8004dfe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004de8:	8abb      	ldrh	r3, [r7, #20]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f9c2 	bl	800517c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004df8:	8abb      	ldrh	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	82bb      	strh	r3, [r7, #20]
 8004dfe:	8aba      	ldrh	r2, [r7, #20]
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3f0      	bcc.n	8004de8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004e06:	f7ff fe19 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2b84      	cmp	r3, #132	; 0x84
 8004e0e:	d002      	beq.n	8004e16 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa85 	bl	8005320 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
 8004e22:	e001      	b.n	8004e28 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	715a      	strb	r2, [r3, #5]

    return status;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	e000      	b.n	8004e3a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b088      	sub	sp, #32
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	460b      	mov	r3, r1
 8004e50:	72fb      	strb	r3, [r7, #11]
 8004e52:	4613      	mov	r3, r2
 8004e54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	799b      	ldrb	r3, [r3, #6]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d13d      	bne.n	8004ee0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	795b      	ldrb	r3, [r3, #5]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e038      	b.n	8004ee2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fa2e 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004e7c:	f7ff fdee 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004e80:	7afb      	ldrb	r3, [r7, #11]
 8004e82:	4619      	mov	r1, r3
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f979 	bl	800517c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f975 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	82fb      	strh	r3, [r7, #22]
 8004e96:	e009      	b.n	8004eac <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f9c4 	bl	8005228 <SUBGHZSPI_Receive>
      pData++;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ea6:	8afb      	ldrh	r3, [r7, #22]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	82fb      	strh	r3, [r7, #22]
 8004eac:	8afa      	ldrh	r2, [r7, #22]
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3f1      	bcc.n	8004e98 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004eb4:	f7ff fdc2 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa31 	bl	8005320 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e001      	b.n	8004ed0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	715a      	strb	r2, [r3, #5]

    return status;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	e000      	b.n	8004ee2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	72fb      	strb	r3, [r7, #11]
 8004efa:	4613      	mov	r3, r2
 8004efc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	799b      	ldrb	r3, [r3, #6]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d13e      	bne.n	8004f86 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	795b      	ldrb	r3, [r3, #5]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e039      	b.n	8004f88 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f9dc 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004f20:	f7ff fd9c 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004f24:	210e      	movs	r1, #14
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f928 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004f2c:	7afb      	ldrb	r3, [r7, #11]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f923 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	82bb      	strh	r3, [r7, #20]
 8004f3a:	e00a      	b.n	8004f52 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004f3c:	8abb      	ldrh	r3, [r7, #20]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f918 	bl	800517c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f4c:	8abb      	ldrh	r3, [r7, #20]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	82bb      	strh	r3, [r7, #20]
 8004f52:	8aba      	ldrh	r2, [r7, #20]
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d3f0      	bcc.n	8004f3c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004f5a:	f7ff fd6f 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f9de 	bl	8005320 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
 8004f70:	e001      	b.n	8004f76 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	715a      	strb	r2, [r3, #5]

    return status;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	e000      	b.n	8004f88 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	72fb      	strb	r3, [r7, #11]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	799b      	ldrb	r3, [r3, #6]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d141      	bne.n	8005036 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	795b      	ldrb	r3, [r3, #5]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e03c      	b.n	8005038 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f987 	bl	80052d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004fca:	f7ff fd47 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004fce:	211e      	movs	r1, #30
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8d3 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f8ce 	bl	800517c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8ca 	bl	800517c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	82fb      	strh	r3, [r7, #22]
 8004fec:	e009      	b.n	8005002 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f919 	bl	8005228 <SUBGHZSPI_Receive>
      pData++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ffc:	8afb      	ldrh	r3, [r7, #22]
 8004ffe:	3301      	adds	r3, #1
 8005000:	82fb      	strh	r3, [r7, #22]
 8005002:	8afa      	ldrh	r2, [r7, #22]
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d3f1      	bcc.n	8004fee <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800500a:	f7ff fd17 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f986 	bl	8005320 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e001      	b.n	8005026 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	715a      	strb	r2, [r3, #5]

    return status;
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	e000      	b.n	8005038 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005048:	2300      	movs	r3, #0
 800504a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800504c:	f107 020c 	add.w	r2, r7, #12
 8005050:	2302      	movs	r3, #2
 8005052:	2112      	movs	r1, #18
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff fef4 	bl	8004e42 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800505a:	7b3b      	ldrb	r3, [r7, #12]
 800505c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800505e:	89fb      	ldrh	r3, [r7, #14]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	b21a      	sxth	r2, r3
 8005064:	7b7b      	ldrb	r3, [r7, #13]
 8005066:	b21b      	sxth	r3, r3
 8005068:	4313      	orrs	r3, r2
 800506a:	b21b      	sxth	r3, r3
 800506c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800506e:	89fb      	ldrh	r3, [r7, #14]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f005 fb0d 	bl	800a698 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800507e:	89fb      	ldrh	r3, [r7, #14]
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f005 fb12 	bl	800a6b4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f005 fb61 	bl	800a764 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80050a2:	89fb      	ldrh	r3, [r7, #14]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f005 fb66 	bl	800a780 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f005 fb6b 	bl	800a79c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f005 fb38 	bl	800a748 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f005 faf3 	bl	800a6d0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	09db      	lsrs	r3, r3, #7
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00e      	beq.n	8005114 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80050f6:	89fb      	ldrh	r3, [r7, #14]
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005102:	2101      	movs	r1, #1
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f005 faf1 	bl	800a6ec <HAL_SUBGHZ_CADStatusCallback>
 800510a:	e003      	b.n	8005114 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800510c:	2100      	movs	r1, #0
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f005 faec 	bl	800a6ec <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005114:	89fb      	ldrh	r3, [r7, #14]
 8005116:	0a5b      	lsrs	r3, r3, #9
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f005 fb01 	bl	800a728 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8005126:	f107 020c 	add.w	r2, r7, #12
 800512a:	2302      	movs	r3, #2
 800512c:	2102      	movs	r1, #2
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff fe28 	bl	8004d84 <HAL_SUBGHZ_ExecSetCmd>
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0b      	ldr	r2, [pc, #44]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 800514a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005150:	4a09      	ldr	r2, [pc, #36]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005158:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 800515c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005160:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <SUBGHZSPI_Init+0x3c>)
 8005168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	58010000 	.word	0x58010000

0800517c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800518c:	4b23      	ldr	r3, [pc, #140]	; (800521c <SUBGHZSPI_Transmit+0xa0>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	0cdb      	lsrs	r3, r3, #19
 800519a:	2264      	movs	r2, #100	; 0x64
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e008      	b.n	80051c6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80051ba:	4b19      	ldr	r3, [pc, #100]	; (8005220 <SUBGHZSPI_Transmit+0xa4>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d1ed      	bne.n	80051a2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <SUBGHZSPI_Transmit+0xa8>)
 80051c8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <SUBGHZSPI_Transmit+0xa0>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	0cdb      	lsrs	r3, r3, #19
 80051de:	2264      	movs	r2, #100	; 0x64
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	609a      	str	r2, [r3, #8]
      break;
 80051f6:	e008      	b.n	800520a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <SUBGHZSPI_Transmit+0xa4>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d1ed      	bne.n	80051e6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <SUBGHZSPI_Transmit+0xa4>)
 800520c:	68db      	ldr	r3, [r3, #12]

  return status;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000
 8005220:	58010000 	.word	0x58010000
 8005224:	5801000c 	.word	0x5801000c

08005228 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <SUBGHZSPI_Receive+0xa4>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	0cdb      	lsrs	r3, r3, #19
 8005244:	2264      	movs	r2, #100	; 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e008      	b.n	8005270 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b01      	subs	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <SUBGHZSPI_Receive+0xa8>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d1ed      	bne.n	800524c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <SUBGHZSPI_Receive+0xac>)
 8005272:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <SUBGHZSPI_Receive+0xa4>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	0cdb      	lsrs	r3, r3, #19
 8005288:	2264      	movs	r2, #100	; 0x64
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	609a      	str	r2, [r3, #8]
      break;
 80052a0:	e008      	b.n	80052b4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <SUBGHZSPI_Receive+0xa8>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d1ed      	bne.n	8005290 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <SUBGHZSPI_Receive+0xa8>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	701a      	strb	r2, [r3, #0]

  return status;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000000 	.word	0x20000000
 80052d0:	58010000 	.word	0x58010000
 80052d4:	5801000c 	.word	0x5801000c

080052d8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d111      	bne.n	800530c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <SUBGHZ_CheckDeviceReady+0x44>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80052f8:	f7ff fbb0 	bl	8004a5c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3b01      	subs	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f9      	bne.n	80052fc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005308:	f7ff fb98 	bl	8004a3c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f807 	bl	8005320 <SUBGHZ_WaitOnBusy>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000000 	.word	0x20000000

08005320 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <SUBGHZ_WaitOnBusy+0x58>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	0d1b      	lsrs	r3, r3, #20
 800533a:	2264      	movs	r2, #100	; 0x64
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005342:	f7ff fbb9 	bl	8004ab8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005346:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	609a      	str	r2, [r3, #8]
      break;
 8005358:	e009      	b.n	800536e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b01      	subs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005360:	f7ff fb98 	bl	8004a94 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4013      	ands	r3, r2
 800536a:	2b01      	cmp	r3, #1
 800536c:	d0e9      	beq.n	8005342 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000000 	.word	0x20000000

0800537c <LL_RCC_GetUSARTClockSource>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005388:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	401a      	ands	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	4313      	orrs	r3, r2
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <LL_RCC_GetLPUARTClockSource>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4013      	ands	r3, r2
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e042      	b.n	8005456 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc f984 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2224      	movs	r2, #36	; 0x24
 80053ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fc4b 	bl	8005c9c <UART_SetConfig>
 8005406:	4603      	mov	r3, r0
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e022      	b.n	8005456 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 feb3 	bl	8006184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 ff39 	bl	80062c6 <UART_CheckIdleState>
 8005454:	4603      	mov	r3, r0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	2b20      	cmp	r3, #32
 8005476:	d142      	bne.n	80054fe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_UART_Receive_IT+0x24>
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e03b      	b.n	8005500 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_UART_Receive_IT+0x36>
 8005492:	2302      	movs	r3, #2
 8005494:	e034      	b.n	8005500 <HAL_UART_Receive_IT+0xa0>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <HAL_UART_Receive_IT+0xa8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01f      	beq.n	80054ee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	623b      	str	r3, [r7, #32]
 80054dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	69f9      	ldr	r1, [r7, #28]
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fff9 	bl	80064ec <UART_Start_Receive_IT>
 80054fa:	4603      	mov	r3, r0
 80054fc:	e000      	b.n	8005500 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40008000 	.word	0x40008000

0800550c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	2b20      	cmp	r3, #32
 8005522:	d17a      	bne.n	800561a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_UART_Transmit_DMA+0x24>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e073      	b.n	800561c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_UART_Transmit_DMA+0x36>
 800553e:	2302      	movs	r3, #2
 8005540:	e06c      	b.n	800561c <HAL_UART_Transmit_DMA+0x110>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2221      	movs	r2, #33	; 0x21
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02c      	beq.n	80055d2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <HAL_UART_Transmit_DMA+0x118>)
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <HAL_UART_Transmit_DMA+0x11c>)
 8005586:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <HAL_UART_Transmit_DMA+0x120>)
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005594:	2200      	movs	r2, #0
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	4619      	mov	r1, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3328      	adds	r3, #40	; 0x28
 80055a8:	461a      	mov	r2, r3
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f7fc fde0 	bl	8002170 <HAL_DMA_Start_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2210      	movs	r2, #16
 80055ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e024      	b.n	800561c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3728      	adds	r7, #40	; 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08006887 	.word	0x08006887
 8005628:	08006921 	.word	0x08006921
 800562c:	0800693d 	.word	0x0800693d

08005630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b0ba      	sub	sp, #232	; 0xe8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800565a:	f640 030f 	movw	r3, #2063	; 0x80f
 800565e:	4013      	ands	r3, r2
 8005660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11b      	bne.n	80056a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 82d6 	beq.w	8005c46 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
      }
      return;
 80056a2:	e2d0      	b.n	8005c46 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 811f 	beq.w	80058ec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056b2:	4b8b      	ldr	r3, [pc, #556]	; (80058e0 <HAL_UART_IRQHandler+0x2b0>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056be:	4b89      	ldr	r3, [pc, #548]	; (80058e4 <HAL_UART_IRQHandler+0x2b4>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8112 	beq.w	80058ec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d011      	beq.n	80056f8 <HAL_UART_IRQHandler+0xc8>
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <HAL_UART_IRQHandler+0xf8>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2202      	movs	r2, #2
 8005716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800571e:	f043 0204 	orr.w	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d011      	beq.n	8005758 <HAL_UART_IRQHandler+0x128>
 8005734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2204      	movs	r2, #4
 8005746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574e:	f043 0202 	orr.w	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005770:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005774:	4b5a      	ldr	r3, [pc, #360]	; (80058e0 <HAL_UART_IRQHandler+0x2b0>)
 8005776:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2208      	movs	r2, #8
 8005782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578a:	f043 0208 	orr.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_UART_IRQHandler+0x196>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 823c 	beq.w	8005c4a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d005      	beq.n	800582a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800581e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d04f      	beq.n	80058ca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 ffc6 	bl	80067bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d141      	bne.n	80058c2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800586a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d9      	bne.n	800583e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005896:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <HAL_UART_IRQHandler+0x2b8>)
 8005898:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fc fd42 	bl	8002328 <HAL_DMA_Abort_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d017      	beq.n	80058da <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	e00f      	b.n	80058da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9d9 	bl	8005c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00b      	b.n	80058da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9d5 	bl	8005c72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e007      	b.n	80058da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9d1 	bl	8005c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80058d8:	e1b7      	b.n	8005c4a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058da:	bf00      	nop
    return;
 80058dc:	e1b5      	b.n	8005c4a <HAL_UART_IRQHandler+0x61a>
 80058de:	bf00      	nop
 80058e0:	10000001 	.word	0x10000001
 80058e4:	04000120 	.word	0x04000120
 80058e8:	080069bd 	.word	0x080069bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f040 814a 	bne.w	8005b8a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8143 	beq.w	8005b8a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 813c 	beq.w	8005b8a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	f040 80b5 	bne.w	8005a94 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8005936:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8187 	beq.w	8005c4e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800594a:	429a      	cmp	r2, r3
 800594c:	f080 817f 	bcs.w	8005c4e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 8086 	bne.w	8005a78 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800599a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1da      	bne.n	800596c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e1      	bne.n	80059b6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a48:	f023 0310 	bic.w	r3, r3, #16
 8005a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e4      	bne.n	8005a38 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc fbfa 	bl	800226c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8f9 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a92:	e0dc      	b.n	8005c4e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80ce 	beq.w	8005c52 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80c9 	beq.w	8005c52 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e4      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	623b      	str	r3, [r7, #32]
   return(result);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e1      	bne.n	8005af6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	617b      	str	r3, [r7, #20]
   return(result);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e4      	bne.n	8005b46 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f87e 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b88:	e063      	b.n	8005c52 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x584>
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fba3 	bl	80072f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb2:	e051      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d014      	beq.n	8005bea <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03a      	beq.n	8005c56 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
    }
    return;
 8005be8:	e035      	b.n	8005c56 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_UART_IRQHandler+0x5da>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fef0 	bl	80069e8 <UART_EndTransmit_IT>
    return;
 8005c08:	e026      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_UART_IRQHandler+0x5fa>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fb7a 	bl	800731c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c28:	e016      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d010      	beq.n	8005c58 <HAL_UART_IRQHandler+0x628>
 8005c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da0c      	bge.n	8005c58 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fb63 	bl	800730a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c44:	e008      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
      return;
 8005c46:	bf00      	nop
 8005c48:	e006      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
    return;
 8005c4a:	bf00      	nop
 8005c4c:	e004      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
      return;
 8005c4e:	bf00      	nop
 8005c50:	e002      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
      return;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_UART_IRQHandler+0x628>
    return;
 8005c56:	bf00      	nop
  }
}
 8005c58:	37e8      	adds	r7, #232	; 0xe8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop

08005c60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
	...

08005c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca0:	b08c      	sub	sp, #48	; 0x30
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	4b94      	ldr	r3, [pc, #592]	; (8005f1c <UART_SetConfig+0x280>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a89      	ldr	r2, [pc, #548]	; (8005f20 <UART_SetConfig+0x284>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d04:	4313      	orrs	r3, r2
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f023 010f 	bic.w	r1, r3, #15
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7a      	ldr	r2, [pc, #488]	; (8005f24 <UART_SetConfig+0x288>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d127      	bne.n	8005d90 <UART_SetConfig+0xf4>
 8005d40:	2003      	movs	r0, #3
 8005d42:	f7ff fb1b 	bl	800537c <LL_RCC_GetUSARTClockSource>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d81b      	bhi.n	8005d88 <UART_SetConfig+0xec>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0xbc>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d79 	.word	0x08005d79
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e080      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005d70:	2302      	movs	r3, #2
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e07c      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7e:	e078      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d86:	e074      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	e070      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a64      	ldr	r2, [pc, #400]	; (8005f28 <UART_SetConfig+0x28c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d138      	bne.n	8005e0c <UART_SetConfig+0x170>
 8005d9a:	200c      	movs	r0, #12
 8005d9c:	f7ff faee 	bl	800537c <LL_RCC_GetUSARTClockSource>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d82c      	bhi.n	8005e04 <UART_SetConfig+0x168>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x114>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005e05 	.word	0x08005e05
 8005dbc:	08005e05 	.word	0x08005e05
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e05 	.word	0x08005e05
 8005dcc:	08005e05 	.word	0x08005e05
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	08005e05 	.word	0x08005e05
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dea:	e042      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df2:	e03e      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfa:	e03a      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e02:	e036      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e032      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a43      	ldr	r2, [pc, #268]	; (8005f20 <UART_SetConfig+0x284>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d12a      	bne.n	8005e6c <UART_SetConfig+0x1d0>
 8005e16:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005e1a:	f7ff fac1 	bl	80053a0 <LL_RCC_GetLPUARTClockSource>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e24:	d01a      	beq.n	8005e5c <UART_SetConfig+0x1c0>
 8005e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e2a:	d81b      	bhi.n	8005e64 <UART_SetConfig+0x1c8>
 8005e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e30:	d00c      	beq.n	8005e4c <UART_SetConfig+0x1b0>
 8005e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e36:	d815      	bhi.n	8005e64 <UART_SetConfig+0x1c8>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x1a8>
 8005e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e40:	d008      	beq.n	8005e54 <UART_SetConfig+0x1b8>
 8005e42:	e00f      	b.n	8005e64 <UART_SetConfig+0x1c8>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4a:	e012      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e52:	e00e      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5a:	e00a      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e62:	e006      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6a:	e002      	b.n	8005e72 <UART_SetConfig+0x1d6>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <UART_SetConfig+0x284>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f040 80a4 	bne.w	8005fc6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d823      	bhi.n	8005ece <UART_SetConfig+0x232>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x1f0>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005ecf 	.word	0x08005ecf
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ebf 	.word	0x08005ebf
 8005ea0:	08005ecf 	.word	0x08005ecf
 8005ea4:	08005ecf 	.word	0x08005ecf
 8005ea8:	08005ecf 	.word	0x08005ecf
 8005eac:	08005ec7 	.word	0x08005ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb0:	f7fd ff48 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eb6:	e010      	b.n	8005eda <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <UART_SetConfig+0x290>)
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ebc:	e00d      	b.n	8005eda <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ebe:	f7fd fe8d 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ec4:	e009      	b.n	8005eda <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ecc:	e005      	b.n	8005eda <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8137 	beq.w	8006150 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <UART_SetConfig+0x294>)
 8005ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d305      	bcc.n	8005f12 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d910      	bls.n	8005f34 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f18:	e11a      	b.n	8006150 <UART_SetConfig+0x4b4>
 8005f1a:	bf00      	nop
 8005f1c:	cfff69f3 	.word	0xcfff69f3
 8005f20:	40008000 	.word	0x40008000
 8005f24:	40013800 	.word	0x40013800
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	00f42400 	.word	0x00f42400
 8005f30:	0800c9c8 	.word	0x0800c9c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2200      	movs	r2, #0
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	60fa      	str	r2, [r7, #12]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	4a8e      	ldr	r2, [pc, #568]	; (800617c <UART_SetConfig+0x4e0>)
 8005f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2200      	movs	r2, #0
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f56:	f7fa f917 	bl	8000188 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	020b      	lsls	r3, r1, #8
 8005f6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f70:	0202      	lsls	r2, r0, #8
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	6849      	ldr	r1, [r1, #4]
 8005f76:	0849      	lsrs	r1, r1, #1
 8005f78:	2000      	movs	r0, #0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	eb12 0804 	adds.w	r8, r2, r4
 8005f82:	eb43 0905 	adc.w	r9, r3, r5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	4693      	mov	fp, r2
 8005f90:	4652      	mov	r2, sl
 8005f92:	465b      	mov	r3, fp
 8005f94:	4640      	mov	r0, r8
 8005f96:	4649      	mov	r1, r9
 8005f98:	f7fa f8f6 	bl	8000188 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005faa:	d308      	bcc.n	8005fbe <UART_SetConfig+0x322>
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb2:	d204      	bcs.n	8005fbe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	e0c8      	b.n	8006150 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fc4:	e0c4      	b.n	8006150 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fce:	d168      	bne.n	80060a2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d828      	bhi.n	800602a <UART_SetConfig+0x38e>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x344>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fd fe9e 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8006008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800600a:	e014      	b.n	8006036 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fd feac 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006012:	e010      	b.n	8006036 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b5a      	ldr	r3, [pc, #360]	; (8006180 <UART_SetConfig+0x4e4>)
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006018:	e00d      	b.n	8006036 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fd fddf 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 800601e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006020:	e009      	b.n	8006036 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006028:	e005      	b.n	8006036 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8089 	beq.w	8006150 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	4a4e      	ldr	r2, [pc, #312]	; (800617c <UART_SetConfig+0x4e0>)
 8006044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006048:	461a      	mov	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	441a      	add	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d916      	bls.n	800609a <UART_SetConfig+0x3fe>
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006072:	d212      	bcs.n	800609a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f023 030f 	bic.w	r3, r3, #15
 800607c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	b29a      	uxth	r2, r3
 800608a:	8bfb      	ldrh	r3, [r7, #30]
 800608c:	4313      	orrs	r3, r2
 800608e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	8bfa      	ldrh	r2, [r7, #30]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e05a      	b.n	8006150 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060a0:	e056      	b.n	8006150 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d827      	bhi.n	80060fa <UART_SetConfig+0x45e>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x414>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd fe36 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd fe44 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b26      	ldr	r3, [pc, #152]	; (8006180 <UART_SetConfig+0x4e4>)
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd fd77 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 80060ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006104:	bf00      	nop
    }

    if (pclk != 0U)
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d021      	beq.n	8006150 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	4a1a      	ldr	r2, [pc, #104]	; (800617c <UART_SetConfig+0x4e0>)
 8006112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006116:	461a      	mov	r2, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	fbb3 f2f2 	udiv	r2, r3, r2
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	441a      	add	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d908      	bls.n	800614a <UART_SetConfig+0x4ae>
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d204      	bcs.n	800614a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e002      	b.n	8006150 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2201      	movs	r2, #1
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2201      	movs	r2, #1
 800615c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2200      	movs	r2, #0
 8006164:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800616c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006170:	4618      	mov	r0, r3
 8006172:	3730      	adds	r7, #48	; 0x30
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617a:	bf00      	nop
 800617c:	0800c9c8 	.word	0x0800c9c8
 8006180:	00f42400 	.word	0x00f42400

08006184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006282:	d10a      	bne.n	800629a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bc80      	pop	{r7}
 80062c4:	4770      	bx	lr

080062c6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d6:	f7fa fe8d 	bl	8000ff4 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d10e      	bne.n	8006308 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f82f 	bl	800635c <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e025      	b.n	8006354 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d10e      	bne.n	8006334 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006316:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f819 	bl	800635c <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e00f      	b.n	8006354 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b09c      	sub	sp, #112	; 0x70
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636c:	e0a9      	b.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006374:	f000 80a5 	beq.w	80064c2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006378:	f7fa fe3c 	bl	8000ff4 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <UART_WaitOnFlagUntilTimeout+0x32>
 8006388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638a:	2b00      	cmp	r3, #0
 800638c:	d140      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800639c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063a2:	667b      	str	r3, [r7, #100]	; 0x64
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	663b      	str	r3, [r7, #96]	; 0x60
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e069      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d051      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642c:	d149      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006436:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800644c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
 8006458:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800645c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	613b      	str	r3, [r7, #16]
   return(result);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	66bb      	str	r3, [r7, #104]	; 0x68
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800648a:	623a      	str	r2, [r7, #32]
 800648c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	69f9      	ldr	r1, [r7, #28]
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	61bb      	str	r3, [r7, #24]
   return(result);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e010      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	429a      	cmp	r2, r3
 80064de:	f43f af46 	beq.w	800636e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3770      	adds	r7, #112	; 0x70
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b0a3      	sub	sp, #140	; 0x8c
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651e:	d10e      	bne.n	800653e <UART_Start_Receive_IT+0x52>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <UART_Start_Receive_IT+0x48>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800652e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006532:	e02d      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	22ff      	movs	r2, #255	; 0xff
 8006538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800653c:	e028      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10d      	bne.n	8006562 <UART_Start_Receive_IT+0x76>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <UART_Start_Receive_IT+0x6c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006556:	e01b      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	227f      	movs	r2, #127	; 0x7f
 800655c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006560:	e016      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656a:	d10d      	bne.n	8006588 <UART_Start_Receive_IT+0x9c>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <UART_Start_Receive_IT+0x92>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	227f      	movs	r2, #127	; 0x7f
 8006578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800657c:	e008      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	223f      	movs	r2, #63	; 0x3f
 8006582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006586:	e003      	b.n	8006590 <UART_Start_Receive_IT+0xa4>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2222      	movs	r2, #34	; 0x22
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80065b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065c4:	673a      	str	r2, [r7, #112]	; 0x70
 80065c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80065ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80065d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e3      	bne.n	80065a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e0:	d153      	bne.n	800668a <UART_Start_Receive_IT+0x19e>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d34d      	bcc.n	800668a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	d107      	bne.n	8006608 <UART_Start_Receive_IT+0x11c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a4a      	ldr	r2, [pc, #296]	; (800672c <UART_Start_Receive_IT+0x240>)
 8006604:	671a      	str	r2, [r3, #112]	; 0x70
 8006606:	e002      	b.n	800660e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a49      	ldr	r2, [pc, #292]	; (8006730 <UART_Start_Receive_IT+0x244>)
 800660c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006642:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800664e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e4      	bne.n	800661e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800666a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006674:	64ba      	str	r2, [r7, #72]	; 0x48
 8006676:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800667a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_Start_Receive_IT+0x168>
 8006688:	e04a      	b.n	8006720 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006692:	d107      	bne.n	80066a4 <UART_Start_Receive_IT+0x1b8>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d103      	bne.n	80066a4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a25      	ldr	r2, [pc, #148]	; (8006734 <UART_Start_Receive_IT+0x248>)
 80066a0:	671a      	str	r2, [r3, #112]	; 0x70
 80066a2:	e002      	b.n	80066aa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a24      	ldr	r2, [pc, #144]	; (8006738 <UART_Start_Receive_IT+0x24c>)
 80066a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d019      	beq.n	80066ee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066ce:	677b      	str	r3, [r7, #116]	; 0x74
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
 80066da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e6      	bne.n	80066ba <UART_Start_Receive_IT+0x1ce>
 80066ec:	e018      	b.n	8006720 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	613b      	str	r3, [r7, #16]
   return(result);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	67bb      	str	r3, [r7, #120]	; 0x78
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	69f9      	ldr	r1, [r7, #28]
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	61bb      	str	r3, [r7, #24]
   return(result);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	378c      	adds	r7, #140	; 0x8c
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	08006ff9 	.word	0x08006ff9
 8006730:	08006d01 	.word	0x08006d01
 8006734:	08006b9f 	.word	0x08006b9f
 8006738:	08006a3f 	.word	0x08006a3f

0800673c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b08f      	sub	sp, #60	; 0x3c
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	61fb      	str	r3, [r7, #28]
   return(result);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e6      	bne.n	8006744 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	60bb      	str	r3, [r7, #8]
   return(result);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800678c:	633b      	str	r3, [r7, #48]	; 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	61ba      	str	r2, [r7, #24]
 8006798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6979      	ldr	r1, [r7, #20]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	613b      	str	r3, [r7, #16]
   return(result);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80067b2:	bf00      	nop
 80067b4:	373c      	adds	r7, #60	; 0x3c
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b095      	sub	sp, #84	; 0x54
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	643b      	str	r3, [r7, #64]	; 0x40
 80067e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	61fb      	str	r3, [r7, #28]
   return(result);
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e3      	bne.n	80067f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006832:	2b01      	cmp	r3, #1
 8006834:	d118      	bne.n	8006868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	60bb      	str	r3, [r7, #8]
   return(result);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	647b      	str	r3, [r7, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	613b      	str	r3, [r7, #16]
   return(result);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e6      	bne.n	8006836 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800687c:	bf00      	nop
 800687e:	3754      	adds	r7, #84	; 0x54
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b090      	sub	sp, #64	; 0x40
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d137      	bne.n	8006912 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ca:	633a      	str	r2, [r7, #48]	; 0x30
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	69b9      	ldr	r1, [r7, #24]
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	617b      	str	r3, [r7, #20]
   return(result);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006910:	e002      	b.n	8006918 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006912:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006914:	f7fb f858 	bl	80019c8 <HAL_UART_TxCpltCallback>
}
 8006918:	bf00      	nop
 800691a:	3740      	adds	r7, #64	; 0x40
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff f996 	bl	8005c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006950:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d109      	bne.n	800697c <UART_DMAError+0x40>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b21      	cmp	r3, #33	; 0x21
 800696c:	d106      	bne.n	800697c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2200      	movs	r2, #0
 8006972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff fee0 	bl	800673c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d109      	bne.n	800699e <UART_DMAError+0x62>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b22      	cmp	r3, #34	; 0x22
 800698e:	d106      	bne.n	800699e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006998:	6978      	ldr	r0, [r7, #20]
 800699a:	f7ff ff0f 	bl	80067bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f7ff f95f 	bl	8005c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff f949 	bl	8005c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6979      	ldr	r1, [r7, #20]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fa ffc9 	bl	80019c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b096      	sub	sp, #88	; 0x58
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	2b22      	cmp	r3, #34	; 0x22
 8006a58:	f040 8095 	bne.w	8006b86 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a6a:	b2d9      	uxtb	r1, r3
 8006a6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a76:	400a      	ands	r2, r1
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d178      	bne.n	8006b96 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e6      	bne.n	8006aa4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006af6:	633a      	str	r2, [r7, #48]	; 0x30
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d12e      	bne.n	8006b7e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	617b      	str	r3, [r7, #20]
   return(result);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d103      	bne.n	8006b6e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff f884 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b7c:	e00b      	b.n	8006b96 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa ff38 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 8006b84:	e007      	b.n	8006b96 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0208 	orr.w	r2, r2, #8
 8006b94:	619a      	str	r2, [r3, #24]
}
 8006b96:	bf00      	nop
 8006b98:	3758      	adds	r7, #88	; 0x58
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b096      	sub	sp, #88	; 0x58
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	2b22      	cmp	r3, #34	; 0x22
 8006bb8:	f040 8095 	bne.w	8006ce6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bcc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006bd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d178      	bne.n	8006cf6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d12e      	bne.n	8006cde <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6979      	ldr	r1, [r7, #20]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d103      	bne.n	8006cce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2210      	movs	r2, #16
 8006ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fe ffd4 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cdc:	e00b      	b.n	8006cf6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fa fe88 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 8006ce4:	e007      	b.n	8006cf6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0208 	orr.w	r2, r2, #8
 8006cf4:	619a      	str	r2, [r3, #24]
}
 8006cf6:	bf00      	nop
 8006cf8:	3758      	adds	r7, #88	; 0x58
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b0a6      	sub	sp, #152	; 0x98
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d0e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	2b22      	cmp	r3, #34	; 0x22
 8006d38:	f040 814f 	bne.w	8006fda <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d42:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d46:	e0f6      	b.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d52:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006d56:	b2d9      	uxtb	r1, r3
 8006d58:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	400a      	ands	r2, r1
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d053      	beq.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d011      	beq.n	8006dca <UART_RxISR_8BIT_FIFOEN+0xca>
 8006da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc0:	f043 0201 	orr.w	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d011      	beq.n	8006dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2202      	movs	r2, #2
 8006de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	f043 0204 	orr.w	r2, r3, #4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2204      	movs	r2, #4
 8006e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e20:	f043 0202 	orr.w	r2, r3, #2
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe ff1c 	bl	8005c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d173      	bne.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e72:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006e76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e4      	bne.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ea8:	657a      	str	r2, [r7, #84]	; 0x54
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e3      	bne.n	8006e84 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d12e      	bne.n	8006f30 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	f023 0310 	bic.w	r3, r3, #16
 8006eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d103      	bne.n	8006f20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fe feab 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
 8006f2e:	e002      	b.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7fa fd5f 	bl	80019f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f47f aefe 	bne.w	8006d48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d045      	beq.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d23e      	bcs.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f82:	673b      	str	r3, [r7, #112]	; 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006fa4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f043 0320 	orr.w	r3, r3, #32
 8006fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fd8:	e007      	b.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0208 	orr.w	r2, r2, #8
 8006fe8:	619a      	str	r2, [r3, #24]
}
 8006fea:	bf00      	nop
 8006fec:	3798      	adds	r7, #152	; 0x98
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08006a3f 	.word	0x08006a3f

08006ff8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b0a8      	sub	sp, #160	; 0xa0
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007006:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702e:	2b22      	cmp	r3, #34	; 0x22
 8007030:	f040 8153 	bne.w	80072da <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800703a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800703e:	e0fa      	b.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007052:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007056:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800705a:	4013      	ands	r3, r2
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007062:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800708a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	2b00      	cmp	r3, #0
 8007094:	d053      	beq.n	800713e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007096:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d011      	beq.n	80070c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80070a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2201      	movs	r2, #1
 80070b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80070d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2202      	movs	r2, #2
 80070e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ec:	f043 0204 	orr.w	r2, r3, #4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007102:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2204      	movs	r2, #4
 8007114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711c:	f043 0202 	orr.w	r2, r3, #2
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fe fd9e 	bl	8005c72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d175      	bne.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800716c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800716e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800717a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80071aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e1      	bne.n	8007180 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d12e      	bne.n	8007230 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	f023 0310 	bic.w	r3, r3, #16
 80071ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071f6:	647b      	str	r3, [r7, #68]	; 0x44
 80071f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b10      	cmp	r3, #16
 8007216:	d103      	bne.n	8007220 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2210      	movs	r2, #16
 800721e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fe fd2b 	bl	8005c84 <HAL_UARTEx_RxEventCallback>
 800722e:	e002      	b.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fa fbdf 	bl	80019f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007236:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800723a:	2b00      	cmp	r3, #0
 800723c:	d006      	beq.n	800724c <UART_RxISR_16BIT_FIFOEN+0x254>
 800723e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	f47f aefa 	bne.w	8007040 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007252:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007256:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800725a:	2b00      	cmp	r3, #0
 800725c:	d045      	beq.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007264:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007268:	429a      	cmp	r2, r3
 800726a:	d23e      	bcs.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	623b      	str	r3, [r7, #32]
   return(result);
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007282:	677b      	str	r3, [r7, #116]	; 0x74
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800728c:	633a      	str	r2, [r7, #48]	; 0x30
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e5      	bne.n	800726c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80072a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f043 0320 	orr.w	r3, r3, #32
 80072ba:	673b      	str	r3, [r7, #112]	; 0x70
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	617b      	str	r3, [r7, #20]
   return(result);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e6      	bne.n	80072a6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072d8:	e007      	b.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0208 	orr.w	r2, r2, #8
 80072e8:	619a      	str	r2, [r3, #24]
}
 80072ea:	bf00      	nop
 80072ec:	37a0      	adds	r7, #160	; 0xa0
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	08006b9f 	.word	0x08006b9f

080072f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af02      	add	r7, sp, #8
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800734a:	2302      	movs	r3, #2
 800734c:	e046      	b.n	80073dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2224      	movs	r2, #36	; 0x24
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d105      	bne.n	8007394 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f911 	bl	80075b6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a4:	f7f9 fe26 	bl	8000ff4 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7fe ffcf 	bl	800635c <UART_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	75fb      	strb	r3, [r7, #23]
 80073c8:	e003      	b.n	80073d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_UARTEx_EnableStopMode+0x16>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e021      	b.n	800743e <HAL_UARTEx_EnableStopMode+0x5a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f043 0302 	orr.w	r3, r3, #2
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6979      	ldr	r1, [r7, #20]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	613b      	str	r3, [r7, #16]
   return(result);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3724      	adds	r7, #36	; 0x24
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_UARTEx_EnableFifoMode+0x16>
 800745a:	2302      	movs	r3, #2
 800745c:	e02b      	b.n	80074b6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2224      	movs	r2, #36	; 0x24
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800748c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8ac 	bl	80075fc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e02d      	b.n	8007532 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2224      	movs	r2, #36	; 0x24
 80074e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f872 	bl	80075fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800754e:	2302      	movs	r3, #2
 8007550:	e02d      	b.n	80075ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2224      	movs	r2, #36	; 0x24
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f834 	bl	80075fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f023 0210 	bic.w	r2, r3, #16
 80075ce:	893b      	ldrh	r3, [r7, #8]
 80075d0:	4619      	mov	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80075e4:	7abb      	ldrb	r3, [r7, #10]
 80075e6:	061a      	lsls	r2, r3, #24
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr
	...

080075fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800761c:	e031      	b.n	8007682 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800761e:	2308      	movs	r3, #8
 8007620:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007622:	2308      	movs	r3, #8
 8007624:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	0e5b      	lsrs	r3, r3, #25
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	0f5b      	lsrs	r3, r3, #29
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	7b3a      	ldrb	r2, [r7, #12]
 800764a:	4910      	ldr	r1, [pc, #64]	; (800768c <UARTEx_SetNbDataToProcess+0x90>)
 800764c:	5c8a      	ldrb	r2, [r1, r2]
 800764e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007652:	7b3a      	ldrb	r2, [r7, #12]
 8007654:	490e      	ldr	r1, [pc, #56]	; (8007690 <UARTEx_SetNbDataToProcess+0x94>)
 8007656:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007658:	fb93 f3f2 	sdiv	r3, r3, r2
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	7b7a      	ldrb	r2, [r7, #13]
 8007668:	4908      	ldr	r1, [pc, #32]	; (800768c <UARTEx_SetNbDataToProcess+0x90>)
 800766a:	5c8a      	ldrb	r2, [r1, r2]
 800766c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007670:	7b7a      	ldrb	r2, [r7, #13]
 8007672:	4907      	ldr	r1, [pc, #28]	; (8007690 <UARTEx_SetNbDataToProcess+0x94>)
 8007674:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007676:	fb93 f3f2 	sdiv	r3, r3, r2
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr
 800768c:	0800c9e0 	.word	0x0800c9e0
 8007690:	0800c9e8 	.word	0x0800c9e8

08007694 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af02      	add	r7, sp, #8
 800769a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800769c:	4a24      	ldr	r2, [pc, #144]	; (8007730 <RadioInit+0x9c>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <RadioInit+0xa0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <RadioInit+0xa0>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80076ae:	4b21      	ldr	r3, [pc, #132]	; (8007734 <RadioInit+0xa0>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <RadioInit+0xa0>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80076ba:	481f      	ldr	r0, [pc, #124]	; (8007738 <RadioInit+0xa4>)
 80076bc:	f001 ff88 	bl	80095d0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80076c0:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <RadioInit+0xa0>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80076c6:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <RadioInit+0xa0>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80076cc:	f002 fa16 	bl	8009afc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80076d0:	2100      	movs	r1, #0
 80076d2:	2000      	movs	r0, #0
 80076d4:	f002 fdde 	bl	800a294 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80076d8:	2204      	movs	r2, #4
 80076da:	2100      	movs	r1, #0
 80076dc:	2001      	movs	r0, #1
 80076de:	f002 fb9b 	bl	8009e18 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076ee:	f002 facb 	bl	8009c88 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80076f2:	f000 fe83 	bl	80083fc <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80076f6:	2300      	movs	r3, #0
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4b10      	ldr	r3, [pc, #64]	; (800773c <RadioInit+0xa8>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007702:	480f      	ldr	r0, [pc, #60]	; (8007740 <RadioInit+0xac>)
 8007704:	f004 fa08 	bl	800bb18 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007708:	2300      	movs	r3, #0
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <RadioInit+0xb0>)
 800770e:	2200      	movs	r2, #0
 8007710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007714:	480c      	ldr	r0, [pc, #48]	; (8007748 <RadioInit+0xb4>)
 8007716:	f004 f9ff 	bl	800bb18 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800771a:	4809      	ldr	r0, [pc, #36]	; (8007740 <RadioInit+0xac>)
 800771c:	f004 faa0 	bl	800bc60 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007720:	4809      	ldr	r0, [pc, #36]	; (8007748 <RadioInit+0xb4>)
 8007722:	f004 fa9d 	bl	800bc60 <UTIL_TIMER_Stop>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000284 	.word	0x20000284
 8007734:	20000288 	.word	0x20000288
 8007738:	080087e9 	.word	0x080087e9
 800773c:	08008771 	.word	0x08008771
 8007740:	200002e4 	.word	0x200002e4
 8007744:	08008785 	.word	0x08008785
 8007748:	200002fc 	.word	0x200002fc

0800774c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007750:	f001 ff80 	bl	8009654 <SUBGRF_GetOperatingMode>
 8007754:	4603      	mov	r3, r0
 8007756:	2b07      	cmp	r3, #7
 8007758:	d00a      	beq.n	8007770 <RadioGetStatus+0x24>
 800775a:	2b07      	cmp	r3, #7
 800775c:	dc0a      	bgt.n	8007774 <RadioGetStatus+0x28>
 800775e:	2b04      	cmp	r3, #4
 8007760:	d002      	beq.n	8007768 <RadioGetStatus+0x1c>
 8007762:	2b05      	cmp	r3, #5
 8007764:	d002      	beq.n	800776c <RadioGetStatus+0x20>
 8007766:	e005      	b.n	8007774 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007768:	2302      	movs	r3, #2
 800776a:	e004      	b.n	8007776 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800776c:	2301      	movs	r3, #1
 800776e:	e002      	b.n	8007776 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007770:	2303      	movs	r3, #3
 8007772:	e000      	b.n	8007776 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007774:	2300      	movs	r3, #0
    }
}
 8007776:	4618      	mov	r0, r3
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007786:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <RadioSetModem+0xb4>)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	4618      	mov	r0, r3
 8007790:	f003 f943 	bl	800aa1a <RFW_SetRadioModem>
    switch( modem )
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b05      	cmp	r3, #5
 8007798:	d80e      	bhi.n	80077b8 <RadioSetModem+0x3c>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <RadioSetModem+0x24>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c7 	.word	0x080077c7
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077fb 	.word	0x080077fb
 80077b0:	08007809 	.word	0x08007809
 80077b4:	08007817 	.word	0x08007817
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80077b8:	2003      	movs	r0, #3
 80077ba:	f002 fb07 	bl	8009dcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80077be:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <RadioSetModem+0xb4>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	735a      	strb	r2, [r3, #13]
        break;
 80077c4:	e02f      	b.n	8007826 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80077c6:	2000      	movs	r0, #0
 80077c8:	f002 fb00 	bl	8009dcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80077cc:	4b18      	ldr	r3, [pc, #96]	; (8007830 <RadioSetModem+0xb4>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	735a      	strb	r2, [r3, #13]
        break;
 80077d2:	e028      	b.n	8007826 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80077d4:	2001      	movs	r0, #1
 80077d6:	f002 faf9 	bl	8009dcc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80077da:	4b15      	ldr	r3, [pc, #84]	; (8007830 <RadioSetModem+0xb4>)
 80077dc:	7b5a      	ldrb	r2, [r3, #13]
 80077de:	4b14      	ldr	r3, [pc, #80]	; (8007830 <RadioSetModem+0xb4>)
 80077e0:	7b1b      	ldrb	r3, [r3, #12]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d01e      	beq.n	8007824 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80077e6:	4b12      	ldr	r3, [pc, #72]	; (8007830 <RadioSetModem+0xb4>)
 80077e8:	7b1a      	ldrb	r2, [r3, #12]
 80077ea:	4b11      	ldr	r3, [pc, #68]	; (8007830 <RadioSetModem+0xb4>)
 80077ec:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <RadioSetModem+0xb4>)
 80077f0:	7b5b      	ldrb	r3, [r3, #13]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ff86 	bl	8008704 <RadioSetPublicNetwork>
        }
        break;
 80077f8:	e014      	b.n	8007824 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80077fa:	2002      	movs	r0, #2
 80077fc:	f002 fae6 	bl	8009dcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <RadioSetModem+0xb4>)
 8007802:	2200      	movs	r2, #0
 8007804:	735a      	strb	r2, [r3, #13]
        break;
 8007806:	e00e      	b.n	8007826 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007808:	2002      	movs	r0, #2
 800780a:	f002 fadf 	bl	8009dcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <RadioSetModem+0xb4>)
 8007810:	2200      	movs	r2, #0
 8007812:	735a      	strb	r2, [r3, #13]
        break;
 8007814:	e007      	b.n	8007826 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007816:	2000      	movs	r0, #0
 8007818:	f002 fad8 	bl	8009dcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <RadioSetModem+0xb4>)
 800781e:	2200      	movs	r2, #0
 8007820:	735a      	strb	r2, [r3, #13]
        break;
 8007822:	e000      	b.n	8007826 <RadioSetModem+0xaa>
        break;
 8007824:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000288 	.word	0x20000288

08007834 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 fa7f 	bl	8009d40 <SUBGRF_SetRfFrequency>
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b090      	sub	sp, #64	; 0x40
 800784e:	af0a      	add	r7, sp, #40	; 0x28
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8007866:	f000 fddc 	bl	8008422 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800786a:	2000      	movs	r0, #0
 800786c:	f7ff ff86 	bl	800777c <RadioSetModem>

    RadioSetChannel( freq );
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff ffdf 	bl	8007834 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007876:	2301      	movs	r3, #1
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	2300      	movs	r3, #0
 800787c:	9308      	str	r3, [sp, #32]
 800787e:	2300      	movs	r3, #0
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	2300      	movs	r3, #0
 8007884:	9306      	str	r3, [sp, #24]
 8007886:	2300      	movs	r3, #0
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	2300      	movs	r3, #0
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	2300      	movs	r3, #0
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	2300      	movs	r3, #0
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	2303      	movs	r3, #3
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	2000      	movs	r0, #0
 80078a8:	f000 f83c 	bl	8007924 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80078ac:	2000      	movs	r0, #0
 80078ae:	f000 fdbf 	bl	8008430 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80078b2:	f000 ff55 	bl	8008760 <RadioGetWakeupTime>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7f9 fbaf 	bl	800101c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80078be:	f004 fae9 	bl	800be94 <UTIL_TIMER_GetCurrentTime>
 80078c2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80078c4:	e00d      	b.n	80078e2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80078c6:	2000      	movs	r0, #0
 80078c8:	f000 fe9a 	bl	8008600 <RadioRssi>
 80078cc:	4603      	mov	r3, r0
 80078ce:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80078d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80078d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078d8:	429a      	cmp	r2, r3
 80078da:	dd02      	ble.n	80078e2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80078dc:	2300      	movs	r3, #0
 80078de:	75fb      	strb	r3, [r7, #23]
            break;
 80078e0:	e006      	b.n	80078f0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80078e2:	6938      	ldr	r0, [r7, #16]
 80078e4:	f004 fae8 	bl	800beb8 <UTIL_TIMER_GetElapsedTime>
 80078e8:	4602      	mov	r2, r0
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d8ea      	bhi.n	80078c6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80078f0:	f000 fd97 	bl	8008422 <RadioStandby>

    return status;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	2000      	movs	r0, #0
 8007910:	f002 f9ba 	bl	8009c88 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007914:	f001 ff6f 	bl	80097f6 <SUBGRF_GetRandom>
 8007918:	6078      	str	r0, [r7, #4]

    return rnd;
 800791a:	687b      	ldr	r3, [r7, #4]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	; 0x28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	461a      	mov	r2, r3
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
 8007934:	4613      	mov	r3, r2
 8007936:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007938:	4ab9      	ldr	r2, [pc, #740]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 800793a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800793e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8007940:	f003 f829 	bl	800a996 <RFW_DeInit>
    if( rxContinuous == true )
 8007944:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007950:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007958:	4ab2      	ldr	r2, [pc, #712]	; (8007c24 <RadioSetRxConfig+0x300>)
 800795a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800795e:	7013      	strb	r3, [r2, #0]
 8007960:	e002      	b.n	8007968 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007962:	4bb0      	ldr	r3, [pc, #704]	; (8007c24 <RadioSetRxConfig+0x300>)
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b05      	cmp	r3, #5
 800796c:	d009      	beq.n	8007982 <RadioSetRxConfig+0x5e>
 800796e:	2b05      	cmp	r3, #5
 8007970:	f300 81ca 	bgt.w	8007d08 <RadioSetRxConfig+0x3e4>
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80bf 	beq.w	8007af8 <RadioSetRxConfig+0x1d4>
 800797a:	2b01      	cmp	r3, #1
 800797c:	f000 8124 	beq.w	8007bc8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007980:	e1c2      	b.n	8007d08 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007982:	2001      	movs	r0, #1
 8007984:	f002 f87c 	bl	8009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007988:	4ba5      	ldr	r3, [pc, #660]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007990:	4aa3      	ldr	r2, [pc, #652]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007996:	4ba2      	ldr	r3, [pc, #648]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007998:	2209      	movs	r2, #9
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800799e:	4ba0      	ldr	r3, [pc, #640]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f002 ff28 	bl	800a7fc <SUBGRF_GetFskBandwidthRegValue>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	4b9b      	ldr	r3, [pc, #620]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80079b6:	4b9a      	ldr	r3, [pc, #616]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80079bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	4b97      	ldr	r3, [pc, #604]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079c4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80079c6:	4b96      	ldr	r3, [pc, #600]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80079cc:	4b94      	ldr	r3, [pc, #592]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079ce:	2210      	movs	r2, #16
 80079d0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80079d2:	4b93      	ldr	r3, [pc, #588]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80079d8:	4b91      	ldr	r3, [pc, #580]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079da:	2200      	movs	r2, #0
 80079dc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80079de:	4b91      	ldr	r3, [pc, #580]	; (8007c24 <RadioSetRxConfig+0x300>)
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	4b8f      	ldr	r3, [pc, #572]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079e4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80079e6:	4b8e      	ldr	r3, [pc, #568]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80079ec:	4b8c      	ldr	r3, [pc, #560]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80079f2:	2005      	movs	r0, #5
 80079f4:	f7ff fec2 	bl	800777c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079f8:	488b      	ldr	r0, [pc, #556]	; (8007c28 <RadioSetRxConfig+0x304>)
 80079fa:	f002 fadb 	bl	8009fb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079fe:	488b      	ldr	r0, [pc, #556]	; (8007c2c <RadioSetRxConfig+0x308>)
 8007a00:	f002 fbaa 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007a04:	4a8a      	ldr	r2, [pc, #552]	; (8007c30 <RadioSetRxConfig+0x30c>)
 8007a06:	f107 031c 	add.w	r3, r7, #28
 8007a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a12:	f107 031c 	add.w	r3, r7, #28
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 fe6b 	bl	80096f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007a1c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a20:	f001 feb6 	bl	8009790 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007a24:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007a28:	f000 fe09 	bl	800863e <RadioRead>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a42:	4619      	mov	r1, r3
 8007a44:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007a48:	f000 fde7 	bl	800861a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007a52:	f000 fde2 	bl	800861a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007a56:	f640 009b 	movw	r0, #2203	; 0x89b
 8007a5a:	f000 fdf0 	bl	800863e <RadioRead>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a68:	f023 031c 	bic.w	r3, r3, #28
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a74:	f043 0308 	orr.w	r3, r3, #8
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f640 009b 	movw	r0, #2203	; 0x89b
 8007a80:	f000 fdcb 	bl	800861a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007a84:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007a88:	f000 fdd9 	bl	800863e <RadioRead>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a96:	f023 0318 	bic.w	r3, r3, #24
 8007a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa2:	f043 0318 	orr.w	r3, r3, #24
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007aae:	f000 fdb4 	bl	800861a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007ab2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007ab6:	f000 fdc2 	bl	800863e <RadioRead>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007adc:	f000 fd9d 	bl	800861a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ae2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	4a4b      	ldr	r2, [pc, #300]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007af4:	6093      	str	r3, [r2, #8]
            break;
 8007af6:	e108      	b.n	8007d0a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007af8:	2000      	movs	r0, #0
 8007afa:	f001 ffc1 	bl	8009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007afe:	4b48      	ldr	r3, [pc, #288]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007b06:	4a46      	ldr	r2, [pc, #280]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007b0c:	4b44      	ldr	r3, [pc, #272]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b0e:	220b      	movs	r2, #11
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007b14:	68b8      	ldr	r0, [r7, #8]
 8007b16:	f002 fe71 	bl	800a7fc <SUBGRF_GetFskBandwidthRegValue>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b40      	ldr	r3, [pc, #256]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007b24:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007b2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	4b3b      	ldr	r3, [pc, #236]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b32:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007b34:	4b3a      	ldr	r3, [pc, #232]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b36:	2204      	movs	r2, #4
 8007b38:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007b3a:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b3c:	2218      	movs	r2, #24
 8007b3e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007b40:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007b46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007b4a:	f083 0301 	eor.w	r3, r3, #1
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b54:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007b56:	4b33      	ldr	r3, [pc, #204]	; (8007c24 <RadioSetRxConfig+0x300>)
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	4b31      	ldr	r3, [pc, #196]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b5c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007b5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007b66:	4b2e      	ldr	r3, [pc, #184]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b68:	22f2      	movs	r2, #242	; 0xf2
 8007b6a:	75da      	strb	r2, [r3, #23]
 8007b6c:	e002      	b.n	8007b74 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007b6e:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007b74:	4b2a      	ldr	r3, [pc, #168]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007b7a:	f000 fc52 	bl	8008422 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7ff fdfc 	bl	800777c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b84:	4828      	ldr	r0, [pc, #160]	; (8007c28 <RadioSetRxConfig+0x304>)
 8007b86:	f002 fa15 	bl	8009fb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b8a:	4828      	ldr	r0, [pc, #160]	; (8007c2c <RadioSetRxConfig+0x308>)
 8007b8c:	f002 fae4 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b90:	4a28      	ldr	r2, [pc, #160]	; (8007c34 <RadioSetRxConfig+0x310>)
 8007b92:	f107 0314 	add.w	r3, r7, #20
 8007b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b9e:	f107 0314 	add.w	r3, r7, #20
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fda5 	bl	80096f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007ba8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007bac:	f001 fdf0 	bl	8009790 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007bb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007bc4:	6093      	str	r3, [r2, #8]
            break;
 8007bc6:	e0a0      	b.n	8007d0a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f001 ff59 	bl	8009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007bce:	4b14      	ldr	r3, [pc, #80]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007be0:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <RadioSetRxConfig+0x314>)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	4413      	add	r3, r2
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d105      	bne.n	8007c08 <RadioSetRxConfig+0x2e4>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b0b      	cmp	r3, #11
 8007c00:	d008      	beq.n	8007c14 <RadioSetRxConfig+0x2f0>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d005      	beq.n	8007c14 <RadioSetRxConfig+0x2f0>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d116      	bne.n	8007c3c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b0c      	cmp	r3, #12
 8007c12:	d113      	bne.n	8007c3c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007c14:	4b02      	ldr	r3, [pc, #8]	; (8007c20 <RadioSetRxConfig+0x2fc>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007c1c:	e012      	b.n	8007c44 <RadioSetRxConfig+0x320>
 8007c1e:	bf00      	nop
 8007c20:	20000288 	.word	0x20000288
 8007c24:	20000008 	.word	0x20000008
 8007c28:	200002c0 	.word	0x200002c0
 8007c2c:	20000296 	.word	0x20000296
 8007c30:	0800c61c 	.word	0x0800c61c
 8007c34:	0800c624 	.word	0x0800c624
 8007c38:	0800ca74 	.word	0x0800ca74
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007c3c:	4b35      	ldr	r3, [pc, #212]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007c44:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007c4a:	4b32      	ldr	r3, [pc, #200]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d004      	beq.n	8007c5e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007c54:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007c5a:	2b06      	cmp	r3, #6
 8007c5c:	d10a      	bne.n	8007c74 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007c5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c60:	2b0b      	cmp	r3, #11
 8007c62:	d803      	bhi.n	8007c6c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c66:	220c      	movs	r2, #12
 8007c68:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007c6a:	e006      	b.n	8007c7a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c6c:	4a29      	ldr	r2, [pc, #164]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c70:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007c72:	e002      	b.n	8007c7a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c74:	4a27      	ldr	r2, [pc, #156]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c78:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007c7a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007c7e:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c80:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007c82:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <RadioSetRxConfig+0x3f4>)
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c88:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007c8a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c90:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007c94:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007c9e:	f000 fbc0 	bl	8008422 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f7ff fd6a 	bl	800777c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ca8:	481c      	ldr	r0, [pc, #112]	; (8007d1c <RadioSetRxConfig+0x3f8>)
 8007caa:	f002 f983 	bl	8009fb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cae:	481c      	ldr	r0, [pc, #112]	; (8007d20 <RadioSetRxConfig+0x3fc>)
 8007cb0:	f002 fa52 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 fef0 	bl	8009a9e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007cc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d10d      	bne.n	8007ce4 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007cc8:	f240 7036 	movw	r0, #1846	; 0x736
 8007ccc:	f002 fba0 	bl	800a410 <SUBGRF_ReadRegister>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f023 0304 	bic.w	r3, r3, #4
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f240 7036 	movw	r0, #1846	; 0x736
 8007cde:	f002 fb83 	bl	800a3e8 <SUBGRF_WriteRegister>
 8007ce2:	e00c      	b.n	8007cfe <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007ce4:	f240 7036 	movw	r0, #1846	; 0x736
 8007ce8:	f002 fb92 	bl	800a410 <SUBGRF_ReadRegister>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f043 0304 	orr.w	r3, r3, #4
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f240 7036 	movw	r0, #1846	; 0x736
 8007cfa:	f002 fb75 	bl	800a3e8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <RadioSetRxConfig+0x3f0>)
 8007d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d04:	609a      	str	r2, [r3, #8]
            break;
 8007d06:	e000      	b.n	8007d0a <RadioSetRxConfig+0x3e6>
            break;
 8007d08:	bf00      	nop
    }
}
 8007d0a:	bf00      	nop
 8007d0c:	3728      	adds	r7, #40	; 0x28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000288 	.word	0x20000288
 8007d18:	20000008 	.word	0x20000008
 8007d1c:	200002c0 	.word	0x200002c0
 8007d20:	20000296 	.word	0x20000296

08007d24 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60ba      	str	r2, [r7, #8]
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	460b      	mov	r3, r1
 8007d34:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8007d36:	f002 fe2e 	bl	800a996 <RFW_DeInit>
    switch( modem )
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	f000 80c7 	beq.w	8007ed0 <RadioSetTxConfig+0x1ac>
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	f300 80d6 	bgt.w	8007ef4 <RadioSetTxConfig+0x1d0>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <RadioSetTxConfig+0x2e>
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d059      	beq.n	8007e04 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007d50:	e0d0      	b.n	8007ef4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007d52:	4b74      	ldr	r3, [pc, #464]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007d5a:	4a72      	ldr	r2, [pc, #456]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007d60:	4b70      	ldr	r3, [pc, #448]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d62:	220b      	movs	r2, #11
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f002 fd47 	bl	800a7fc <SUBGRF_GetFskBandwidthRegValue>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b6c      	ldr	r3, [pc, #432]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007d78:	4a6a      	ldr	r2, [pc, #424]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007d7e:	4b69      	ldr	r3, [pc, #420]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007d84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	4b66      	ldr	r3, [pc, #408]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d8c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007d8e:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d90:	2204      	movs	r2, #4
 8007d92:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007d94:	4b63      	ldr	r3, [pc, #396]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d96:	2218      	movs	r2, #24
 8007d98:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007d9a:	4b62      	ldr	r3, [pc, #392]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007da0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007da4:	f083 0301 	eor.w	r3, r3, #1
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b5d      	ldr	r3, [pc, #372]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007dae:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007db0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007db8:	4b5a      	ldr	r3, [pc, #360]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007dba:	22f2      	movs	r2, #242	; 0xf2
 8007dbc:	75da      	strb	r2, [r3, #23]
 8007dbe:	e002      	b.n	8007dc6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007dc0:	4b58      	ldr	r3, [pc, #352]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007dc6:	4b57      	ldr	r3, [pc, #348]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007dcc:	f000 fb29 	bl	8008422 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f7ff fcd3 	bl	800777c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007dd6:	4854      	ldr	r0, [pc, #336]	; (8007f28 <RadioSetTxConfig+0x204>)
 8007dd8:	f002 f8ec 	bl	8009fb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ddc:	4853      	ldr	r0, [pc, #332]	; (8007f2c <RadioSetTxConfig+0x208>)
 8007dde:	f002 f9bb 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007de2:	4a53      	ldr	r2, [pc, #332]	; (8007f30 <RadioSetTxConfig+0x20c>)
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8007df0:	f107 0310 	add.w	r3, r7, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 fc7c 	bl	80096f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dfe:	f001 fcc7 	bl	8009790 <SUBGRF_SetWhiteningSeed>
            break;
 8007e02:	e078      	b.n	8007ef6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007e04:	4b47      	ldr	r3, [pc, #284]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	4b44      	ldr	r3, [pc, #272]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007e16:	4a47      	ldr	r2, [pc, #284]	; (8007f34 <RadioSetTxConfig+0x210>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	4b41      	ldr	r3, [pc, #260]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007e24:	4a3f      	ldr	r2, [pc, #252]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e2a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <RadioSetTxConfig+0x11c>
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b0b      	cmp	r3, #11
 8007e38:	d008      	beq.n	8007e4c <RadioSetTxConfig+0x128>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	2b0c      	cmp	r3, #12
 8007e3e:	d005      	beq.n	8007e4c <RadioSetTxConfig+0x128>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d107      	bne.n	8007e56 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	d104      	bne.n	8007e56 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007e4c:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007e54:	e003      	b.n	8007e5e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007e56:	4b33      	ldr	r3, [pc, #204]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007e5e:	4b31      	ldr	r3, [pc, #196]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007e64:	4b2f      	ldr	r3, [pc, #188]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d004      	beq.n	8007e78 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007e6e:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	d10a      	bne.n	8007e8e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e7a:	2b0b      	cmp	r3, #11
 8007e7c:	d803      	bhi.n	8007e86 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007e7e:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e80:	220c      	movs	r2, #12
 8007e82:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007e84:	e006      	b.n	8007e94 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007e86:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e8a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007e8c:	e002      	b.n	8007e94 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007e8e:	4a25      	ldr	r2, [pc, #148]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e92:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007e94:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007e98:	4b22      	ldr	r3, [pc, #136]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007e9a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007e9c:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <RadioSetTxConfig+0x214>)
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007ea2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007ea4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007ea8:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007eaa:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007eae:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007eb2:	4b1c      	ldr	r3, [pc, #112]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007eb8:	f000 fab3 	bl	8008422 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	f7ff fc5d 	bl	800777c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ec2:	4819      	ldr	r0, [pc, #100]	; (8007f28 <RadioSetTxConfig+0x204>)
 8007ec4:	f002 f876 	bl	8009fb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ec8:	4818      	ldr	r0, [pc, #96]	; (8007f2c <RadioSetTxConfig+0x208>)
 8007eca:	f002 f945 	bl	800a158 <SUBGRF_SetPacketParams>
            break;
 8007ece:	e012      	b.n	8007ef6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007ed0:	2004      	movs	r0, #4
 8007ed2:	f7ff fc53 	bl	800777c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007ee6:	2216      	movs	r2, #22
 8007ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007eec:	480e      	ldr	r0, [pc, #56]	; (8007f28 <RadioSetTxConfig+0x204>)
 8007eee:	f002 f861 	bl	8009fb4 <SUBGRF_SetModulationParams>
            break;
 8007ef2:	e000      	b.n	8007ef6 <RadioSetTxConfig+0x1d2>
            break;
 8007ef4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f002 fb90 	bl	800a620 <SUBGRF_SetRfTxPower>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007f06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007f0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fd54 	bl	800a9be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007f16:	4a03      	ldr	r2, [pc, #12]	; (8007f24 <RadioSetTxConfig+0x200>)
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	6053      	str	r3, [r2, #4]
}
 8007f1c:	bf00      	nop
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000288 	.word	0x20000288
 8007f28:	200002c0 	.word	0x200002c0
 8007f2c:	20000296 	.word	0x20000296
 8007f30:	0800c624 	.word	0x0800c624
 8007f34:	0800ca74 	.word	0x0800ca74
 8007f38:	20000008 	.word	0x20000008

08007f3c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
    return true;
 8007f44:	2301      	movs	r3, #1
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	2b0a      	cmp	r3, #10
 8007f62:	d83e      	bhi.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <RadioGetLoRaBandwidthInHz+0x1c>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	08007fa9 	.word	0x08007fa9
 8007f74:	08007fb9 	.word	0x08007fb9
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007fd1 	.word	0x08007fd1
 8007f80:	08007fd7 	.word	0x08007fd7
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007fe3 	.word	0x08007fe3
 8007f8c:	08007fa1 	.word	0x08007fa1
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fc1 	.word	0x08007fc1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007f98:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007f9c:	60fb      	str	r3, [r7, #12]
        break;
 8007f9e:	e020      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007fa0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007fa4:	60fb      	str	r3, [r7, #12]
        break;
 8007fa6:	e01c      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007fa8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007fac:	60fb      	str	r3, [r7, #12]
        break;
 8007fae:	e018      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007fb0:	f245 1361 	movw	r3, #20833	; 0x5161
 8007fb4:	60fb      	str	r3, [r7, #12]
        break;
 8007fb6:	e014      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007fb8:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007fbc:	60fb      	str	r3, [r7, #12]
        break;
 8007fbe:	e010      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007fc0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007fc4:	60fb      	str	r3, [r7, #12]
        break;
 8007fc6:	e00c      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007fc8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007fcc:	60fb      	str	r3, [r7, #12]
        break;
 8007fce:	e008      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007fd2:	60fb      	str	r3, [r7, #12]
        break;
 8007fd4:	e005      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007fd6:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007fd8:	60fb      	str	r3, [r7, #12]
        break;
 8007fda:	e002      	b.n	8007fe2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007fde:	60fb      	str	r3, [r7, #12]
        break;
 8007fe0:	bf00      	nop
    }

    return bandwidthInHz;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	0001e848 	.word	0x0001e848
 8007ff4:	0003d090 	.word	0x0003d090
 8007ff8:	0007a120 	.word	0x0007a120

08007ffc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	4603      	mov	r3, r0
 800800c:	70fb      	strb	r3, [r7, #3]
 800800e:	460b      	mov	r3, r1
 8008010:	803b      	strh	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8008016:	883b      	ldrh	r3, [r7, #0]
 8008018:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800801a:	78ba      	ldrb	r2, [r7, #2]
 800801c:	f082 0201 	eor.w	r2, r2, #1
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	2a00      	cmp	r2, #0
 8008024:	d001      	beq.n	800802a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008026:	2208      	movs	r2, #8
 8008028:	e000      	b.n	800802c <RadioGetGfskTimeOnAirNumerator+0x30>
 800802a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800802c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800802e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008032:	7c3b      	ldrb	r3, [r7, #16]
 8008034:	7d39      	ldrb	r1, [r7, #20]
 8008036:	2900      	cmp	r1, #0
 8008038:	d001      	beq.n	800803e <RadioGetGfskTimeOnAirNumerator+0x42>
 800803a:	2102      	movs	r1, #2
 800803c:	e000      	b.n	8008040 <RadioGetGfskTimeOnAirNumerator+0x44>
 800803e:	2100      	movs	r1, #0
 8008040:	440b      	add	r3, r1
 8008042:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008044:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008050:	b480      	push	{r7}
 8008052:	b08b      	sub	sp, #44	; 0x2c
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4611      	mov	r1, r2
 800805c:	461a      	mov	r2, r3
 800805e:	460b      	mov	r3, r1
 8008060:	71fb      	strb	r3, [r7, #7]
 8008062:	4613      	mov	r3, r2
 8008064:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	3304      	adds	r3, #4
 800806a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b05      	cmp	r3, #5
 8008076:	d002      	beq.n	800807e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b06      	cmp	r3, #6
 800807c:	d104      	bne.n	8008088 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800807e:	88bb      	ldrh	r3, [r7, #4]
 8008080:	2b0b      	cmp	r3, #11
 8008082:	d801      	bhi.n	8008088 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008084:	230c      	movs	r3, #12
 8008086:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b0b      	cmp	r3, #11
 8008092:	d008      	beq.n	80080a6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b0c      	cmp	r3, #12
 8008098:	d005      	beq.n	80080a6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d105      	bne.n	80080ac <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b0c      	cmp	r3, #12
 80080a4:	d102      	bne.n	80080ac <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80080b0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80080b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d001      	beq.n	80080be <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80080ba:	2210      	movs	r2, #16
 80080bc:	e000      	b.n	80080c0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80080be:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080c0:	4413      	add	r3, r2
 80080c2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80080c8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80080ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d001      	beq.n	80080d6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80080d2:	2200      	movs	r2, #0
 80080d4:	e000      	b.n	80080d8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80080d6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80080d8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80080da:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b06      	cmp	r3, #6
 80080e0:	d803      	bhi.n	80080ea <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	623b      	str	r3, [r7, #32]
 80080e8:	e00e      	b.n	8008108 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	3308      	adds	r3, #8
 80080ee:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	3b02      	subs	r3, #2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	623b      	str	r3, [r7, #32]
 8008100:	e002      	b.n	8008108 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b00      	cmp	r3, #0
 800810c:	da01      	bge.n	8008112 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	4413      	add	r3, r2
 8008118:	1e5a      	subs	r2, r3, #1
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	fb03 f202 	mul.w	r2, r3, r2
 8008126:	88bb      	ldrh	r3, [r7, #4]
 8008128:	4413      	add	r3, r2
    int32_t intermediate =
 800812a:	330c      	adds	r3, #12
 800812c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d802      	bhi.n	800813a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	3302      	adds	r3, #2
 8008138:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3b02      	subs	r3, #2
 8008144:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008148:	4618      	mov	r0, r3
 800814a:	372c      	adds	r7, #44	; 0x2c
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
	...

08008154 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af04      	add	r7, sp, #16
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
 8008164:	4613      	mov	r3, r2
 8008166:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800816c:	2301      	movs	r3, #1
 800816e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <RadioTimeOnAir+0x28>
 8008176:	2b01      	cmp	r3, #1
 8008178:	d017      	beq.n	80081aa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800817a:	e035      	b.n	80081e8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800817c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008180:	8c3a      	ldrh	r2, [r7, #32]
 8008182:	7bb9      	ldrb	r1, [r7, #14]
 8008184:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ff32 	bl	8007ffc <RadioGetGfskTimeOnAirNumerator>
 8008198:	4603      	mov	r3, r0
 800819a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	613b      	str	r3, [r7, #16]
        break;
 80081a8:	e01e      	b.n	80081e8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80081aa:	8c39      	ldrh	r1, [r7, #32]
 80081ac:	7bba      	ldrb	r2, [r7, #14]
 80081ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	460b      	mov	r3, r1
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f7ff ff43 	bl	8008050 <RadioGetLoRaTimeOnAirNumerator>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80081d6:	4a0a      	ldr	r2, [pc, #40]	; (8008200 <RadioTimeOnAir+0xac>)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4413      	add	r3, r2
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff feb6 	bl	8007f50 <RadioGetLoRaBandwidthInHz>
 80081e4:	6138      	str	r0, [r7, #16]
        break;
 80081e6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4413      	add	r3, r2
 80081ee:	1e5a      	subs	r2, r3, #1
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	0800ca74 	.word	0x0800ca74

08008204 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008210:	2300      	movs	r3, #0
 8008212:	2200      	movs	r2, #0
 8008214:	f240 2101 	movw	r1, #513	; 0x201
 8008218:	f240 2001 	movw	r0, #513	; 0x201
 800821c:	f001 fd34 	bl	8009c88 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008220:	4b71      	ldr	r3, [pc, #452]	; (80083e8 <RadioSend+0x1e4>)
 8008222:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008226:	2101      	movs	r1, #1
 8008228:	4618      	mov	r0, r3
 800822a:	f002 f9d1 	bl	800a5d0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800822e:	4b6e      	ldr	r3, [pc, #440]	; (80083e8 <RadioSend+0x1e4>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d112      	bne.n	800825c <RadioSend+0x58>
 8008236:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <RadioSend+0x1e4>)
 8008238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800823c:	2b06      	cmp	r3, #6
 800823e:	d10d      	bne.n	800825c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008240:	f640 0089 	movw	r0, #2185	; 0x889
 8008244:	f002 f8e4 	bl	800a410 <SUBGRF_ReadRegister>
 8008248:	4603      	mov	r3, r0
 800824a:	f023 0304 	bic.w	r3, r3, #4
 800824e:	b2db      	uxtb	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	f640 0089 	movw	r0, #2185	; 0x889
 8008256:	f002 f8c7 	bl	800a3e8 <SUBGRF_WriteRegister>
 800825a:	e00c      	b.n	8008276 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800825c:	f640 0089 	movw	r0, #2185	; 0x889
 8008260:	f002 f8d6 	bl	800a410 <SUBGRF_ReadRegister>
 8008264:	4603      	mov	r3, r0
 8008266:	f043 0304 	orr.w	r3, r3, #4
 800826a:	b2db      	uxtb	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	f640 0089 	movw	r0, #2185	; 0x889
 8008272:	f002 f8b9 	bl	800a3e8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8008276:	4b5c      	ldr	r3, [pc, #368]	; (80083e8 <RadioSend+0x1e4>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b04      	cmp	r3, #4
 800827c:	f200 80a7 	bhi.w	80083ce <RadioSend+0x1ca>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <RadioSend+0x84>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082b7 	.word	0x080082b7
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082b7 	.word	0x080082b7
 8008294:	08008317 	.word	0x08008317
 8008298:	08008337 	.word	0x08008337
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800829c:	4a52      	ldr	r2, [pc, #328]	; (80083e8 <RadioSend+0x1e4>)
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082a2:	4852      	ldr	r0, [pc, #328]	; (80083ec <RadioSend+0x1e8>)
 80082a4:	f001 ff58 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	2200      	movs	r2, #0
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa0c 	bl	80096cc <SUBGRF_SendPayload>
            break;
 80082b4:	e08c      	b.n	80083d0 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80082b6:	f002 fb74 	bl	800a9a2 <RFW_Is_Init>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d11d      	bne.n	80082fc <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80082c0:	f107 020d 	add.w	r2, r7, #13
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f002 fb82 	bl	800a9d2 <RFW_TransmitInit>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10c      	bne.n	80082ee <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80082d4:	7b7a      	ldrb	r2, [r7, #13]
 80082d6:	4b44      	ldr	r3, [pc, #272]	; (80083e8 <RadioSend+0x1e4>)
 80082d8:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082da:	4844      	ldr	r0, [pc, #272]	; (80083ec <RadioSend+0x1e8>)
 80082dc:	f001 ff3c 	bl	800a158 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80082e0:	7b7b      	ldrb	r3, [r7, #13]
 80082e2:	2200      	movs	r2, #0
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 f9f0 	bl	80096cc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80082ec:	e070      	b.n	80083d0 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80082ee:	4b40      	ldr	r3, [pc, #256]	; (80083f0 <RadioSend+0x1ec>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	2100      	movs	r1, #0
 80082f4:	2002      	movs	r0, #2
 80082f6:	f003 feab 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
 80082fa:	e072      	b.n	80083e2 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80082fc:	4a3a      	ldr	r2, [pc, #232]	; (80083e8 <RadioSend+0x1e4>)
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008302:	483a      	ldr	r0, [pc, #232]	; (80083ec <RadioSend+0x1e8>)
 8008304:	f001 ff28 	bl	800a158 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	2200      	movs	r2, #0
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f9dc 	bl	80096cc <SUBGRF_SendPayload>
            break;
 8008314:	e05c      	b.n	80083d0 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008316:	4b34      	ldr	r3, [pc, #208]	; (80083e8 <RadioSend+0x1e4>)
 8008318:	2202      	movs	r2, #2
 800831a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800831c:	4a32      	ldr	r2, [pc, #200]	; (80083e8 <RadioSend+0x1e4>)
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008322:	4832      	ldr	r0, [pc, #200]	; (80083ec <RadioSend+0x1e8>)
 8008324:	f001 ff18 	bl	800a158 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	2200      	movs	r2, #0
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f9cc 	bl	80096cc <SUBGRF_SendPayload>
            break;
 8008334:	e04c      	b.n	80083d0 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	461a      	mov	r2, r3
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	482d      	ldr	r0, [pc, #180]	; (80083f4 <RadioSend+0x1f0>)
 800833e:	f000 fcbc 	bl	8008cba <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008342:	4b29      	ldr	r3, [pc, #164]	; (80083e8 <RadioSend+0x1e4>)
 8008344:	2202      	movs	r2, #2
 8008346:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	3301      	adds	r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <RadioSend+0x1e4>)
 8008350:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008352:	4826      	ldr	r0, [pc, #152]	; (80083ec <RadioSend+0x1e8>)
 8008354:	f001 ff00 	bl	800a158 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008358:	2100      	movs	r1, #0
 800835a:	20f1      	movs	r0, #241	; 0xf1
 800835c:	f000 f95d 	bl	800861a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008360:	2100      	movs	r1, #0
 8008362:	20f0      	movs	r0, #240	; 0xf0
 8008364:	f000 f959 	bl	800861a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008368:	4b1f      	ldr	r3, [pc, #124]	; (80083e8 <RadioSend+0x1e4>)
 800836a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836c:	2b64      	cmp	r3, #100	; 0x64
 800836e:	d108      	bne.n	8008382 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008370:	2170      	movs	r1, #112	; 0x70
 8008372:	20f3      	movs	r0, #243	; 0xf3
 8008374:	f000 f951 	bl	800861a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008378:	211d      	movs	r1, #29
 800837a:	20f2      	movs	r0, #242	; 0xf2
 800837c:	f000 f94d 	bl	800861a <RadioWrite>
 8008380:	e007      	b.n	8008392 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008382:	21e1      	movs	r1, #225	; 0xe1
 8008384:	20f3      	movs	r0, #243	; 0xf3
 8008386:	f000 f948 	bl	800861a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800838a:	2104      	movs	r1, #4
 800838c:	20f2      	movs	r0, #242	; 0xf2
 800838e:	f000 f944 	bl	800861a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	b29b      	uxth	r3, r3
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	b29b      	uxth	r3, r3
 800839a:	3302      	adds	r3, #2
 800839c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800839e:	89fb      	ldrh	r3, [r7, #14]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	4619      	mov	r1, r3
 80083a8:	20f4      	movs	r0, #244	; 0xf4
 80083aa:	f000 f936 	bl	800861a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80083ae:	89fb      	ldrh	r3, [r7, #14]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	4619      	mov	r1, r3
 80083b4:	20f5      	movs	r0, #245	; 0xf5
 80083b6:	f000 f930 	bl	800861a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	3301      	adds	r3, #1
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80083c4:	4619      	mov	r1, r3
 80083c6:	480b      	ldr	r0, [pc, #44]	; (80083f4 <RadioSend+0x1f0>)
 80083c8:	f001 f980 	bl	80096cc <SUBGRF_SendPayload>
            break;
 80083cc:	e000      	b.n	80083d0 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80083ce:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <RadioSend+0x1e4>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	4619      	mov	r1, r3
 80083d6:	4808      	ldr	r0, [pc, #32]	; (80083f8 <RadioSend+0x1f4>)
 80083d8:	f003 fcb2 	bl	800bd40 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80083dc:	4806      	ldr	r0, [pc, #24]	; (80083f8 <RadioSend+0x1f4>)
 80083de:	f003 fbd1 	bl	800bb84 <UTIL_TIMER_Start>
}
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000288 	.word	0x20000288
 80083ec:	20000296 	.word	0x20000296
 80083f0:	0800c62c 	.word	0x0800c62c
 80083f4:	20000184 	.word	0x20000184
 80083f8:	200002e4 	.word	0x200002e4

080083fc <RadioSleep>:

static void RadioSleep( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008402:	2300      	movs	r3, #0
 8008404:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008406:	793b      	ldrb	r3, [r7, #4]
 8008408:	f043 0304 	orr.w	r3, r3, #4
 800840c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800840e:	7938      	ldrb	r0, [r7, #4]
 8008410:	f001 fa38 	bl	8009884 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008414:	2002      	movs	r0, #2
 8008416:	f7f8 fe01 	bl	800101c <HAL_Delay>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <RadioStandby>:

static void RadioStandby( void )
{
 8008422:	b580      	push	{r7, lr}
 8008424:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008426:	2000      	movs	r0, #0
 8008428:	f001 fa5e 	bl	80098e8 <SUBGRF_SetStandby>
}
 800842c:	bf00      	nop
 800842e:	bd80      	pop	{r7, pc}

08008430 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8008438:	f002 fab3 	bl	800a9a2 <RFW_Is_Init>
 800843c:	4603      	mov	r3, r0
 800843e:	2b01      	cmp	r3, #1
 8008440:	d102      	bne.n	8008448 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008442:	f002 fad6 	bl	800a9f2 <RFW_ReceiveInit>
 8008446:	e007      	b.n	8008458 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008448:	2300      	movs	r3, #0
 800844a:	2200      	movs	r2, #0
 800844c:	f240 2162 	movw	r1, #610	; 0x262
 8008450:	f240 2062 	movw	r0, #610	; 0x262
 8008454:	f001 fc18 	bl	8009c88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d006      	beq.n	800846c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4811      	ldr	r0, [pc, #68]	; (80084a8 <RadioRx+0x78>)
 8008462:	f003 fc6d 	bl	800bd40 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008466:	4810      	ldr	r0, [pc, #64]	; (80084a8 <RadioRx+0x78>)
 8008468:	f003 fb8c 	bl	800bb84 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <RadioRx+0x7c>)
 800846e:	2200      	movs	r2, #0
 8008470:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008472:	4b0e      	ldr	r3, [pc, #56]	; (80084ac <RadioRx+0x7c>)
 8008474:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f002 f8a8 	bl	800a5d0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <RadioRx+0x7c>)
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008488:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800848c:	f001 fa68 	bl	8009960 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008490:	e005      	b.n	800849e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008492:	4b06      	ldr	r3, [pc, #24]	; (80084ac <RadioRx+0x7c>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	019b      	lsls	r3, r3, #6
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fa61 	bl	8009960 <SUBGRF_SetRx>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200002fc 	.word	0x200002fc
 80084ac:	20000288 	.word	0x20000288

080084b0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80084b8:	f002 fa73 	bl	800a9a2 <RFW_Is_Init>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d102      	bne.n	80084c8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80084c2:	f002 fa96 	bl	800a9f2 <RFW_ReceiveInit>
 80084c6:	e007      	b.n	80084d8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80084c8:	2300      	movs	r3, #0
 80084ca:	2200      	movs	r2, #0
 80084cc:	f240 2162 	movw	r1, #610	; 0x262
 80084d0:	f240 2062 	movw	r0, #610	; 0x262
 80084d4:	f001 fbd8 	bl	8009c88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d006      	beq.n	80084ec <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4811      	ldr	r0, [pc, #68]	; (8008528 <RadioRxBoosted+0x78>)
 80084e2:	f003 fc2d 	bl	800bd40 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80084e6:	4810      	ldr	r0, [pc, #64]	; (8008528 <RadioRxBoosted+0x78>)
 80084e8:	f003 fb4c 	bl	800bb84 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <RadioRxBoosted+0x7c>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <RadioRxBoosted+0x7c>)
 80084f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f002 f868 	bl	800a5d0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <RadioRxBoosted+0x7c>)
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008508:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800850c:	f001 fa48 	bl	80099a0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008510:	e005      	b.n	800851e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <RadioRxBoosted+0x7c>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	019b      	lsls	r3, r3, #6
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fa41 	bl	80099a0 <SUBGRF_SetRxBoosted>
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200002fc 	.word	0x200002fc
 800852c:	20000288 	.word	0x20000288

08008530 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	005a      	lsls	r2, r3, #1
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	4413      	add	r3, r2
 8008542:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <RadioSetRxDutyCycle+0x44>)
 8008544:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800854e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008552:	f001 fb99 	bl	8009c88 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008556:	4b07      	ldr	r3, [pc, #28]	; (8008574 <RadioSetRxDutyCycle+0x44>)
 8008558:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f002 f836 	bl	800a5d0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 fa3e 	bl	80099e8 <SUBGRF_SetRxDutyCycle>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000288 	.word	0x20000288

08008578 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800857c:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <RadioStartCad+0x2c>)
 800857e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f002 f823 	bl	800a5d0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800858a:	2300      	movs	r3, #0
 800858c:	2200      	movs	r2, #0
 800858e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008592:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008596:	f001 fb77 	bl	8009c88 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800859a:	f001 fa51 	bl	8009a40 <SUBGRF_SetCad>
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000288 	.word	0x20000288

080085a8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
 80085b4:	4613      	mov	r3, r2
 80085b6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80085b8:	883b      	ldrh	r3, [r7, #0]
 80085ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fbbb 	bl	8009d40 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80085ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f002 f826 	bl	800a620 <SUBGRF_SetRfTxPower>
 80085d4:	4603      	mov	r3, r0
 80085d6:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	2101      	movs	r1, #1
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fff7 	bl	800a5d0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80085e2:	f001 fa3b 	bl	8009a5c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	4804      	ldr	r0, [pc, #16]	; (80085fc <RadioSetTxContinuousWave+0x54>)
 80085ea:	f003 fba9 	bl	800bd40 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80085ee:	4803      	ldr	r0, [pc, #12]	; (80085fc <RadioSetTxContinuousWave+0x54>)
 80085f0:	f003 fac8 	bl	800bb84 <UTIL_TIMER_Start>
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	200002e4 	.word	0x200002e4

08008600 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800860a:	f001 fe5a 	bl	800a2c2 <SUBGRF_GetRssiInst>
 800860e:	4603      	mov	r3, r0
 8008610:	b21b      	sxth	r3, r3
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	4603      	mov	r3, r0
 8008622:	460a      	mov	r2, r1
 8008624:	80fb      	strh	r3, [r7, #6]
 8008626:	4613      	mov	r3, r2
 8008628:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800862a:	797a      	ldrb	r2, [r7, #5]
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f001 fed9 	bl	800a3e8 <SUBGRF_WriteRegister>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	4603      	mov	r3, r0
 8008646:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	4618      	mov	r0, r3
 800864c:	f001 fee0 	bl	800a410 <SUBGRF_ReadRegister>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	4603      	mov	r3, r0
 8008662:	6039      	str	r1, [r7, #0]
 8008664:	80fb      	strh	r3, [r7, #6]
 8008666:	4613      	mov	r3, r2
 8008668:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800866a:	797b      	ldrb	r3, [r7, #5]
 800866c:	b29a      	uxth	r2, r3
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fee0 	bl	800a438 <SUBGRF_WriteRegisters>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	80fb      	strh	r3, [r7, #6]
 800868c:	4613      	mov	r3, r2
 800868e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008690:	797b      	ldrb	r3, [r7, #5]
 8008692:	b29a      	uxth	r2, r3
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f001 feef 	bl	800a47c <SUBGRF_ReadRegisters>
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	460a      	mov	r2, r1
 80086b2:	71fb      	strb	r3, [r7, #7]
 80086b4:	4613      	mov	r3, r2
 80086b6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d10a      	bne.n	80086d4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80086be:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <RadioSetMaxPayloadLength+0x50>)
 80086c0:	79bb      	ldrb	r3, [r7, #6]
 80086c2:	7013      	strb	r3, [r2, #0]
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <RadioSetMaxPayloadLength+0x50>)
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <RadioSetMaxPayloadLength+0x54>)
 80086ca:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086cc:	480c      	ldr	r0, [pc, #48]	; (8008700 <RadioSetMaxPayloadLength+0x58>)
 80086ce:	f001 fd43 	bl	800a158 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80086d2:	e00d      	b.n	80086f0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <RadioSetMaxPayloadLength+0x54>)
 80086d6:	7d5b      	ldrb	r3, [r3, #21]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d109      	bne.n	80086f0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80086dc:	4a06      	ldr	r2, [pc, #24]	; (80086f8 <RadioSetMaxPayloadLength+0x50>)
 80086de:	79bb      	ldrb	r3, [r7, #6]
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <RadioSetMaxPayloadLength+0x50>)
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <RadioSetMaxPayloadLength+0x54>)
 80086e8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086ea:	4805      	ldr	r0, [pc, #20]	; (8008700 <RadioSetMaxPayloadLength+0x58>)
 80086ec:	f001 fd34 	bl	800a158 <SUBGRF_SetPacketParams>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20000008 	.word	0x20000008
 80086fc:	20000288 	.word	0x20000288
 8008700:	20000296 	.word	0x20000296

08008704 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800870e:	4a13      	ldr	r2, [pc, #76]	; (800875c <RadioSetPublicNetwork+0x58>)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	7313      	strb	r3, [r2, #12]
 8008714:	4b11      	ldr	r3, [pc, #68]	; (800875c <RadioSetPublicNetwork+0x58>)
 8008716:	7b1a      	ldrb	r2, [r3, #12]
 8008718:	4b10      	ldr	r3, [pc, #64]	; (800875c <RadioSetPublicNetwork+0x58>)
 800871a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800871c:	2001      	movs	r0, #1
 800871e:	f7ff f82d 	bl	800777c <RadioSetModem>
    if( enable == true )
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008728:	2134      	movs	r1, #52	; 0x34
 800872a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800872e:	f001 fe5b 	bl	800a3e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008732:	2144      	movs	r1, #68	; 0x44
 8008734:	f240 7041 	movw	r0, #1857	; 0x741
 8008738:	f001 fe56 	bl	800a3e8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800873c:	e009      	b.n	8008752 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800873e:	2114      	movs	r1, #20
 8008740:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008744:	f001 fe50 	bl	800a3e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008748:	2124      	movs	r1, #36	; 0x24
 800874a:	f240 7041 	movw	r0, #1857	; 0x741
 800874e:	f001 fe4b 	bl	800a3e8 <SUBGRF_WriteRegister>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000288 	.word	0x20000288

08008760 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008764:	f001 ff90 	bl	800a688 <SUBGRF_GetRadioWakeUpTime>
 8008768:	4603      	mov	r3, r0
 800876a:	3303      	adds	r3, #3
}
 800876c:	4618      	mov	r0, r3
 800876e:	bd80      	pop	{r7, pc}

08008770 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008778:	f000 f80e 	bl	8008798 <RadioOnTxTimeoutProcess>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800878c:	f000 f818 	bl	80087c0 <RadioOnRxTimeoutProcess>
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800879c:	4b07      	ldr	r3, [pc, #28]	; (80087bc <RadioOnTxTimeoutProcess+0x24>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d008      	beq.n	80087b6 <RadioOnTxTimeoutProcess+0x1e>
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <RadioOnTxTimeoutProcess+0x24>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80087ae:	4b03      	ldr	r3, [pc, #12]	; (80087bc <RadioOnTxTimeoutProcess+0x24>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4798      	blx	r3
    }
}
 80087b6:	bf00      	nop
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000284 	.word	0x20000284

080087c0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <RadioOnRxTimeoutProcess+0x24>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <RadioOnRxTimeoutProcess+0x1e>
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <RadioOnRxTimeoutProcess+0x24>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80087d6:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <RadioOnRxTimeoutProcess+0x24>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4798      	blx	r3
    }
}
 80087de:	bf00      	nop
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000284 	.word	0x20000284

080087e8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80087f2:	4a05      	ldr	r2, [pc, #20]	; (8008808 <RadioOnDioIrq+0x20>)
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80087fa:	f000 f807 	bl	800880c <RadioIrqProcess>
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000288 	.word	0x20000288

0800880c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800881a:	4ba8      	ldr	r3, [pc, #672]	; (8008abc <RadioIrqProcess+0x2b0>)
 800881c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008824:	f000 810c 	beq.w	8008a40 <RadioIrqProcess+0x234>
 8008828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882c:	f300 81e8 	bgt.w	8008c00 <RadioIrqProcess+0x3f4>
 8008830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008834:	f000 80f0 	beq.w	8008a18 <RadioIrqProcess+0x20c>
 8008838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883c:	f300 81e0 	bgt.w	8008c00 <RadioIrqProcess+0x3f4>
 8008840:	2b80      	cmp	r3, #128	; 0x80
 8008842:	f000 80d5 	beq.w	80089f0 <RadioIrqProcess+0x1e4>
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	f300 81da 	bgt.w	8008c00 <RadioIrqProcess+0x3f4>
 800884c:	2b20      	cmp	r3, #32
 800884e:	dc49      	bgt.n	80088e4 <RadioIrqProcess+0xd8>
 8008850:	2b00      	cmp	r3, #0
 8008852:	f340 81d5 	ble.w	8008c00 <RadioIrqProcess+0x3f4>
 8008856:	3b01      	subs	r3, #1
 8008858:	2b1f      	cmp	r3, #31
 800885a:	f200 81d1 	bhi.w	8008c00 <RadioIrqProcess+0x3f4>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <RadioIrqProcess+0x58>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	080088ed 	.word	0x080088ed
 8008868:	08008927 	.word	0x08008927
 800886c:	08008c01 	.word	0x08008c01
 8008870:	08008add 	.word	0x08008add
 8008874:	08008c01 	.word	0x08008c01
 8008878:	08008c01 	.word	0x08008c01
 800887c:	08008c01 	.word	0x08008c01
 8008880:	08008b59 	.word	0x08008b59
 8008884:	08008c01 	.word	0x08008c01
 8008888:	08008c01 	.word	0x08008c01
 800888c:	08008c01 	.word	0x08008c01
 8008890:	08008c01 	.word	0x08008c01
 8008894:	08008c01 	.word	0x08008c01
 8008898:	08008c01 	.word	0x08008c01
 800889c:	08008c01 	.word	0x08008c01
 80088a0:	08008b75 	.word	0x08008b75
 80088a4:	08008c01 	.word	0x08008c01
 80088a8:	08008c01 	.word	0x08008c01
 80088ac:	08008c01 	.word	0x08008c01
 80088b0:	08008c01 	.word	0x08008c01
 80088b4:	08008c01 	.word	0x08008c01
 80088b8:	08008c01 	.word	0x08008c01
 80088bc:	08008c01 	.word	0x08008c01
 80088c0:	08008c01 	.word	0x08008c01
 80088c4:	08008c01 	.word	0x08008c01
 80088c8:	08008c01 	.word	0x08008c01
 80088cc:	08008c01 	.word	0x08008c01
 80088d0:	08008c01 	.word	0x08008c01
 80088d4:	08008c01 	.word	0x08008c01
 80088d8:	08008c01 	.word	0x08008c01
 80088dc:	08008c01 	.word	0x08008c01
 80088e0:	08008b83 	.word	0x08008b83
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	f000 816d 	beq.w	8008bc4 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80088ea:	e189      	b.n	8008c00 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80088ec:	4874      	ldr	r0, [pc, #464]	; (8008ac0 <RadioIrqProcess+0x2b4>)
 80088ee:	f003 f9b7 	bl	800bc60 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80088f2:	2000      	movs	r0, #0
 80088f4:	f000 fff8 	bl	80098e8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80088f8:	f002 f85a 	bl	800a9b0 <RFW_Is_LongPacketModeEnabled>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008902:	f002 f87e 	bl	800aa02 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008906:	4b6f      	ldr	r3, [pc, #444]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 817a 	beq.w	8008c04 <RadioIrqProcess+0x3f8>
 8008910:	4b6c      	ldr	r3, [pc, #432]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 8174 	beq.w	8008c04 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 800891c:	4b69      	ldr	r3, [pc, #420]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4798      	blx	r3
        break;
 8008924:	e16e      	b.n	8008c04 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8008926:	4868      	ldr	r0, [pc, #416]	; (8008ac8 <RadioIrqProcess+0x2bc>)
 8008928:	f003 f99a 	bl	800bc60 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800892c:	4b63      	ldr	r3, [pc, #396]	; (8008abc <RadioIrqProcess+0x2b0>)
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	f083 0301 	eor.w	r3, r3, #1
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d014      	beq.n	8008964 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800893a:	2000      	movs	r0, #0
 800893c:	f000 ffd4 	bl	80098e8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008940:	2100      	movs	r1, #0
 8008942:	f640 1002 	movw	r0, #2306	; 0x902
 8008946:	f001 fd4f 	bl	800a3e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800894a:	f640 1044 	movw	r0, #2372	; 0x944
 800894e:	f001 fd5f 	bl	800a410 <SUBGRF_ReadRegister>
 8008952:	4603      	mov	r3, r0
 8008954:	f043 0302 	orr.w	r3, r3, #2
 8008958:	b2db      	uxtb	r3, r3
 800895a:	4619      	mov	r1, r3
 800895c:	f640 1044 	movw	r0, #2372	; 0x944
 8008960:	f001 fd42 	bl	800a3e8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008964:	1dfb      	adds	r3, r7, #7
 8008966:	22ff      	movs	r2, #255	; 0xff
 8008968:	4619      	mov	r1, r3
 800896a:	4858      	ldr	r0, [pc, #352]	; (8008acc <RadioIrqProcess+0x2c0>)
 800896c:	f000 fe8c 	bl	8009688 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008970:	4857      	ldr	r0, [pc, #348]	; (8008ad0 <RadioIrqProcess+0x2c4>)
 8008972:	f001 fce7 	bl	800a344 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008976:	4b53      	ldr	r3, [pc, #332]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d036      	beq.n	80089ec <RadioIrqProcess+0x1e0>
 800897e:	4b51      	ldr	r3, [pc, #324]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d031      	beq.n	80089ec <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8008988:	4b4c      	ldr	r3, [pc, #304]	; (8008abc <RadioIrqProcess+0x2b0>)
 800898a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800898e:	2b01      	cmp	r3, #1
 8008990:	d10e      	bne.n	80089b0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8008992:	4b4c      	ldr	r3, [pc, #304]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689c      	ldr	r4, [r3, #8]
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	b299      	uxth	r1, r3
 800899c:	4b47      	ldr	r3, [pc, #284]	; (8008abc <RadioIrqProcess+0x2b0>)
 800899e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	4b45      	ldr	r3, [pc, #276]	; (8008abc <RadioIrqProcess+0x2b0>)
 80089a6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80089aa:	4848      	ldr	r0, [pc, #288]	; (8008acc <RadioIrqProcess+0x2c0>)
 80089ac:	47a0      	blx	r4
                break;
 80089ae:	e01e      	b.n	80089ee <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80089b0:	4b42      	ldr	r3, [pc, #264]	; (8008abc <RadioIrqProcess+0x2b0>)
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	463a      	mov	r2, r7
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 ff47 	bl	800a84c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80089be:	4b41      	ldr	r3, [pc, #260]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689c      	ldr	r4, [r3, #8]
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	b299      	uxth	r1, r3
 80089c8:	4b3c      	ldr	r3, [pc, #240]	; (8008abc <RadioIrqProcess+0x2b0>)
 80089ca:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80089ce:	b218      	sxth	r0, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80089d6:	4a3f      	ldr	r2, [pc, #252]	; (8008ad4 <RadioIrqProcess+0x2c8>)
 80089d8:	fb82 c203 	smull	ip, r2, r2, r3
 80089dc:	1192      	asrs	r2, r2, #6
 80089de:	17db      	asrs	r3, r3, #31
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b25b      	sxtb	r3, r3
 80089e4:	4602      	mov	r2, r0
 80089e6:	4839      	ldr	r0, [pc, #228]	; (8008acc <RadioIrqProcess+0x2c0>)
 80089e8:	47a0      	blx	r4
                break;
 80089ea:	e000      	b.n	80089ee <RadioIrqProcess+0x1e2>
        }
 80089ec:	bf00      	nop
        break;
 80089ee:	e118      	b.n	8008c22 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 80089f0:	2000      	movs	r0, #0
 80089f2:	f000 ff79 	bl	80098e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80089f6:	4b33      	ldr	r3, [pc, #204]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8104 	beq.w	8008c08 <RadioIrqProcess+0x3fc>
 8008a00:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 80fe 	beq.w	8008c08 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8008a0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	2000      	movs	r0, #0
 8008a14:	4798      	blx	r3
        break;
 8008a16:	e0f7      	b.n	8008c08 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f000 ff65 	bl	80098e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008a1e:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80f2 	beq.w	8008c0c <RadioIrqProcess+0x400>
 8008a28:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80ec 	beq.w	8008c0c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8008a34:	4b23      	ldr	r3, [pc, #140]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	4798      	blx	r3
        break;
 8008a3e:	e0e5      	b.n	8008c0c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8008a40:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <RadioIrqProcess+0x2cc>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	2100      	movs	r1, #0
 8008a46:	2002      	movs	r0, #2
 8008a48:	f003 fb02 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008a4c:	f000 fe02 	bl	8009654 <SUBGRF_GetOperatingMode>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d115      	bne.n	8008a82 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8008a56:	481a      	ldr	r0, [pc, #104]	; (8008ac0 <RadioIrqProcess+0x2b4>)
 8008a58:	f003 f902 	bl	800bc60 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	f000 ff43 	bl	80098e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008a62:	4b18      	ldr	r3, [pc, #96]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80d2 	beq.w	8008c10 <RadioIrqProcess+0x404>
 8008a6c:	4b15      	ldr	r3, [pc, #84]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80cc 	beq.w	8008c10 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8008a78:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4798      	blx	r3
        break;
 8008a80:	e0c6      	b.n	8008c10 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008a82:	f000 fde7 	bl	8009654 <SUBGRF_GetOperatingMode>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	f040 80c1 	bne.w	8008c10 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8008a8e:	480e      	ldr	r0, [pc, #56]	; (8008ac8 <RadioIrqProcess+0x2bc>)
 8008a90:	f003 f8e6 	bl	800bc60 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008a94:	2000      	movs	r0, #0
 8008a96:	f000 ff27 	bl	80098e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 80b6 	beq.w	8008c10 <RadioIrqProcess+0x404>
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80b0 	beq.w	8008c10 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <RadioIrqProcess+0x2b8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	4798      	blx	r3
        break;
 8008ab8:	e0aa      	b.n	8008c10 <RadioIrqProcess+0x404>
 8008aba:	bf00      	nop
 8008abc:	20000288 	.word	0x20000288
 8008ac0:	200002e4 	.word	0x200002e4
 8008ac4:	20000284 	.word	0x20000284
 8008ac8:	200002fc 	.word	0x200002fc
 8008acc:	20000184 	.word	0x20000184
 8008ad0:	200002ac 	.word	0x200002ac
 8008ad4:	10624dd3 	.word	0x10624dd3
 8008ad8:	0800c644 	.word	0x0800c644
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008adc:	4b53      	ldr	r3, [pc, #332]	; (8008c2c <RadioIrqProcess+0x420>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	2002      	movs	r0, #2
 8008ae4:	f003 fab4 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008ae8:	4b51      	ldr	r3, [pc, #324]	; (8008c30 <RadioIrqProcess+0x424>)
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8091 	beq.w	8008c14 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8008af2:	4a50      	ldr	r2, [pc, #320]	; (8008c34 <RadioIrqProcess+0x428>)
 8008af4:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <RadioIrqProcess+0x424>)
 8008af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	f640 1003 	movw	r0, #2307	; 0x903
 8008b02:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8008b04:	4a4b      	ldr	r2, [pc, #300]	; (8008c34 <RadioIrqProcess+0x428>)
 8008b06:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <RadioIrqProcess+0x424>)
 8008b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	4619      	mov	r1, r3
 8008b10:	f640 1004 	movw	r0, #2308	; 0x904
 8008b14:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8008b16:	4a47      	ldr	r2, [pc, #284]	; (8008c34 <RadioIrqProcess+0x428>)
 8008b18:	4b45      	ldr	r3, [pc, #276]	; (8008c30 <RadioIrqProcess+0x424>)
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f640 1005 	movw	r0, #2309	; 0x905
 8008b24:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8008b26:	4c43      	ldr	r4, [pc, #268]	; (8008c34 <RadioIrqProcess+0x428>)
 8008b28:	4b43      	ldr	r3, [pc, #268]	; (8008c38 <RadioIrqProcess+0x42c>)
 8008b2a:	f640 1002 	movw	r0, #2306	; 0x902
 8008b2e:	4798      	blx	r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f640 1002 	movw	r0, #2306	; 0x902
 8008b3e:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8008b40:	4b3b      	ldr	r3, [pc, #236]	; (8008c30 <RadioIrqProcess+0x424>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f240 2162 	movw	r1, #610	; 0x262
 8008b4e:	f240 2062 	movw	r0, #610	; 0x262
 8008b52:	f001 f899 	bl	8009c88 <SUBGRF_SetDioIrqParams>
        break;
 8008b56:	e05d      	b.n	8008c14 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8008b58:	4b38      	ldr	r3, [pc, #224]	; (8008c3c <RadioIrqProcess+0x430>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	2002      	movs	r0, #2
 8008b60:	f003 fa76 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8008b64:	f001 ff1d 	bl	800a9a2 <RFW_Is_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d154      	bne.n	8008c18 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8008b6e:	f001 ff4e 	bl	800aa0e <RFW_ReceivePayload>
        break;
 8008b72:	e051      	b.n	8008c18 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8008b74:	4b32      	ldr	r3, [pc, #200]	; (8008c40 <RadioIrqProcess+0x434>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	2100      	movs	r1, #0
 8008b7a:	2002      	movs	r0, #2
 8008b7c:	f003 fa68 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008b80:	e04f      	b.n	8008c22 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8008b82:	4830      	ldr	r0, [pc, #192]	; (8008c44 <RadioIrqProcess+0x438>)
 8008b84:	f003 f86c 	bl	800bc60 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008b88:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <RadioIrqProcess+0x424>)
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	f083 0301 	eor.w	r3, r3, #1
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8008b96:	2000      	movs	r0, #0
 8008b98:	f000 fea6 	bl	80098e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008b9c:	4b2a      	ldr	r3, [pc, #168]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d03b      	beq.n	8008c1c <RadioIrqProcess+0x410>
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d036      	beq.n	8008c1c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8008bae:	4b26      	ldr	r3, [pc, #152]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008bb6:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <RadioIrqProcess+0x440>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	2100      	movs	r1, #0
 8008bbc:	2002      	movs	r0, #2
 8008bbe:	f003 fa47 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008bc2:	e02b      	b.n	8008c1c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008bc4:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <RadioIrqProcess+0x444>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	2100      	movs	r1, #0
 8008bca:	2002      	movs	r0, #2
 8008bcc:	f003 fa40 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008bd0:	4b17      	ldr	r3, [pc, #92]	; (8008c30 <RadioIrqProcess+0x424>)
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	f083 0301 	eor.w	r3, r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8008bde:	2000      	movs	r0, #0
 8008be0:	f000 fe82 	bl	80098e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008be4:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d019      	beq.n	8008c20 <RadioIrqProcess+0x414>
 8008bec:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d014      	beq.n	8008c20 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <RadioIrqProcess+0x43c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	4798      	blx	r3
        break;
 8008bfe:	e00f      	b.n	8008c20 <RadioIrqProcess+0x414>
        break;
 8008c00:	bf00      	nop
 8008c02:	e00e      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c04:	bf00      	nop
 8008c06:	e00c      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e00a      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c0c:	bf00      	nop
 8008c0e:	e008      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c10:	bf00      	nop
 8008c12:	e006      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c14:	bf00      	nop
 8008c16:	e004      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c18:	bf00      	nop
 8008c1a:	e002      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c1c:	bf00      	nop
 8008c1e:	e000      	b.n	8008c22 <RadioIrqProcess+0x416>
        break;
 8008c20:	bf00      	nop
    }
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd90      	pop	{r4, r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800c658 	.word	0x0800c658
 8008c30:	20000288 	.word	0x20000288
 8008c34:	0800861b 	.word	0x0800861b
 8008c38:	0800863f 	.word	0x0800863f
 8008c3c:	0800c664 	.word	0x0800c664
 8008c40:	0800c670 	.word	0x0800c670
 8008c44:	200002fc 	.word	0x200002fc
 8008c48:	20000284 	.word	0x20000284
 8008c4c:	0800c67c 	.word	0x0800c67c
 8008c50:	0800c688 	.word	0x0800c688

08008c54 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008c58:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <RadioTxPrbs+0x2c>)
 8008c5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008c5e:	2101      	movs	r1, #1
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 fcb5 	bl	800a5d0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008c66:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <RadioTxPrbs+0x30>)
 8008c68:	212d      	movs	r1, #45	; 0x2d
 8008c6a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008c6e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008c70:	f000 fefd 	bl	8009a6e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008c74:	4804      	ldr	r0, [pc, #16]	; (8008c88 <RadioTxPrbs+0x34>)
 8008c76:	f000 fe53 	bl	8009920 <SUBGRF_SetTx>
}
 8008c7a:	bf00      	nop
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000288 	.word	0x20000288
 8008c84:	0800861b 	.word	0x0800861b
 8008c88:	000fffff 	.word	0x000fffff

08008c8c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 fcc0 	bl	800a620 <SUBGRF_SetRfTxPower>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fc91 	bl	800a5d0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008cae:	f000 fed5 	bl	8009a5c <SUBGRF_SetTxContinuousWave>
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b089      	sub	sp, #36	; 0x24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61bb      	str	r3, [r7, #24]
 8008cd4:	e011      	b.n	8008cfa <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	4413      	add	r3, r2
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	440b      	add	r3, r1
 8008ce4:	43d2      	mvns	r2, r2
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	dbe9      	blt.n	8008cd6 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008d02:	2300      	movs	r3, #0
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e049      	b.n	8008d9c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	425a      	negs	r2, r3
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	f002 0207 	and.w	r2, r2, #7
 8008d14:	bf58      	it	pl
 8008d16:	4253      	negpl	r3, r2
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f1c3 0307 	rsb	r3, r3, #7
 8008d1e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da00      	bge.n	8008d28 <payload_integration+0x6e>
 8008d26:	3307      	adds	r3, #7
 8008d28:	10db      	asrs	r3, r3, #3
 8008d2a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	425a      	negs	r2, r3
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	f002 0207 	and.w	r2, r2, #7
 8008d3a:	bf58      	it	pl
 8008d3c:	4253      	negpl	r3, r2
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f1c3 0307 	rsb	r3, r3, #7
 8008d44:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da00      	bge.n	8008d50 <payload_integration+0x96>
 8008d4e:	3307      	adds	r3, #7
 8008d50:	10db      	asrs	r3, r3, #3
 8008d52:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008d54:	7dbb      	ldrb	r3, [r7, #22]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4413      	add	r3, r2
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	fa42 f303 	asr.w	r3, r2, r3
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008d6c:	7ffa      	ldrb	r2, [r7, #31]
 8008d6e:	7cfb      	ldrb	r3, [r7, #19]
 8008d70:	4053      	eors	r3, r2
 8008d72:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008d74:	7d3b      	ldrb	r3, [r7, #20]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b25a      	sxtb	r2, r3
 8008d7e:	7ff9      	ldrb	r1, [r7, #31]
 8008d80:	7d7b      	ldrb	r3, [r7, #21]
 8008d82:	fa01 f303 	lsl.w	r3, r1, r3
 8008d86:	b25b      	sxtb	r3, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b259      	sxtb	r1, r3
 8008d8c:	7d3b      	ldrb	r3, [r7, #20]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	b2ca      	uxtb	r2, r1
 8008d94:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	dbb0      	blt.n	8008d08 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008da6:	7ffb      	ldrb	r3, [r7, #31]
 8008da8:	01db      	lsls	r3, r3, #7
 8008daa:	b25a      	sxtb	r2, r3
 8008dac:	7ffb      	ldrb	r3, [r7, #31]
 8008dae:	019b      	lsls	r3, r3, #6
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	7ffa      	ldrb	r2, [r7, #31]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	d101      	bne.n	8008dc0 <payload_integration+0x106>
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	e000      	b.n	8008dc2 <payload_integration+0x108>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	b259      	sxtb	r1, r3
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	b2ca      	uxtb	r2, r1
 8008dce:	701a      	strb	r2, [r3, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	3724      	adds	r7, #36	; 0x24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bc80      	pop	{r7}
 8008dd8:	4770      	bx	lr
	...

08008ddc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008df0:	2300      	movs	r3, #0
 8008df2:	623b      	str	r3, [r7, #32]
 8008df4:	2300      	movs	r3, #0
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008df8:	f001 fdcd 	bl	800a996 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bf14      	ite	ne
 8008e0c:	2301      	movne	r3, #1
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4ba3      	ldr	r3, [pc, #652]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008e14:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <RadioSetRxGenericConfig+0x48>
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f000 80dc 	beq.w	8008fda <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008e22:	e194      	b.n	800914e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <RadioSetRxGenericConfig+0x58>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e38:	e18a      	b.n	8009150 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	7f9b      	ldrb	r3, [r3, #30]
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d902      	bls.n	8008e48 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e46:	e183      	b.n	8009150 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	6919      	ldr	r1, [r3, #16]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	7f9b      	ldrb	r3, [r3, #30]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	f107 0320 	add.w	r3, r7, #32
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 f9a8 	bl	800b1ac <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bf14      	ite	ne
 8008e64:	2301      	movne	r3, #1
 8008e66:	2300      	moveq	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fe08 	bl	8009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e70:	4b8b      	ldr	r3, [pc, #556]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	4a88      	ldr	r2, [pc, #544]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008e7e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008e86:	4b86      	ldr	r3, [pc, #536]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 fcb3 	bl	800a7fc <SUBGRF_GetFskBandwidthRegValue>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4b81      	ldr	r3, [pc, #516]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008ea0:	4b7f      	ldr	r3, [pc, #508]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b7b      	ldr	r3, [pc, #492]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008eb2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	7fda      	ldrb	r2, [r3, #31]
 8008eb8:	4b79      	ldr	r3, [pc, #484]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008eba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	7f9b      	ldrb	r3, [r3, #30]
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	4b76      	ldr	r3, [pc, #472]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008ec6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008ece:	4b74      	ldr	r3, [pc, #464]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008ed0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d105      	bne.n	8008ee8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4b6f      	ldr	r3, [pc, #444]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008ee4:	759a      	strb	r2, [r3, #22]
 8008ee6:	e00b      	b.n	8008f00 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d103      	bne.n	8008efa <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008ef2:	4b6b      	ldr	r3, [pc, #428]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008ef4:	22ff      	movs	r2, #255	; 0xff
 8008ef6:	759a      	strb	r2, [r3, #22]
 8008ef8:	e002      	b.n	8008f00 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008efa:	4b69      	ldr	r3, [pc, #420]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d004      	beq.n	8008f14 <RadioSetRxGenericConfig+0x138>
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d12d      	bne.n	8008f70 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f1a:	2bf1      	cmp	r3, #241	; 0xf1
 8008f1c:	d00c      	beq.n	8008f38 <RadioSetRxGenericConfig+0x15c>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f24:	2bf2      	cmp	r3, #242	; 0xf2
 8008f26:	d007      	beq.n	8008f38 <RadioSetRxGenericConfig+0x15c>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d002      	beq.n	8008f38 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f36:	e10b      	b.n	8009150 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008f40:	4b58      	ldr	r3, [pc, #352]	; (80090a4 <RadioSetRxGenericConfig+0x2c8>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4a57      	ldr	r2, [pc, #348]	; (80090a8 <RadioSetRxGenericConfig+0x2cc>)
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fd16 	bl	800a97c <RFW_Init>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <RadioSetRxGenericConfig+0x180>
            return -1;
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f5a:	e0f9      	b.n	8009150 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008f5c:	4b50      	ldr	r3, [pc, #320]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008f62:	4b4f      	ldr	r3, [pc, #316]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f64:	2201      	movs	r2, #1
 8008f66:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008f68:	4b4d      	ldr	r3, [pc, #308]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	755a      	strb	r2, [r3, #21]
        {
 8008f6e:	e00e      	b.n	8008f8e <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008f76:	4b4a      	ldr	r3, [pc, #296]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f78:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008f80:	4b47      	ldr	r3, [pc, #284]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f82:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008f8a:	4b45      	ldr	r3, [pc, #276]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008f8c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008f8e:	f7ff fa48 	bl	8008422 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008f92:	2000      	movs	r0, #0
 8008f94:	f7fe fbf2 	bl	800777c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f98:	4844      	ldr	r0, [pc, #272]	; (80090ac <RadioSetRxGenericConfig+0x2d0>)
 8008f9a:	f001 f80b 	bl	8009fb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f9e:	4844      	ldr	r0, [pc, #272]	; (80090b0 <RadioSetRxGenericConfig+0x2d4>)
 8008fa0:	f001 f8da 	bl	800a158 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008fa4:	f107 0320 	add.w	r3, r7, #32
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fba2 	bl	80096f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	8b9b      	ldrh	r3, [r3, #28]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fbec 	bl	8009790 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	8b1b      	ldrh	r3, [r3, #24]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fbc7 	bl	8009750 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008fc8:	fb03 f202 	mul.w	r2, r3, r2
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd4:	4a32      	ldr	r2, [pc, #200]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8008fd6:	6093      	str	r3, [r2, #8]
        break;
 8008fd8:	e0b9      	b.n	800914e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe6:	e0b3      	b.n	8009150 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d104      	bne.n	8008ffc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ffa:	e002      	b.n	8009002 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008ffc:	23ff      	movs	r3, #255	; 0xff
 8008ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	bf14      	ite	ne
 800900a:	2301      	movne	r3, #1
 800900c:	2300      	moveq	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fd35 	bl	8009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fd3f 	bl	8009a9e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009020:	4b1f      	ldr	r3, [pc, #124]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800902e:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800903a:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 800903c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009046:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009048:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009052:	2b02      	cmp	r3, #2
 8009054:	d010      	beq.n	8009078 <RadioSetRxGenericConfig+0x29c>
 8009056:	2b02      	cmp	r3, #2
 8009058:	dc2c      	bgt.n	80090b4 <RadioSetRxGenericConfig+0x2d8>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <RadioSetRxGenericConfig+0x288>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d005      	beq.n	800906e <RadioSetRxGenericConfig+0x292>
            break;
 8009062:	e027      	b.n	80090b4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009064:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800906c:	e023      	b.n	80090b6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009076:	e01e      	b.n	80090b6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800907e:	2b0b      	cmp	r3, #11
 8009080:	d004      	beq.n	800908c <RadioSetRxGenericConfig+0x2b0>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d104      	bne.n	8009096 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800908c:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009094:	e00f      	b.n	80090b6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009096:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <RadioSetRxGenericConfig+0x2c4>)
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800909e:	e00a      	b.n	80090b6 <RadioSetRxGenericConfig+0x2da>
 80090a0:	20000288 	.word	0x20000288
 80090a4:	20000284 	.word	0x20000284
 80090a8:	200002fc 	.word	0x200002fc
 80090ac:	200002c0 	.word	0x200002c0
 80090b0:	20000296 	.word	0x20000296
            break;
 80090b4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80090b6:	4b28      	ldr	r3, [pc, #160]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80090c0:	4b25      	ldr	r3, [pc, #148]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80090ca:	4b23      	ldr	r3, [pc, #140]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090cc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80090ce:	4a22      	ldr	r2, [pc, #136]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090d4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80090dc:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090de:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 80090ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80090ee:	f7ff f998 	bl	8008422 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80090f2:	2001      	movs	r0, #1
 80090f4:	f7fe fb42 	bl	800777c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090f8:	4818      	ldr	r0, [pc, #96]	; (800915c <RadioSetRxGenericConfig+0x380>)
 80090fa:	f000 ff5b 	bl	8009fb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090fe:	4818      	ldr	r0, [pc, #96]	; (8009160 <RadioSetRxGenericConfig+0x384>)
 8009100:	f001 f82a 	bl	800a158 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009104:	4b14      	ldr	r3, [pc, #80]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 8009106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800910a:	2b01      	cmp	r3, #1
 800910c:	d10d      	bne.n	800912a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800910e:	f240 7036 	movw	r0, #1846	; 0x736
 8009112:	f001 f97d 	bl	800a410 <SUBGRF_ReadRegister>
 8009116:	4603      	mov	r3, r0
 8009118:	f023 0304 	bic.w	r3, r3, #4
 800911c:	b2db      	uxtb	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	f240 7036 	movw	r0, #1846	; 0x736
 8009124:	f001 f960 	bl	800a3e8 <SUBGRF_WriteRegister>
 8009128:	e00c      	b.n	8009144 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800912a:	f240 7036 	movw	r0, #1846	; 0x736
 800912e:	f001 f96f 	bl	800a410 <SUBGRF_ReadRegister>
 8009132:	4603      	mov	r3, r0
 8009134:	f043 0304 	orr.w	r3, r3, #4
 8009138:	b2db      	uxtb	r3, r3
 800913a:	4619      	mov	r1, r3
 800913c:	f240 7036 	movw	r0, #1846	; 0x736
 8009140:	f001 f952 	bl	800a3e8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <RadioSetRxGenericConfig+0x37c>)
 8009146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800914a:	609a      	str	r2, [r3, #8]
        break;
 800914c:	bf00      	nop
    }
    return status;
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009150:	4618      	mov	r0, r3
 8009152:	3730      	adds	r7, #48	; 0x30
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20000288 	.word	0x20000288
 800915c:	200002c0 	.word	0x200002c0
 8009160:	20000296 	.word	0x20000296

08009164 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	; 0x38
 8009168:	af00      	add	r7, sp, #0
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	4613      	mov	r3, r2
 8009174:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009176:	2300      	movs	r3, #0
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917a:	2300      	movs	r3, #0
 800917c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800917e:	f001 fc0a 	bl	800a996 <RFW_DeInit>
    switch( modem )
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b03      	cmp	r3, #3
 8009186:	f200 8204 	bhi.w	8009592 <RadioSetTxGenericConfig+0x42e>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <RadioSetTxGenericConfig+0x2c>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	08009315 	.word	0x08009315
 8009194:	0800945d 	.word	0x0800945d
 8009198:	08009555 	.word	0x08009555
 800919c:	080091a1 	.word	0x080091a1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	7c9b      	ldrb	r3, [r3, #18]
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d902      	bls.n	80091ae <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80091a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ac:	e206      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6899      	ldr	r1, [r3, #8]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	7c9b      	ldrb	r3, [r3, #18]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 fff5 	bl	800b1ac <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ce:	e1f5      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80091d8:	4293      	cmp	r3, r2
 80091da:	d813      	bhi.n	8009204 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80091dc:	2302      	movs	r3, #2
 80091de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80091e2:	4b99      	ldr	r3, [pc, #612]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80091e4:	2203      	movs	r2, #3
 80091e6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80091e8:	4b97      	ldr	r3, [pc, #604]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80091ea:	2203      	movs	r2, #3
 80091ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a94      	ldr	r2, [pc, #592]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80091f6:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	7cda      	ldrb	r2, [r3, #19]
 80091fc:	4b92      	ldr	r3, [pc, #584]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80091fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009202:	e017      	b.n	8009234 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8009204:	2300      	movs	r3, #0
 8009206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800920a:	4b8f      	ldr	r3, [pc, #572]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800920c:	2200      	movs	r2, #0
 800920e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009210:	4b8d      	ldr	r3, [pc, #564]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a8a      	ldr	r2, [pc, #552]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800921e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	7cda      	ldrb	r2, [r3, #19]
 8009224:	4b88      	ldr	r3, [pc, #544]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	4a85      	ldr	r2, [pc, #532]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009232:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	b29b      	uxth	r3, r3
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	b29a      	uxth	r2, r3
 800923e:	4b82      	ldr	r3, [pc, #520]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009240:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009242:	4b81      	ldr	r3, [pc, #516]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009244:	2204      	movs	r2, #4
 8009246:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	7c9b      	ldrb	r3, [r3, #18]
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	4b7d      	ldr	r3, [pc, #500]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009252:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009254:	4b7c      	ldr	r3, [pc, #496]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009256:	2200      	movs	r2, #0
 8009258:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	7d9b      	ldrb	r3, [r3, #22]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d003      	beq.n	800926a <RadioSetTxGenericConfig+0x106>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	7d1b      	ldrb	r3, [r3, #20]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d12b      	bne.n	80092c2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	7d5b      	ldrb	r3, [r3, #21]
 800926e:	2bf1      	cmp	r3, #241	; 0xf1
 8009270:	d00a      	beq.n	8009288 <RadioSetTxGenericConfig+0x124>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	7d5b      	ldrb	r3, [r3, #21]
 8009276:	2bf2      	cmp	r3, #242	; 0xf2
 8009278:	d006      	beq.n	8009288 <RadioSetTxGenericConfig+0x124>
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	7d5b      	ldrb	r3, [r3, #21]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d002      	beq.n	8009288 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009286:	e199      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009292:	4b6e      	ldr	r3, [pc, #440]	; (800944c <RadioSetTxGenericConfig+0x2e8>)
 8009294:	6819      	ldr	r1, [r3, #0]
 8009296:	f107 0320 	add.w	r3, r7, #32
 800929a:	4a6d      	ldr	r2, [pc, #436]	; (8009450 <RadioSetTxGenericConfig+0x2ec>)
 800929c:	4618      	mov	r0, r3
 800929e:	f001 fb6d 	bl	800a97c <RFW_Init>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80092a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092ac:	e186      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80092ae:	4b66      	ldr	r3, [pc, #408]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80092b4:	4b64      	ldr	r3, [pc, #400]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80092ba:	4b63      	ldr	r3, [pc, #396]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092bc:	2200      	movs	r2, #0
 80092be:	755a      	strb	r2, [r3, #21]
        {
 80092c0:	e00b      	b.n	80092da <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	7d5a      	ldrb	r2, [r3, #21]
 80092c6:	4b60      	ldr	r3, [pc, #384]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092c8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	7d9a      	ldrb	r2, [r3, #22]
 80092ce:	4b5e      	ldr	r3, [pc, #376]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092d0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	7d1a      	ldrb	r2, [r3, #20]
 80092d6:	4b5c      	ldr	r3, [pc, #368]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80092d8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80092da:	f7ff f8a2 	bl	8008422 <RadioStandby>
        RadioSetModem( radio_modem );
 80092de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fa4a 	bl	800777c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092e8:	485a      	ldr	r0, [pc, #360]	; (8009454 <RadioSetTxGenericConfig+0x2f0>)
 80092ea:	f000 fe63 	bl	8009fb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80092ee:	485a      	ldr	r0, [pc, #360]	; (8009458 <RadioSetTxGenericConfig+0x2f4>)
 80092f0:	f000 ff32 	bl	800a158 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80092f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f9fa 	bl	80096f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	8a1b      	ldrh	r3, [r3, #16]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fa44 	bl	8009790 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	899b      	ldrh	r3, [r3, #12]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fa1f 	bl	8009750 <SUBGRF_SetCrcPolynomial>
        break;
 8009312:	e13f      	b.n	8009594 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800931c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009320:	e14c      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	7c9b      	ldrb	r3, [r3, #18]
 8009326:	2b08      	cmp	r3, #8
 8009328:	d902      	bls.n	8009330 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800932e:	e145      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6899      	ldr	r1, [r3, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7c9b      	ldrb	r3, [r3, #18]
 8009338:	b29a      	uxth	r2, r3
 800933a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800933e:	4618      	mov	r0, r3
 8009340:	f001 ff34 	bl	800b1ac <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009344:	4b40      	ldr	r3, [pc, #256]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a3d      	ldr	r2, [pc, #244]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009352:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	7cda      	ldrb	r2, [r3, #19]
 8009358:	4b3b      	ldr	r3, [pc, #236]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800935a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	4a39      	ldr	r2, [pc, #228]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009364:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009366:	4b38      	ldr	r3, [pc, #224]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009368:	2200      	movs	r2, #0
 800936a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	b29b      	uxth	r3, r3
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	b29a      	uxth	r2, r3
 8009376:	4b34      	ldr	r3, [pc, #208]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009378:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800937a:	4b33      	ldr	r3, [pc, #204]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800937c:	2204      	movs	r2, #4
 800937e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	7c9b      	ldrb	r3, [r3, #18]
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	b2da      	uxtb	r2, r3
 8009388:	4b2f      	ldr	r3, [pc, #188]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800938a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800938c:	4b2e      	ldr	r3, [pc, #184]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800938e:	2200      	movs	r2, #0
 8009390:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	7d9b      	ldrb	r3, [r3, #22]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d003      	beq.n	80093a2 <RadioSetTxGenericConfig+0x23e>
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	7d1b      	ldrb	r3, [r3, #20]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d12a      	bne.n	80093f8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	7d5b      	ldrb	r3, [r3, #21]
 80093a6:	2bf1      	cmp	r3, #241	; 0xf1
 80093a8:	d00a      	beq.n	80093c0 <RadioSetTxGenericConfig+0x25c>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	7d5b      	ldrb	r3, [r3, #21]
 80093ae:	2bf2      	cmp	r3, #242	; 0xf2
 80093b0:	d006      	beq.n	80093c0 <RadioSetTxGenericConfig+0x25c>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	7d5b      	ldrb	r3, [r3, #21]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d002      	beq.n	80093c0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093be:	e0fd      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80093c0:	2301      	movs	r3, #1
 80093c2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80093c8:	4b20      	ldr	r3, [pc, #128]	; (800944c <RadioSetTxGenericConfig+0x2e8>)
 80093ca:	6819      	ldr	r1, [r3, #0]
 80093cc:	f107 0314 	add.w	r3, r7, #20
 80093d0:	4a1f      	ldr	r2, [pc, #124]	; (8009450 <RadioSetTxGenericConfig+0x2ec>)
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fad2 	bl	800a97c <RFW_Init>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80093de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093e2:	e0eb      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80093ea:	4b17      	ldr	r3, [pc, #92]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	755a      	strb	r2, [r3, #21]
        {
 80093f6:	e00b      	b.n	8009410 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	7d5a      	ldrb	r2, [r3, #21]
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 80093fe:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	7d9a      	ldrb	r2, [r3, #22]
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 8009406:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	7d1a      	ldrb	r2, [r3, #20]
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <RadioSetTxGenericConfig+0x2e4>)
 800940e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009410:	f7ff f807 	bl	8008422 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009414:	2000      	movs	r0, #0
 8009416:	f7fe f9b1 	bl	800777c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800941a:	480e      	ldr	r0, [pc, #56]	; (8009454 <RadioSetTxGenericConfig+0x2f0>)
 800941c:	f000 fdca 	bl	8009fb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009420:	480d      	ldr	r0, [pc, #52]	; (8009458 <RadioSetTxGenericConfig+0x2f4>)
 8009422:	f000 fe99 	bl	800a158 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f961 	bl	80096f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	8a1b      	ldrh	r3, [r3, #16]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f9ab 	bl	8009790 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	899b      	ldrh	r3, [r3, #12]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f986 	bl	8009750 <SUBGRF_SetCrcPolynomial>
        break;
 8009444:	e0a6      	b.n	8009594 <RadioSetTxGenericConfig+0x430>
 8009446:	bf00      	nop
 8009448:	20000288 	.word	0x20000288
 800944c:	20000284 	.word	0x20000284
 8009450:	200002e4 	.word	0x200002e4
 8009454:	200002c0 	.word	0x200002c0
 8009458:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800945c:	4b59      	ldr	r3, [pc, #356]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	781a      	ldrb	r2, [r3, #0]
 8009468:	4b56      	ldr	r3, [pc, #344]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 800946a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	785a      	ldrb	r2, [r3, #1]
 8009472:	4b54      	ldr	r3, [pc, #336]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 8009474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	789a      	ldrb	r2, [r3, #2]
 800947c:	4b51      	ldr	r3, [pc, #324]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 800947e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	78db      	ldrb	r3, [r3, #3]
 8009486:	2b02      	cmp	r3, #2
 8009488:	d010      	beq.n	80094ac <RadioSetTxGenericConfig+0x348>
 800948a:	2b02      	cmp	r3, #2
 800948c:	dc20      	bgt.n	80094d0 <RadioSetTxGenericConfig+0x36c>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <RadioSetTxGenericConfig+0x334>
 8009492:	2b01      	cmp	r3, #1
 8009494:	d005      	beq.n	80094a2 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8009496:	e01b      	b.n	80094d0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009498:	4b4a      	ldr	r3, [pc, #296]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80094a0:	e017      	b.n	80094d2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80094a2:	4b48      	ldr	r3, [pc, #288]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80094aa:	e012      	b.n	80094d2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b0b      	cmp	r3, #11
 80094b2:	d003      	beq.n	80094bc <RadioSetTxGenericConfig+0x358>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b0c      	cmp	r3, #12
 80094ba:	d104      	bne.n	80094c6 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80094bc:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80094c4:	e005      	b.n	80094d2 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80094c6:	4b3f      	ldr	r3, [pc, #252]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80094ce:	e000      	b.n	80094d2 <RadioSetTxGenericConfig+0x36e>
            break;
 80094d0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80094d2:	4b3c      	ldr	r3, [pc, #240]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	889a      	ldrh	r2, [r3, #4]
 80094dc:	4b39      	ldr	r3, [pc, #228]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094de:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	799a      	ldrb	r2, [r3, #6]
 80094e4:	4b37      	ldr	r3, [pc, #220]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094e6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	79da      	ldrb	r2, [r3, #7]
 80094ec:	4b35      	ldr	r3, [pc, #212]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094ee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	7a1a      	ldrb	r2, [r3, #8]
 80094f6:	4b33      	ldr	r3, [pc, #204]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80094f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80094fc:	f7fe ff91 	bl	8008422 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009500:	2001      	movs	r0, #1
 8009502:	f7fe f93b 	bl	800777c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009506:	4830      	ldr	r0, [pc, #192]	; (80095c8 <RadioSetTxGenericConfig+0x464>)
 8009508:	f000 fd54 	bl	8009fb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800950c:	482f      	ldr	r0, [pc, #188]	; (80095cc <RadioSetTxGenericConfig+0x468>)
 800950e:	f000 fe23 	bl	800a158 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009512:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 8009514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009518:	2b06      	cmp	r3, #6
 800951a:	d10d      	bne.n	8009538 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800951c:	f640 0089 	movw	r0, #2185	; 0x889
 8009520:	f000 ff76 	bl	800a410 <SUBGRF_ReadRegister>
 8009524:	4603      	mov	r3, r0
 8009526:	f023 0304 	bic.w	r3, r3, #4
 800952a:	b2db      	uxtb	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	f640 0089 	movw	r0, #2185	; 0x889
 8009532:	f000 ff59 	bl	800a3e8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8009536:	e02d      	b.n	8009594 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009538:	f640 0089 	movw	r0, #2185	; 0x889
 800953c:	f000 ff68 	bl	800a410 <SUBGRF_ReadRegister>
 8009540:	4603      	mov	r3, r0
 8009542:	f043 0304 	orr.w	r3, r3, #4
 8009546:	b2db      	uxtb	r3, r3
 8009548:	4619      	mov	r1, r3
 800954a:	f640 0089 	movw	r0, #2185	; 0x889
 800954e:	f000 ff4b 	bl	800a3e8 <SUBGRF_WriteRegister>
        break;
 8009552:	e01f      	b.n	8009594 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d004      	beq.n	8009566 <RadioSetTxGenericConfig+0x402>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009564:	d902      	bls.n	800956c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800956a:	e027      	b.n	80095bc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800956c:	2003      	movs	r0, #3
 800956e:	f7fe f905 	bl	800777c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 8009574:	2202      	movs	r2, #2
 8009576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a11      	ldr	r2, [pc, #68]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 8009580:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009582:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 8009584:	2216      	movs	r2, #22
 8009586:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800958a:	480f      	ldr	r0, [pc, #60]	; (80095c8 <RadioSetTxGenericConfig+0x464>)
 800958c:	f000 fd12 	bl	8009fb4 <SUBGRF_SetModulationParams>
        break;
 8009590:	e000      	b.n	8009594 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009592:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009598:	4618      	mov	r0, r3
 800959a:	f001 f841 	bl	800a620 <SUBGRF_SetRfTxPower>
 800959e:	4603      	mov	r3, r0
 80095a0:	461a      	mov	r2, r3
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80095a4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80095aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 fa05 	bl	800a9be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80095b4:	4a03      	ldr	r2, [pc, #12]	; (80095c4 <RadioSetTxGenericConfig+0x460>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6053      	str	r3, [r2, #4]
    return 0;
 80095ba:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3738      	adds	r7, #56	; 0x38
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000288 	.word	0x20000288
 80095c8:	200002c0 	.word	0x200002c0
 80095cc:	20000296 	.word	0x20000296

080095d0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80095de:	4a1a      	ldr	r2, [pc, #104]	; (8009648 <SUBGRF_Init+0x78>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80095e4:	f7f7 fc54 	bl	8000e90 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80095e8:	2002      	movs	r0, #2
 80095ea:	f001 f8e5 	bl	800a7b8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80095ee:	4b17      	ldr	r3, [pc, #92]	; (800964c <SUBGRF_Init+0x7c>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80095f4:	2000      	movs	r0, #0
 80095f6:	f000 f977 	bl	80098e8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80095fa:	f001 fd15 	bl	800b028 <RBI_IsTCXO>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b01      	cmp	r3, #1
 8009602:	d10e      	bne.n	8009622 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009604:	2140      	movs	r1, #64	; 0x40
 8009606:	2001      	movs	r0, #1
 8009608:	f000 fb78 	bl	8009cfc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800960c:	2100      	movs	r1, #0
 800960e:	f640 1011 	movw	r0, #2321	; 0x911
 8009612:	f000 fee9 	bl	800a3e8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009616:	237f      	movs	r3, #127	; 0x7f
 8009618:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800961a:	7b38      	ldrb	r0, [r7, #12]
 800961c:	f000 fa85 	bl	8009b2a <SUBGRF_Calibrate>
 8009620:	e009      	b.n	8009636 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009622:	2120      	movs	r1, #32
 8009624:	f640 1011 	movw	r0, #2321	; 0x911
 8009628:	f000 fede 	bl	800a3e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800962c:	2120      	movs	r1, #32
 800962e:	f640 1012 	movw	r0, #2322	; 0x912
 8009632:	f000 fed9 	bl	800a3e8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8009636:	f001 fcdb 	bl	800aff0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <SUBGRF_Init+0x80>)
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000320 	.word	0x20000320
 800964c:	2000031c 	.word	0x2000031c
 8009650:	20000314 	.word	0x20000314

08009654 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <SUBGRF_GetOperatingMode+0x10>)
 800965a:	781b      	ldrb	r3, [r3, #0]
}
 800965c:	4618      	mov	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr
 8009664:	20000314 	.word	0x20000314

08009668 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	461a      	mov	r2, r3
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	2000      	movs	r0, #0
 800967c:	f000 ff20 	bl	800a4c0 <SUBGRF_WriteBuffer>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800969a:	f107 0317 	add.w	r3, r7, #23
 800969e:	4619      	mov	r1, r3
 80096a0:	68b8      	ldr	r0, [r7, #8]
 80096a2:	f000 fe23 	bl	800a2ec <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	79fa      	ldrb	r2, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d201      	bcs.n	80096b4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e007      	b.n	80096c4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80096b4:	7df8      	ldrb	r0, [r7, #23]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	68f9      	ldr	r1, [r7, #12]
 80096be:	f000 ff21 	bl	800a504 <SUBGRF_ReadBuffer>

    return 0;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	460b      	mov	r3, r1
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	4619      	mov	r1, r3
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f7ff ffc2 	bl	8009668 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f91b 	bl	8009920 <SUBGRF_SetTx>
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80096fa:	2208      	movs	r2, #8
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009702:	f000 fe99 	bl	800a438 <SUBGRF_WriteRegisters>
    return 0;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	b29b      	uxth	r3, r3
 8009720:	b2db      	uxtb	r3, r3
 8009722:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800972a:	f000 fb6b 	bl	8009e04 <SUBGRF_GetPacketType>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009734:	f107 030c 	add.w	r3, r7, #12
 8009738:	2202      	movs	r2, #2
 800973a:	4619      	mov	r1, r3
 800973c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009740:	f000 fe7a 	bl	800a438 <SUBGRF_WriteRegisters>
            break;
 8009744:	e000      	b.n	8009748 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009746:	bf00      	nop
    }
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	0a1b      	lsrs	r3, r3, #8
 800975e:	b29b      	uxth	r3, r3
 8009760:	b2db      	uxtb	r3, r3
 8009762:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009764:	88fb      	ldrh	r3, [r7, #6]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800976a:	f000 fb4b 	bl	8009e04 <SUBGRF_GetPacketType>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009774:	f107 030c 	add.w	r3, r7, #12
 8009778:	2202      	movs	r2, #2
 800977a:	4619      	mov	r1, r3
 800977c:	f240 60be 	movw	r0, #1726	; 0x6be
 8009780:	f000 fe5a 	bl	800a438 <SUBGRF_WriteRegisters>
            break;
 8009784:	e000      	b.n	8009788 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009786:	bf00      	nop
    }
}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800979e:	f000 fb31 	bl	8009e04 <SUBGRF_GetPacketType>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d121      	bne.n	80097ec <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80097a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80097ac:	f000 fe30 	bl	800a410 <SUBGRF_ReadRegister>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	b29b      	uxth	r3, r3
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	b25a      	sxtb	r2, r3
 80097c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	b25b      	sxtb	r3, r3
 80097ce:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4619      	mov	r1, r3
 80097d4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80097d8:	f000 fe06 	bl	800a3e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80097dc:	88fb      	ldrh	r3, [r7, #6]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	4619      	mov	r1, r3
 80097e2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80097e6:	f000 fdff 	bl	800a3e8 <SUBGRF_WriteRegister>
            break;
 80097ea:	e000      	b.n	80097ee <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80097ec:	bf00      	nop
    }
}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009808:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800980c:	f000 fe00 	bl	800a410 <SUBGRF_ReadRegister>
 8009810:	4603      	mov	r3, r0
 8009812:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	f023 0301 	bic.w	r3, r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	4619      	mov	r1, r3
 800981e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009822:	f000 fde1 	bl	800a3e8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009826:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800982a:	f000 fdf1 	bl	800a410 <SUBGRF_ReadRegister>
 800982e:	4603      	mov	r3, r0
 8009830:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009832:	79bb      	ldrb	r3, [r7, #6]
 8009834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009838:	b2db      	uxtb	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009840:	f000 fdd2 	bl	800a3e8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009844:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009848:	f000 f88a 	bl	8009960 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800984c:	463b      	mov	r3, r7
 800984e:	2204      	movs	r2, #4
 8009850:	4619      	mov	r1, r3
 8009852:	f640 0019 	movw	r0, #2073	; 0x819
 8009856:	f000 fe11 	bl	800a47c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800985a:	2000      	movs	r0, #0
 800985c:	f000 f844 	bl	80098e8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	4619      	mov	r1, r3
 8009864:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009868:	f000 fdbe 	bl	800a3e8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800986c:	79bb      	ldrb	r3, [r7, #6]
 800986e:	4619      	mov	r1, r3
 8009870:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009874:	f000 fdb8 	bl	800a3e8 <SUBGRF_WriteRegister>

    return number;
 8009878:	683b      	ldr	r3, [r7, #0]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800988c:	2000      	movs	r0, #0
 800988e:	f001 fbb6 	bl	800affe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009892:	2002      	movs	r0, #2
 8009894:	f000 ff90 	bl	800a7b8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009898:	793b      	ldrb	r3, [r7, #4]
 800989a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80098a4:	793b      	ldrb	r3, [r7, #4]
 80098a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80098ae:	b25b      	sxtb	r3, r3
 80098b0:	4313      	orrs	r3, r2
 80098b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80098b4:	793b      	ldrb	r3, [r7, #4]
 80098b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80098be:	4313      	orrs	r3, r2
 80098c0:	b25b      	sxtb	r3, r3
 80098c2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80098c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80098c6:	f107 030f 	add.w	r3, r7, #15
 80098ca:	2201      	movs	r2, #1
 80098cc:	4619      	mov	r1, r3
 80098ce:	2084      	movs	r0, #132	; 0x84
 80098d0:	f000 fe3a 	bl	800a548 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80098d4:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <SUBGRF_SetSleep+0x60>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000314 	.word	0x20000314

080098e8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80098f2:	1dfb      	adds	r3, r7, #7
 80098f4:	2201      	movs	r2, #1
 80098f6:	4619      	mov	r1, r3
 80098f8:	2080      	movs	r0, #128	; 0x80
 80098fa:	f000 fe25 	bl	800a548 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <SUBGRF_SetStandby+0x34>)
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800990a:	e002      	b.n	8009912 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <SUBGRF_SetStandby+0x34>)
 800990e:	2202      	movs	r2, #2
 8009910:	701a      	strb	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000314 	.word	0x20000314

08009920 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <SUBGRF_SetTx+0x3c>)
 800992a:	2204      	movs	r2, #4
 800992c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	0c1b      	lsrs	r3, r3, #16
 8009932:	b2db      	uxtb	r3, r3
 8009934:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0a1b      	lsrs	r3, r3, #8
 800993a:	b2db      	uxtb	r3, r3
 800993c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009944:	f107 030c 	add.w	r3, r7, #12
 8009948:	2203      	movs	r2, #3
 800994a:	4619      	mov	r1, r3
 800994c:	2083      	movs	r0, #131	; 0x83
 800994e:	f000 fdfb 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000314 	.word	0x20000314

08009960 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <SUBGRF_SetRx+0x3c>)
 800996a:	2205      	movs	r2, #5
 800996c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	0c1b      	lsrs	r3, r3, #16
 8009972:	b2db      	uxtb	r3, r3
 8009974:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	b2db      	uxtb	r3, r3
 800997c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009984:	f107 030c 	add.w	r3, r7, #12
 8009988:	2203      	movs	r2, #3
 800998a:	4619      	mov	r1, r3
 800998c:	2082      	movs	r0, #130	; 0x82
 800998e:	f000 fddb 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000314 	.word	0x20000314

080099a0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <SUBGRF_SetRxBoosted+0x44>)
 80099aa:	2205      	movs	r2, #5
 80099ac:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80099ae:	2197      	movs	r1, #151	; 0x97
 80099b0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80099b4:	f000 fd18 	bl	800a3e8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	0c1b      	lsrs	r3, r3, #16
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80099ce:	f107 030c 	add.w	r3, r7, #12
 80099d2:	2203      	movs	r2, #3
 80099d4:	4619      	mov	r1, r3
 80099d6:	2082      	movs	r0, #130	; 0x82
 80099d8:	f000 fdb6 	bl	800a548 <SUBGRF_WriteCommand>
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20000314 	.word	0x20000314

080099e8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	0c1b      	lsrs	r3, r3, #16
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	0a1b      	lsrs	r3, r3, #8
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009a1e:	f107 0308 	add.w	r3, r7, #8
 8009a22:	2206      	movs	r2, #6
 8009a24:	4619      	mov	r1, r3
 8009a26:	2094      	movs	r0, #148	; 0x94
 8009a28:	f000 fd8e 	bl	800a548 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <SUBGRF_SetRxDutyCycle+0x54>)
 8009a2e:	2206      	movs	r2, #6
 8009a30:	701a      	strb	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000314 	.word	0x20000314

08009a40 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	20c5      	movs	r0, #197	; 0xc5
 8009a4a:	f000 fd7d 	bl	800a548 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009a4e:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <SUBGRF_SetCad+0x18>)
 8009a50:	2207      	movs	r2, #7
 8009a52:	701a      	strb	r2, [r3, #0]
}
 8009a54:	bf00      	nop
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000314 	.word	0x20000314

08009a5c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	20d1      	movs	r0, #209	; 0xd1
 8009a66:	f000 fd6f 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009a6a:	bf00      	nop
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009a72:	2200      	movs	r2, #0
 8009a74:	2100      	movs	r1, #0
 8009a76:	20d2      	movs	r0, #210	; 0xd2
 8009a78:	f000 fd66 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009a7c:	bf00      	nop
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009a8a:	1dfb      	adds	r3, r7, #7
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	4619      	mov	r1, r3
 8009a90:	209f      	movs	r0, #159	; 0x9f
 8009a92:	f000 fd59 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009aa8:	1dfb      	adds	r3, r7, #7
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4619      	mov	r1, r3
 8009aae:	20a0      	movs	r0, #160	; 0xa0
 8009ab0:	f000 fd4a 	bl	800a548 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ab8:	d91c      	bls.n	8009af4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	085b      	lsrs	r3, r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009ac8:	e005      	b.n	8009ad6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	089b      	lsrs	r3, r3, #2
 8009ace:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	d8f6      	bhi.n	8009aca <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009ae8:	7b7b      	ldrb	r3, [r7, #13]
 8009aea:	4619      	mov	r1, r3
 8009aec:	f240 7006 	movw	r0, #1798	; 0x706
 8009af0:	f000 fc7a 	bl	800a3e8 <SUBGRF_WriteRegister>
    }
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8009b02:	f001 fa98 	bl	800b036 <RBI_IsDCDC>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d102      	bne.n	8009b12 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	71fb      	strb	r3, [r7, #7]
 8009b10:	e001      	b.n	8009b16 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8009b12:	2300      	movs	r3, #0
 8009b14:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8009b16:	1dfb      	adds	r3, r7, #7
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	2096      	movs	r0, #150	; 0x96
 8009b1e:	f000 fd13 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009b32:	793b      	ldrb	r3, [r7, #4]
 8009b34:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	019b      	lsls	r3, r3, #6
 8009b3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009b3e:	793b      	ldrb	r3, [r7, #4]
 8009b40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009b48:	b25b      	sxtb	r3, r3
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009b4e:	793b      	ldrb	r3, [r7, #4]
 8009b50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009b58:	b25b      	sxtb	r3, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009b5e:	793b      	ldrb	r3, [r7, #4]
 8009b60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009b68:	b25b      	sxtb	r3, r3
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009b6e:	793b      	ldrb	r3, [r7, #4]
 8009b70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009b78:	b25b      	sxtb	r3, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009b7e:	793b      	ldrb	r3, [r7, #4]
 8009b80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009b88:	b25b      	sxtb	r3, r3
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009b8e:	793b      	ldrb	r3, [r7, #4]
 8009b90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	b25b      	sxtb	r3, r3
 8009b9c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009b9e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009ba0:	f107 030f 	add.w	r3, r7, #15
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	2089      	movs	r0, #137	; 0x89
 8009baa:	f000 fccd 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <SUBGRF_CalibrateImage+0x78>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d904      	bls.n	8009bd2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009bc8:	23e1      	movs	r3, #225	; 0xe1
 8009bca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009bcc:	23e9      	movs	r3, #233	; 0xe9
 8009bce:	737b      	strb	r3, [r7, #13]
 8009bd0:	e022      	b.n	8009c18 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a17      	ldr	r2, [pc, #92]	; (8009c34 <SUBGRF_CalibrateImage+0x7c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d904      	bls.n	8009be4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009bda:	23d7      	movs	r3, #215	; 0xd7
 8009bdc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009bde:	23db      	movs	r3, #219	; 0xdb
 8009be0:	737b      	strb	r3, [r7, #13]
 8009be2:	e019      	b.n	8009c18 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <SUBGRF_CalibrateImage+0x80>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d904      	bls.n	8009bf6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009bec:	23c1      	movs	r3, #193	; 0xc1
 8009bee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009bf0:	23c5      	movs	r3, #197	; 0xc5
 8009bf2:	737b      	strb	r3, [r7, #13]
 8009bf4:	e010      	b.n	8009c18 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a10      	ldr	r2, [pc, #64]	; (8009c3c <SUBGRF_CalibrateImage+0x84>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d904      	bls.n	8009c08 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8009bfe:	2375      	movs	r3, #117	; 0x75
 8009c00:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8009c02:	2381      	movs	r3, #129	; 0x81
 8009c04:	737b      	strb	r3, [r7, #13]
 8009c06:	e007      	b.n	8009c18 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a0d      	ldr	r2, [pc, #52]	; (8009c40 <SUBGRF_CalibrateImage+0x88>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d903      	bls.n	8009c18 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8009c10:	236b      	movs	r3, #107	; 0x6b
 8009c12:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009c14:	236f      	movs	r3, #111	; 0x6f
 8009c16:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009c18:	f107 030c 	add.w	r3, r7, #12
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	4619      	mov	r1, r3
 8009c20:	2098      	movs	r0, #152	; 0x98
 8009c22:	f000 fc91 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	35a4e900 	.word	0x35a4e900
 8009c34:	32a9f880 	.word	0x32a9f880
 8009c38:	2de54480 	.word	0x2de54480
 8009c3c:	1b6b0b00 	.word	0x1b6b0b00
 8009c40:	1954fc40 	.word	0x1954fc40

08009c44 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	461a      	mov	r2, r3
 8009c52:	4623      	mov	r3, r4
 8009c54:	71fb      	strb	r3, [r7, #7]
 8009c56:	4603      	mov	r3, r0
 8009c58:	71bb      	strb	r3, [r7, #6]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	717b      	strb	r3, [r7, #5]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009c66:	79bb      	ldrb	r3, [r7, #6]
 8009c68:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009c6a:	797b      	ldrb	r3, [r7, #5]
 8009c6c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009c6e:	793b      	ldrb	r3, [r7, #4]
 8009c70:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009c72:	f107 030c 	add.w	r3, r7, #12
 8009c76:	2204      	movs	r2, #4
 8009c78:	4619      	mov	r1, r3
 8009c7a:	2095      	movs	r0, #149	; 0x95
 8009c7c:	f000 fc64 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009c80:	bf00      	nop
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd90      	pop	{r4, r7, pc}

08009c88 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	461a      	mov	r2, r3
 8009c96:	4623      	mov	r3, r4
 8009c98:	80fb      	strh	r3, [r7, #6]
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	80bb      	strh	r3, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	807b      	strh	r3, [r7, #2]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	0a1b      	lsrs	r3, r3, #8
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009cb0:	88fb      	ldrh	r3, [r7, #6]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009cb6:	88bb      	ldrh	r3, [r7, #4]
 8009cb8:	0a1b      	lsrs	r3, r3, #8
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009cc0:	88bb      	ldrh	r3, [r7, #4]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009cd0:	887b      	ldrh	r3, [r7, #2]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009cd6:	883b      	ldrh	r3, [r7, #0]
 8009cd8:	0a1b      	lsrs	r3, r3, #8
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009ce0:	883b      	ldrh	r3, [r7, #0]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	2208      	movs	r2, #8
 8009cec:	4619      	mov	r1, r3
 8009cee:	2008      	movs	r0, #8
 8009cf0:	f000 fc2a 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd90      	pop	{r4, r7, pc}

08009cfc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	0a1b      	lsrs	r3, r3, #8
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009d28:	f107 030c 	add.w	r3, r7, #12
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	2097      	movs	r0, #151	; 0x97
 8009d32:	f000 fc09 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009d4e:	4b1d      	ldr	r3, [pc, #116]	; (8009dc4 <SUBGRF_SetRfFrequency+0x84>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f083 0301 	eor.w	r3, r3, #1
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ff2b 	bl	8009bb8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009d62:	4b18      	ldr	r3, [pc, #96]	; (8009dc4 <SUBGRF_SetRfFrequency+0x84>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	461c      	mov	r4, r3
 8009d6e:	4615      	mov	r5, r2
 8009d70:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009d74:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009d78:	4a13      	ldr	r2, [pc, #76]	; (8009dc8 <SUBGRF_SetRfFrequency+0x88>)
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 fa01 	bl	8000188 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	0e1b      	lsrs	r3, r3, #24
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	0a1b      	lsrs	r3, r3, #8
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009dac:	f107 0308 	add.w	r3, r7, #8
 8009db0:	2204      	movs	r2, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	2086      	movs	r0, #134	; 0x86
 8009db6:	f000 fbc7 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009dc4:	2000031c 	.word	0x2000031c
 8009dc8:	01e84800 	.word	0x01e84800

08009dcc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009dd6:	79fa      	ldrb	r2, [r7, #7]
 8009dd8:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <SUBGRF_SetPacketType+0x34>)
 8009dda:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d104      	bne.n	8009dec <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009de2:	2100      	movs	r1, #0
 8009de4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009de8:	f000 fafe 	bl	800a3e8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009dec:	1dfb      	adds	r3, r7, #7
 8009dee:	2201      	movs	r2, #1
 8009df0:	4619      	mov	r1, r3
 8009df2:	208a      	movs	r0, #138	; 0x8a
 8009df4:	f000 fba8 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000315 	.word	0x20000315

08009e04 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
    return PacketType;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <SUBGRF_GetPacketType+0x10>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr
 8009e14:	20000315 	.word	0x20000315

08009e18 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
 8009e22:	460b      	mov	r3, r1
 8009e24:	71bb      	strb	r3, [r7, #6]
 8009e26:	4613      	mov	r3, r2
 8009e28:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d149      	bne.n	8009ec4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009e30:	2000      	movs	r0, #0
 8009e32:	f001 f907 	bl	800b044 <RBI_GetRFOMaxPowerConfig>
 8009e36:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009e38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	da01      	bge.n	8009e46 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b0e      	cmp	r3, #14
 8009e4a:	d10e      	bne.n	8009e6a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2100      	movs	r1, #0
 8009e52:	2004      	movs	r0, #4
 8009e54:	f7ff fef6 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009e58:	79ba      	ldrb	r2, [r7, #6]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	330e      	adds	r3, #14
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	71bb      	strb	r3, [r7, #6]
 8009e68:	e01f      	b.n	8009eaa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b0a      	cmp	r3, #10
 8009e6e:	d10e      	bne.n	8009e8e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009e70:	2301      	movs	r3, #1
 8009e72:	2201      	movs	r2, #1
 8009e74:	2100      	movs	r1, #0
 8009e76:	2001      	movs	r0, #1
 8009e78:	f7ff fee4 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009e7c:	79ba      	ldrb	r2, [r7, #6]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	330d      	adds	r3, #13
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	71bb      	strb	r3, [r7, #6]
 8009e8c:	e00d      	b.n	8009eaa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8009e8e:	2301      	movs	r3, #1
 8009e90:	2201      	movs	r2, #1
 8009e92:	2100      	movs	r1, #0
 8009e94:	2006      	movs	r0, #6
 8009e96:	f7ff fed5 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009e9a:	79ba      	ldrb	r2, [r7, #6]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	330e      	adds	r3, #14
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009eaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009eae:	f113 0f11 	cmn.w	r3, #17
 8009eb2:	da01      	bge.n	8009eb8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009eb4:	23ef      	movs	r3, #239	; 0xef
 8009eb6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009eb8:	2118      	movs	r1, #24
 8009eba:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009ebe:	f000 fa93 	bl	800a3e8 <SUBGRF_WriteRegister>
 8009ec2:	e067      	b.n	8009f94 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009ec4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009ec8:	f000 faa2 	bl	800a410 <SUBGRF_ReadRegister>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f043 031e 	orr.w	r3, r3, #30
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009eda:	f000 fa85 	bl	800a3e8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009ede:	2001      	movs	r0, #1
 8009ee0:	f001 f8b0 	bl	800b044 <RBI_GetRFOMaxPowerConfig>
 8009ee4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009ee6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	da01      	bge.n	8009ef4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b14      	cmp	r3, #20
 8009ef8:	d10e      	bne.n	8009f18 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009efa:	2301      	movs	r3, #1
 8009efc:	2200      	movs	r2, #0
 8009efe:	2105      	movs	r1, #5
 8009f00:	2003      	movs	r0, #3
 8009f02:	f7ff fe9f 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009f06:	79ba      	ldrb	r2, [r7, #6]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	3316      	adds	r3, #22
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	71bb      	strb	r3, [r7, #6]
 8009f16:	e031      	b.n	8009f7c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b11      	cmp	r3, #17
 8009f1c:	d10e      	bne.n	8009f3c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009f1e:	2301      	movs	r3, #1
 8009f20:	2200      	movs	r2, #0
 8009f22:	2103      	movs	r1, #3
 8009f24:	2002      	movs	r0, #2
 8009f26:	f7ff fe8d 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009f2a:	79ba      	ldrb	r2, [r7, #6]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	3316      	adds	r3, #22
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	71bb      	strb	r3, [r7, #6]
 8009f3a:	e01f      	b.n	8009f7c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b0e      	cmp	r3, #14
 8009f40:	d10e      	bne.n	8009f60 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009f42:	2301      	movs	r3, #1
 8009f44:	2200      	movs	r2, #0
 8009f46:	2102      	movs	r1, #2
 8009f48:	2002      	movs	r0, #2
 8009f4a:	f7ff fe7b 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009f4e:	79ba      	ldrb	r2, [r7, #6]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	330e      	adds	r3, #14
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	71bb      	strb	r3, [r7, #6]
 8009f5e:	e00d      	b.n	8009f7c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009f60:	2301      	movs	r3, #1
 8009f62:	2200      	movs	r2, #0
 8009f64:	2107      	movs	r1, #7
 8009f66:	2004      	movs	r0, #4
 8009f68:	f7ff fe6c 	bl	8009c44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009f6c:	79ba      	ldrb	r2, [r7, #6]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	3316      	adds	r3, #22
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009f7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009f80:	f113 0f09 	cmn.w	r3, #9
 8009f84:	da01      	bge.n	8009f8a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009f86:	23f7      	movs	r3, #247	; 0xf7
 8009f88:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009f8a:	2138      	movs	r1, #56	; 0x38
 8009f8c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009f90:	f000 fa2a 	bl	800a3e8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009f94:	79bb      	ldrb	r3, [r7, #6]
 8009f96:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009f98:	797b      	ldrb	r3, [r7, #5]
 8009f9a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009f9c:	f107 0308 	add.w	r3, r7, #8
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	208e      	movs	r0, #142	; 0x8e
 8009fa6:	f000 facf 	bl	800a548 <SUBGRF_WriteCommand>
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009fc2:	4a61      	ldr	r2, [pc, #388]	; (800a148 <SUBGRF_SetModulationParams+0x194>)
 8009fc4:	f107 0308 	add.w	r3, r7, #8
 8009fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fcc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	781a      	ldrb	r2, [r3, #0]
 8009fd4:	4b5d      	ldr	r3, [pc, #372]	; (800a14c <SUBGRF_SetModulationParams+0x198>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d004      	beq.n	8009fe6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fef3 	bl	8009dcc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	f200 80a5 	bhi.w	800a13a <SUBGRF_SetModulationParams+0x186>
 8009ff0:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <SUBGRF_SetModulationParams+0x44>)
 8009ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff6:	bf00      	nop
 8009ff8:	0800a009 	.word	0x0800a009
 8009ffc:	0800a0c9 	.word	0x0800a0c9
 800a000:	0800a08b 	.word	0x0800a08b
 800a004:	0800a0f7 	.word	0x0800a0f7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a008:	2308      	movs	r3, #8
 800a00a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4a4f      	ldr	r2, [pc, #316]	; (800a150 <SUBGRF_SetModulationParams+0x19c>)
 800a012:	fbb2 f3f3 	udiv	r3, r2, r3
 800a016:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	0c1b      	lsrs	r3, r3, #16
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	b2db      	uxtb	r3, r3
 800a026:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7b1b      	ldrb	r3, [r3, #12]
 800a032:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7b5b      	ldrb	r3, [r3, #13]
 800a038:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2200      	movs	r2, #0
 800a040:	461c      	mov	r4, r3
 800a042:	4615      	mov	r5, r2
 800a044:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a048:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a04c:	4a41      	ldr	r2, [pc, #260]	; (800a154 <SUBGRF_SetModulationParams+0x1a0>)
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f897 	bl	8000188 <__aeabi_uldivmod>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4613      	mov	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	0c1b      	lsrs	r3, r3, #16
 800a066:	b2db      	uxtb	r3, r3
 800a068:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4619      	mov	r1, r3
 800a082:	208b      	movs	r0, #139	; 0x8b
 800a084:	f000 fa60 	bl	800a548 <SUBGRF_WriteCommand>
        break;
 800a088:	e058      	b.n	800a13c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a08a:	2304      	movs	r3, #4
 800a08c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	4a2f      	ldr	r2, [pc, #188]	; (800a150 <SUBGRF_SetModulationParams+0x19c>)
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7d1b      	ldrb	r3, [r3, #20]
 800a0b4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a0b6:	7cfb      	ldrb	r3, [r7, #19]
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4619      	mov	r1, r3
 800a0c0:	208b      	movs	r0, #139	; 0x8b
 800a0c2:	f000 fa41 	bl	800a548 <SUBGRF_WriteCommand>
        break;
 800a0c6:	e039      	b.n	800a13c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	7e1b      	ldrb	r3, [r3, #24]
 800a0d0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	7e5b      	ldrb	r3, [r3, #25]
 800a0d6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7e9b      	ldrb	r3, [r3, #26]
 800a0dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7edb      	ldrb	r3, [r3, #27]
 800a0e2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a0e4:	7cfb      	ldrb	r3, [r7, #19]
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	208b      	movs	r0, #139	; 0x8b
 800a0f0:	f000 fa2a 	bl	800a548 <SUBGRF_WriteCommand>

        break;
 800a0f4:	e022      	b.n	800a13c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a0f6:	2305      	movs	r3, #5
 800a0f8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	4a14      	ldr	r2, [pc, #80]	; (800a150 <SUBGRF_SetModulationParams+0x19c>)
 800a100:	fbb2 f3f3 	udiv	r3, r2, r3
 800a104:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	0a1b      	lsrs	r3, r3, #8
 800a112:	b2db      	uxtb	r3, r3
 800a114:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7b1b      	ldrb	r3, [r3, #12]
 800a120:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	7b5b      	ldrb	r3, [r3, #13]
 800a126:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a128:	7cfb      	ldrb	r3, [r7, #19]
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	4619      	mov	r1, r3
 800a132:	208b      	movs	r0, #139	; 0x8b
 800a134:	f000 fa08 	bl	800a548 <SUBGRF_WriteCommand>
        break;
 800a138:	e000      	b.n	800a13c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a13a:	bf00      	nop
    }
}
 800a13c:	bf00      	nop
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a146:	bf00      	nop
 800a148:	0800c698 	.word	0x0800c698
 800a14c:	20000315 	.word	0x20000315
 800a150:	3d090000 	.word	0x3d090000
 800a154:	01e84800 	.word	0x01e84800

0800a158 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a164:	4a48      	ldr	r2, [pc, #288]	; (800a288 <SUBGRF_SetPacketParams+0x130>)
 800a166:	f107 030c 	add.w	r3, r7, #12
 800a16a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a16c:	c303      	stmia	r3!, {r0, r1}
 800a16e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	4b45      	ldr	r3, [pc, #276]	; (800a28c <SUBGRF_SetPacketParams+0x134>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d004      	beq.n	800a186 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fe23 	bl	8009dcc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d878      	bhi.n	800a280 <SUBGRF_SetPacketParams+0x128>
 800a18e:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <SUBGRF_SetPacketParams+0x3c>)
 800a190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a194:	0800a1a5 	.word	0x0800a1a5
 800a198:	0800a235 	.word	0x0800a235
 800a19c:	0800a229 	.word	0x0800a229
 800a1a0:	0800a1a5 	.word	0x0800a1a5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7a5b      	ldrb	r3, [r3, #9]
 800a1a8:	2bf1      	cmp	r3, #241	; 0xf1
 800a1aa:	d10a      	bne.n	800a1c2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a1ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a1b0:	f7ff faae 	bl	8009710 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a1b4:	f248 0005 	movw	r0, #32773	; 0x8005
 800a1b8:	f7ff faca 	bl	8009750 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	75bb      	strb	r3, [r7, #22]
 800a1c0:	e011      	b.n	800a1e6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	2bf2      	cmp	r3, #242	; 0xf2
 800a1c8:	d10a      	bne.n	800a1e0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a1ca:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800a1ce:	f7ff fa9f 	bl	8009710 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a1d2:	f241 0021 	movw	r0, #4129	; 0x1021
 800a1d6:	f7ff fabb 	bl	8009750 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a1da:	2306      	movs	r3, #6
 800a1dc:	75bb      	strb	r3, [r7, #22]
 800a1de:	e002      	b.n	800a1e6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7a5b      	ldrb	r3, [r3, #9]
 800a1e4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a1e6:	2309      	movs	r3, #9
 800a1e8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	885b      	ldrh	r3, [r3, #2]
 800a1ee:	0a1b      	lsrs	r3, r3, #8
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	791b      	ldrb	r3, [r3, #4]
 800a202:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	795b      	ldrb	r3, [r3, #5]
 800a208:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	799b      	ldrb	r3, [r3, #6]
 800a20e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	79db      	ldrb	r3, [r3, #7]
 800a214:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7a1b      	ldrb	r3, [r3, #8]
 800a21a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a21c:	7dbb      	ldrb	r3, [r7, #22]
 800a21e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	7a9b      	ldrb	r3, [r3, #10]
 800a224:	753b      	strb	r3, [r7, #20]
        break;
 800a226:	e022      	b.n	800a26e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a228:	2301      	movs	r3, #1
 800a22a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7b1b      	ldrb	r3, [r3, #12]
 800a230:	733b      	strb	r3, [r7, #12]
        break;
 800a232:	e01c      	b.n	800a26e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a234:	2306      	movs	r3, #6
 800a236:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	89db      	ldrh	r3, [r3, #14]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	b29b      	uxth	r3, r3
 800a240:	b2db      	uxtb	r3, r3
 800a242:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	89db      	ldrh	r3, [r3, #14]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7c1a      	ldrb	r2, [r3, #16]
 800a250:	4b0f      	ldr	r3, [pc, #60]	; (800a290 <SUBGRF_SetPacketParams+0x138>)
 800a252:	4611      	mov	r1, r2
 800a254:	7019      	strb	r1, [r3, #0]
 800a256:	4613      	mov	r3, r2
 800a258:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c5b      	ldrb	r3, [r3, #17]
 800a25e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	7c9b      	ldrb	r3, [r3, #18]
 800a264:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7cdb      	ldrb	r3, [r3, #19]
 800a26a:	747b      	strb	r3, [r7, #17]
        break;
 800a26c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	b29a      	uxth	r2, r3
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	4619      	mov	r1, r3
 800a278:	208c      	movs	r0, #140	; 0x8c
 800a27a:	f000 f965 	bl	800a548 <SUBGRF_WriteCommand>
 800a27e:	e000      	b.n	800a282 <SUBGRF_SetPacketParams+0x12a>
        return;
 800a280:	bf00      	nop
}
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	0800c6a0 	.word	0x0800c6a0
 800a28c:	20000315 	.word	0x20000315
 800a290:	20000316 	.word	0x20000316

0800a294 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	460a      	mov	r2, r1
 800a29e:	71fb      	strb	r3, [r7, #7]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a2a8:	79bb      	ldrb	r3, [r7, #6]
 800a2aa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	208f      	movs	r0, #143	; 0x8f
 800a2b6:	f000 f947 	bl	800a548 <SUBGRF_WriteCommand>
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	2015      	movs	r0, #21
 800a2d4:	f000 f95a 	bl	800a58c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a2d8:	793b      	ldrb	r3, [r7, #4]
 800a2da:	425b      	negs	r3, r3
 800a2dc:	105b      	asrs	r3, r3, #1
 800a2de:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a2e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a2f6:	f107 030c 	add.w	r3, r7, #12
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	2013      	movs	r0, #19
 800a300:	f000 f944 	bl	800a58c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a304:	f7ff fd7e 	bl	8009e04 <SUBGRF_GetPacketType>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d10d      	bne.n	800a32a <SUBGRF_GetRxBufferStatus+0x3e>
 800a30e:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <SUBGRF_GetRxBufferStatus+0x54>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b01      	cmp	r3, #1
 800a316:	d108      	bne.n	800a32a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a318:	f240 7002 	movw	r0, #1794	; 0x702
 800a31c:	f000 f878 	bl	800a410 <SUBGRF_ReadRegister>
 800a320:	4603      	mov	r3, r0
 800a322:	461a      	mov	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e002      	b.n	800a330 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a32a:	7b3a      	ldrb	r2, [r7, #12]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a330:	7b7a      	ldrb	r2, [r7, #13]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	701a      	strb	r2, [r3, #0]
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000316 	.word	0x20000316

0800a344 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a34c:	f107 030c 	add.w	r3, r7, #12
 800a350:	2203      	movs	r2, #3
 800a352:	4619      	mov	r1, r3
 800a354:	2014      	movs	r0, #20
 800a356:	f000 f919 	bl	800a58c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a35a:	f7ff fd53 	bl	8009e04 <SUBGRF_GetPacketType>
 800a35e:	4603      	mov	r3, r0
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <SUBGRF_GetPacketStatus+0x30>
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d013      	beq.n	800a39a <SUBGRF_GetPacketStatus+0x56>
 800a372:	e02a      	b.n	800a3ca <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a374:	7b3a      	ldrb	r2, [r7, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a37a:	7b7b      	ldrb	r3, [r7, #13]
 800a37c:	425b      	negs	r3, r3
 800a37e:	105b      	asrs	r3, r3, #1
 800a380:	b25a      	sxtb	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	425b      	negs	r3, r3
 800a38a:	105b      	asrs	r3, r3, #1
 800a38c:	b25a      	sxtb	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	609a      	str	r2, [r3, #8]
            break;
 800a398:	e020      	b.n	800a3dc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a39a:	7b3b      	ldrb	r3, [r7, #12]
 800a39c:	425b      	negs	r3, r3
 800a39e:	105b      	asrs	r3, r3, #1
 800a3a0:	b25a      	sxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a3a6:	7b7b      	ldrb	r3, [r7, #13]
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	109b      	asrs	r3, r3, #2
 800a3ae:	b25a      	sxtb	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	425b      	negs	r3, r3
 800a3b8:	105b      	asrs	r3, r3, #1
 800a3ba:	b25a      	sxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <SUBGRF_GetPacketStatus+0xa0>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	611a      	str	r2, [r3, #16]
            break;
 800a3c8:	e008      	b.n	800a3dc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a3ca:	2214      	movs	r2, #20
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 ff0b 	bl	800b1ea <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	220f      	movs	r2, #15
 800a3d8:	701a      	strb	r2, [r3, #0]
            break;
 800a3da:	bf00      	nop
    }
}
 800a3dc:	bf00      	nop
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000318 	.word	0x20000318

0800a3e8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	460a      	mov	r2, r1
 800a3f2:	80fb      	strh	r3, [r7, #6]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a3f8:	1d7a      	adds	r2, r7, #5
 800a3fa:	88f9      	ldrh	r1, [r7, #6]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4803      	ldr	r0, [pc, #12]	; (800a40c <SUBGRF_WriteRegister+0x24>)
 800a400:	f7fa fc00 	bl	8004c04 <HAL_SUBGHZ_WriteRegisters>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000074 	.word	0x20000074

0800a410 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a41a:	f107 020f 	add.w	r2, r7, #15
 800a41e:	88f9      	ldrh	r1, [r7, #6]
 800a420:	2301      	movs	r3, #1
 800a422:	4804      	ldr	r0, [pc, #16]	; (800a434 <SUBGRF_ReadRegister+0x24>)
 800a424:	f7fa fc4d 	bl	8004cc2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20000074 	.word	0x20000074

0800a438 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	80fb      	strh	r3, [r7, #6]
 800a444:	4613      	mov	r3, r2
 800a446:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a448:	f3ef 8310 	mrs	r3, PRIMASK
 800a44c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a44e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a452:	b672      	cpsid	i
}
 800a454:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a456:	88bb      	ldrh	r3, [r7, #4]
 800a458:	88f9      	ldrh	r1, [r7, #6]
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	4806      	ldr	r0, [pc, #24]	; (800a478 <SUBGRF_WriteRegisters+0x40>)
 800a45e:	f7fa fbd1 	bl	8004c04 <HAL_SUBGHZ_WriteRegisters>
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f383 8810 	msr	PRIMASK, r3
}
 800a46c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a46e:	bf00      	nop
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000074 	.word	0x20000074

0800a47c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	80fb      	strh	r3, [r7, #6]
 800a488:	4613      	mov	r3, r2
 800a48a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a48c:	f3ef 8310 	mrs	r3, PRIMASK
 800a490:	60fb      	str	r3, [r7, #12]
  return(result);
 800a492:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a496:	b672      	cpsid	i
}
 800a498:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a49a:	88bb      	ldrh	r3, [r7, #4]
 800a49c:	88f9      	ldrh	r1, [r7, #6]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4806      	ldr	r0, [pc, #24]	; (800a4bc <SUBGRF_ReadRegisters+0x40>)
 800a4a2:	f7fa fc0e 	bl	8004cc2 <HAL_SUBGHZ_ReadRegisters>
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f383 8810 	msr	PRIMASK, r3
}
 800a4b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a4b2:	bf00      	nop
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000074 	.word	0x20000074

0800a4c0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	71fb      	strb	r3, [r7, #7]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a4d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4da:	b672      	cpsid	i
}
 800a4dc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a4de:	79bb      	ldrb	r3, [r7, #6]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	79f9      	ldrb	r1, [r7, #7]
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	4806      	ldr	r0, [pc, #24]	; (800a500 <SUBGRF_WriteBuffer+0x40>)
 800a4e8:	f7fa fcff 	bl	8004eea <HAL_SUBGHZ_WriteBuffer>
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f383 8810 	msr	PRIMASK, r3
}
 800a4f6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a4f8:	bf00      	nop
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20000074 	.word	0x20000074

0800a504 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	6039      	str	r1, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
 800a510:	4613      	mov	r3, r2
 800a512:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a514:	f3ef 8310 	mrs	r3, PRIMASK
 800a518:	60fb      	str	r3, [r7, #12]
  return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a51c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a51e:	b672      	cpsid	i
}
 800a520:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a522:	79bb      	ldrb	r3, [r7, #6]
 800a524:	b29b      	uxth	r3, r3
 800a526:	79f9      	ldrb	r1, [r7, #7]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	4806      	ldr	r0, [pc, #24]	; (800a544 <SUBGRF_ReadBuffer+0x40>)
 800a52c:	f7fa fd30 	bl	8004f90 <HAL_SUBGHZ_ReadBuffer>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f383 8810 	msr	PRIMASK, r3
}
 800a53a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20000074 	.word	0x20000074

0800a548 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	6039      	str	r1, [r7, #0]
 800a552:	71fb      	strb	r3, [r7, #7]
 800a554:	4613      	mov	r3, r2
 800a556:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a558:	f3ef 8310 	mrs	r3, PRIMASK
 800a55c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a55e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a560:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a562:	b672      	cpsid	i
}
 800a564:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a566:	88bb      	ldrh	r3, [r7, #4]
 800a568:	79f9      	ldrb	r1, [r7, #7]
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	4806      	ldr	r0, [pc, #24]	; (800a588 <SUBGRF_WriteCommand+0x40>)
 800a56e:	f7fa fc09 	bl	8004d84 <HAL_SUBGHZ_ExecSetCmd>
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f383 8810 	msr	PRIMASK, r3
}
 800a57c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a57e:	bf00      	nop
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000074 	.word	0x20000074

0800a58c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	6039      	str	r1, [r7, #0]
 800a596:	71fb      	strb	r3, [r7, #7]
 800a598:	4613      	mov	r3, r2
 800a59a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a59c:	f3ef 8310 	mrs	r3, PRIMASK
 800a5a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a5a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a6:	b672      	cpsid	i
}
 800a5a8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a5aa:	88bb      	ldrh	r3, [r7, #4]
 800a5ac:	79f9      	ldrb	r1, [r7, #7]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4806      	ldr	r0, [pc, #24]	; (800a5cc <SUBGRF_ReadCommand+0x40>)
 800a5b2:	f7fa fc46 	bl	8004e42 <HAL_SUBGHZ_ExecGetCmd>
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f383 8810 	msr	PRIMASK, r3
}
 800a5c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a5c2:	bf00      	nop
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000074 	.word	0x20000074

0800a5d0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	460a      	mov	r2, r1
 800a5da:	71fb      	strb	r3, [r7, #7]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a5e4:	79bb      	ldrb	r3, [r7, #6]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d10d      	bne.n	800a606 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d104      	bne.n	800a5fa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a5f4:	2004      	movs	r0, #4
 800a5f6:	f000 f8df 	bl	800a7b8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d107      	bne.n	800a610 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a600:	2303      	movs	r3, #3
 800a602:	73fb      	strb	r3, [r7, #15]
 800a604:	e004      	b.n	800a610 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a606:	79bb      	ldrb	r3, [r7, #6]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fcf3 	bl	800affe <RBI_ConfigRFSwitch>
}
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a62a:	2301      	movs	r3, #1
 800a62c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a62e:	f000 fcf4 	bl	800b01a <RBI_GetTxConfig>
 800a632:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d016      	beq.n	800a668 <SUBGRF_SetRfTxPower+0x48>
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	dc16      	bgt.n	800a66e <SUBGRF_SetRfTxPower+0x4e>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <SUBGRF_SetRfTxPower+0x2e>
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d00a      	beq.n	800a662 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a64c:	e00f      	b.n	800a66e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a64e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a652:	2b0f      	cmp	r3, #15
 800a654:	dd02      	ble.n	800a65c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a656:	2302      	movs	r3, #2
 800a658:	73fb      	strb	r3, [r7, #15]
            break;
 800a65a:	e009      	b.n	800a670 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a65c:	2301      	movs	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
            break;
 800a660:	e006      	b.n	800a670 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a662:	2301      	movs	r3, #1
 800a664:	73fb      	strb	r3, [r7, #15]
            break;
 800a666:	e003      	b.n	800a670 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a668:	2302      	movs	r3, #2
 800a66a:	73fb      	strb	r3, [r7, #15]
            break;
 800a66c:	e000      	b.n	800a670 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a66e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a670:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2202      	movs	r2, #2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff fbcd 	bl	8009e18 <SUBGRF_SetTxParams>

    return paSelect;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a68c:	2301      	movs	r3, #1
}
 800a68e:	4618      	mov	r0, r3
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr
	...

0800a698 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a6a0:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	4798      	blx	r3
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000320 	.word	0x20000320

0800a6b4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2002      	movs	r0, #2
 800a6c2:	4798      	blx	r3
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20000320 	.word	0x20000320

0800a6d0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a6d8:	4b03      	ldr	r3, [pc, #12]	; (800a6e8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2040      	movs	r0, #64	; 0x40
 800a6de:	4798      	blx	r3
}
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000320 	.word	0x20000320

0800a6ec <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d005      	beq.n	800a70e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a702:	e00a      	b.n	800a71a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a704:	4b07      	ldr	r3, [pc, #28]	; (800a724 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2080      	movs	r0, #128	; 0x80
 800a70a:	4798      	blx	r3
            break;
 800a70c:	e005      	b.n	800a71a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a716:	4798      	blx	r3
            break;
 800a718:	bf00      	nop
    }
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000320 	.word	0x20000320

0800a728 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a738:	4798      	blx	r3
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000320 	.word	0x20000320

0800a748 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2020      	movs	r0, #32
 800a756:	4798      	blx	r3
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000320 	.word	0x20000320

0800a764 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a76c:	4b03      	ldr	r3, [pc, #12]	; (800a77c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2004      	movs	r0, #4
 800a772:	4798      	blx	r3
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000320 	.word	0x20000320

0800a780 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a788:	4b03      	ldr	r3, [pc, #12]	; (800a798 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2008      	movs	r0, #8
 800a78e:	4798      	blx	r3
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000320 	.word	0x20000320

0800a79c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a7a4:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2010      	movs	r0, #16
 800a7aa:	4798      	blx	r3
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20000320 	.word	0x20000320

0800a7b8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a7c2:	f000 fc38 	bl	800b036 <RBI_IsDCDC>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d112      	bne.n	800a7f2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a7cc:	f640 1023 	movw	r0, #2339	; 0x923
 800a7d0:	f7ff fe1e 	bl	800a410 <SUBGRF_ReadRegister>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	f023 0306 	bic.w	r3, r3, #6
 800a7de:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a7e0:	7bfa      	ldrb	r2, [r7, #15]
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	f640 1023 	movw	r0, #2339	; 0x923
 800a7ee:	f7ff fdfb 	bl	800a3e8 <SUBGRF_WriteRegister>
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a80a:	231f      	movs	r3, #31
 800a80c:	e016      	b.n	800a83c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a80e:	2300      	movs	r3, #0
 800a810:	73fb      	strb	r3, [r7, #15]
 800a812:	e00f      	b.n	800a834 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d205      	bcs.n	800a82e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	4a08      	ldr	r2, [pc, #32]	; (800a848 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	4413      	add	r3, r2
 800a82a:	791b      	ldrb	r3, [r3, #4]
 800a82c:	e006      	b.n	800a83c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	3301      	adds	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	2b15      	cmp	r3, #21
 800a838:	d9ec      	bls.n	800a814 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800a83a:	e7fe      	b.n	800a83a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	0800ca78 	.word	0x0800ca78

0800a84c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08a      	sub	sp, #40	; 0x28
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a856:	4b35      	ldr	r3, [pc, #212]	; (800a92c <SUBGRF_GetCFO+0xe0>)
 800a858:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a85a:	f640 0007 	movw	r0, #2055	; 0x807
 800a85e:	f7ff fdd7 	bl	800a410 <SUBGRF_ReadRegister>
 800a862:	4603      	mov	r3, r0
 800a864:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a866:	7ffb      	ldrb	r3, [r7, #31]
 800a868:	08db      	lsrs	r3, r3, #3
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	3328      	adds	r3, #40	; 0x28
 800a872:	443b      	add	r3, r7
 800a874:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a878:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a87a:	7ffb      	ldrb	r3, [r7, #31]
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800a882:	7fba      	ldrb	r2, [r7, #30]
 800a884:	7f7b      	ldrb	r3, [r7, #29]
 800a886:	3b01      	subs	r3, #1
 800a888:	fa02 f303 	lsl.w	r3, r2, r3
 800a88c:	461a      	mov	r2, r3
 800a88e:	4b28      	ldr	r3, [pc, #160]	; (800a930 <SUBGRF_GetCFO+0xe4>)
 800a890:	fbb3 f3f2 	udiv	r3, r3, r2
 800a894:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
 800a8b0:	2b07      	cmp	r3, #7
 800a8b2:	d802      	bhi.n	800a8ba <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	fb02 f303 	mul.w	r3, r2, r3
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d802      	bhi.n	800a8ce <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a8c8:	2304      	movs	r3, #4
 800a8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a8ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	fb02 f303 	mul.w	r3, r2, r3
 800a8d8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a8da:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a8de:	f7ff fd97 	bl	800a410 <SUBGRF_ReadRegister>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a8ea:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a8ec:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a8f0:	f7ff fd8e 	bl	800a410 <SUBGRF_ReadRegister>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a90e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a912:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	095b      	lsrs	r3, r3, #5
 800a918:	6a3a      	ldr	r2, [r7, #32]
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
 800a91e:	11da      	asrs	r2, r3, #7
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	3728      	adds	r7, #40	; 0x28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	0c0a0804 	.word	0x0c0a0804
 800a930:	01e84800 	.word	0x01e84800

0800a934 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800a946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a94a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a94c:	697b      	ldr	r3, [r7, #20]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr

0800a958 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800a966:	2300      	movs	r3, #0
 800a968:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800a96a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a96e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a970:	697b      	ldr	r3, [r7, #20]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	bc80      	pop	{r7}
 800a97a:	4770      	bx	lr

0800a97c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800a988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr

0800a996 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800a996:	b480      	push	{r7}
 800a998:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800a99a:	bf00      	nop
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bc80      	pop	{r7}
 800a9a0:	4770      	bx	lr

0800a9a2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800a9a6:	2300      	movs	r3, #0
#endif
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr

0800a9b0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800a9b4:	2300      	movs	r3, #0
#endif
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr

0800a9d2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9e4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800a9e6:	697b      	ldr	r3, [r7, #20]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	371c      	adds	r7, #28
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr

0800a9f2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800a9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr

0800aa02 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800aa02:	b480      	push	{r7}
 800aa04:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800aa06:	bf00      	nop
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bc80      	pop	{r7}
 800aa0c:	4770      	bx	lr

0800aa0e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800aa0e:	b480      	push	{r7}
 800aa10:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800aa12:	bf00      	nop
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bc80      	pop	{r7}
 800aa18:	4770      	bx	lr

0800aa1a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	4603      	mov	r3, r0
 800aa22:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr

0800aa2e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800aa32:	f7f6 fa65 	bl	8000f00 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800aa36:	f000 f80b 	bl	800aa50 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800aa3a:	bf00      	nop
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800aa42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa46:	f000 fec7 	bl	800b7d8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800aa4a:	bf00      	nop
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b08b      	sub	sp, #44	; 0x2c
 800aa54:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */
	APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800aa56:	4b59      	ldr	r3, [pc, #356]	; (800abbc <SubghzApp_Init+0x16c>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	2002      	movs	r0, #2
 800aa5e:	f001 faf7 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	  /* Get SubGHY_Phy APP version*/
	  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800aa62:	2300      	movs	r3, #0
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	2302      	movs	r3, #2
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	4b54      	ldr	r3, [pc, #336]	; (800abc0 <SubghzApp_Init+0x170>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	2100      	movs	r1, #0
 800aa74:	2002      	movs	r0, #2
 800aa76:	f001 faeb 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(APP_VERSION_MAIN),
	          (uint8_t)(APP_VERSION_SUB1),
	          (uint8_t)(APP_VERSION_SUB2));

	  /* Get MW SubGhz_Phy info */
	  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	2302      	movs	r3, #2
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	2301      	movs	r3, #1
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	4b4f      	ldr	r3, [pc, #316]	; (800abc4 <SubghzApp_Init+0x174>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	2002      	movs	r0, #2
 800aa8e:	f001 fadf 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
	          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

	  /* Radio initialization */
	  RadioEvents.TxDone = OnTxDone;
 800aa92:	4b4d      	ldr	r3, [pc, #308]	; (800abc8 <SubghzApp_Init+0x178>)
 800aa94:	4a4d      	ldr	r2, [pc, #308]	; (800abcc <SubghzApp_Init+0x17c>)
 800aa96:	601a      	str	r2, [r3, #0]
	  RadioEvents.RxDone = OnRxDone;
 800aa98:	4b4b      	ldr	r3, [pc, #300]	; (800abc8 <SubghzApp_Init+0x178>)
 800aa9a:	4a4d      	ldr	r2, [pc, #308]	; (800abd0 <SubghzApp_Init+0x180>)
 800aa9c:	609a      	str	r2, [r3, #8]
	  RadioEvents.TxTimeout = OnTxTimeout;
 800aa9e:	4b4a      	ldr	r3, [pc, #296]	; (800abc8 <SubghzApp_Init+0x178>)
 800aaa0:	4a4c      	ldr	r2, [pc, #304]	; (800abd4 <SubghzApp_Init+0x184>)
 800aaa2:	605a      	str	r2, [r3, #4]
	  RadioEvents.RxTimeout = OnRxTimeout;
 800aaa4:	4b48      	ldr	r3, [pc, #288]	; (800abc8 <SubghzApp_Init+0x178>)
 800aaa6:	4a4c      	ldr	r2, [pc, #304]	; (800abd8 <SubghzApp_Init+0x188>)
 800aaa8:	60da      	str	r2, [r3, #12]
	  RadioEvents.RxError = OnRxError;
 800aaaa:	4b47      	ldr	r3, [pc, #284]	; (800abc8 <SubghzApp_Init+0x178>)
 800aaac:	4a4b      	ldr	r2, [pc, #300]	; (800abdc <SubghzApp_Init+0x18c>)
 800aaae:	611a      	str	r2, [r3, #16]

	  Radio.Init(&RadioEvents);
 800aab0:	4b4b      	ldr	r3, [pc, #300]	; (800abe0 <SubghzApp_Init+0x190>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4844      	ldr	r0, [pc, #272]	; (800abc8 <SubghzApp_Init+0x178>)
 800aab6:	4798      	blx	r3

	  /*calculate random delay for synchronization*/
	    random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800aab8:	4b49      	ldr	r3, [pc, #292]	; (800abe0 <SubghzApp_Init+0x190>)
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	4798      	blx	r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	0d9b      	lsrs	r3, r3, #22
 800aac2:	461a      	mov	r2, r3
 800aac4:	4b47      	ldr	r3, [pc, #284]	; (800abe4 <SubghzApp_Init+0x194>)
 800aac6:	601a      	str	r2, [r3, #0]

	    /* Radio Set frequency */
	    Radio.SetChannel(RF_FREQUENCY);
 800aac8:	4b45      	ldr	r3, [pc, #276]	; (800abe0 <SubghzApp_Init+0x190>)
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	4846      	ldr	r0, [pc, #280]	; (800abe8 <SubghzApp_Init+0x198>)
 800aace:	4798      	blx	r3

	/* Radio configuration */
	#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
	      APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800aad0:	4b46      	ldr	r3, [pc, #280]	; (800abec <SubghzApp_Init+0x19c>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	2002      	movs	r0, #2
 800aad8:	f001 faba 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800aadc:	4b44      	ldr	r3, [pc, #272]	; (800abf0 <SubghzApp_Init+0x1a0>)
 800aade:	2200      	movs	r2, #0
 800aae0:	2100      	movs	r1, #0
 800aae2:	2002      	movs	r0, #2
 800aae4:	f001 fab4 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800aae8:	237d      	movs	r3, #125	; 0x7d
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4b41      	ldr	r3, [pc, #260]	; (800abf4 <SubghzApp_Init+0x1a4>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2002      	movs	r0, #2
 800aaf4:	f001 faac 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	      APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800aaf8:	2307      	movs	r3, #7
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	4b3e      	ldr	r3, [pc, #248]	; (800abf8 <SubghzApp_Init+0x1a8>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	2100      	movs	r1, #0
 800ab02:	2002      	movs	r0, #2
 800ab04:	f001 faa4 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800ab08:	4b35      	ldr	r3, [pc, #212]	; (800abe0 <SubghzApp_Init+0x190>)
 800ab0a:	69dc      	ldr	r4, [r3, #28]
 800ab0c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ab10:	9308      	str	r3, [sp, #32]
 800ab12:	2300      	movs	r3, #0
 800ab14:	9307      	str	r3, [sp, #28]
 800ab16:	2300      	movs	r3, #0
 800ab18:	9306      	str	r3, [sp, #24]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	2301      	movs	r3, #1
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	2300      	movs	r3, #0
 800ab24:	9303      	str	r3, [sp, #12]
 800ab26:	2308      	movs	r3, #8
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	2307      	movs	r3, #7
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	2300      	movs	r3, #0
 800ab34:	2200      	movs	r2, #0
 800ab36:	210e      	movs	r1, #14
 800ab38:	2001      	movs	r0, #1
 800ab3a:	47a0      	blx	r4
	                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
	                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
	                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

	 Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800ab3c:	4b28      	ldr	r3, [pc, #160]	; (800abe0 <SubghzApp_Init+0x190>)
 800ab3e:	699c      	ldr	r4, [r3, #24]
 800ab40:	2301      	movs	r3, #1
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	2300      	movs	r3, #0
 800ab46:	9308      	str	r3, [sp, #32]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9307      	str	r3, [sp, #28]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9306      	str	r3, [sp, #24]
 800ab50:	2301      	movs	r3, #1
 800ab52:	9305      	str	r3, [sp, #20]
 800ab54:	2300      	movs	r3, #0
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9303      	str	r3, [sp, #12]
 800ab5c:	2305      	movs	r3, #5
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	2308      	movs	r3, #8
 800ab62:	9301      	str	r3, [sp, #4]
 800ab64:	2300      	movs	r3, #0
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	2207      	movs	r2, #7
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	2001      	movs	r0, #1
 800ab70:	47a0      	blx	r4
	                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
	                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
	                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

	  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800ab72:	4b1b      	ldr	r3, [pc, #108]	; (800abe0 <SubghzApp_Init+0x190>)
 800ab74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab76:	21ff      	movs	r1, #255	; 0xff
 800ab78:	2001      	movs	r0, #1
 800ab7a:	4798      	blx	r3
	#error "Please define a frequency band in the sys_conf.h file."
	#endif /* USE_MODEM_LORA | USE_MODEM_FSK */


	   /*fills tx buffer*/
	   memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800ab7c:	22ff      	movs	r2, #255	; 0xff
 800ab7e:	2100      	movs	r1, #0
 800ab80:	481e      	ldr	r0, [pc, #120]	; (800abfc <SubghzApp_Init+0x1ac>)
 800ab82:	f001 fd0f 	bl	800c5a4 <memset>

	   APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800ab86:	4b17      	ldr	r3, [pc, #92]	; (800abe4 <SubghzApp_Init+0x194>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4b1c      	ldr	r3, [pc, #112]	; (800ac00 <SubghzApp_Init+0x1b0>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	2100      	movs	r1, #0
 800ab92:	2001      	movs	r0, #1
 800ab94:	f001 fa5c 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
	   /*starts reception*/
	   Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800ab98:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <SubghzApp_Init+0x190>)
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9c:	4a11      	ldr	r2, [pc, #68]	; (800abe4 <SubghzApp_Init+0x194>)
 800ab9e:	6812      	ldr	r2, [r2, #0]
 800aba0:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3

	  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_PingPong_Process), UTIL_SEQ_RFU, PingPong_Process);
 800aba8:	4a16      	ldr	r2, [pc, #88]	; (800ac04 <SubghzApp_Init+0x1b4>)
 800abaa:	2100      	movs	r1, #0
 800abac:	2001      	movs	r0, #1
 800abae:	f000 ff0f 	bl	800b9d0 <UTIL_SEQ_RegTask>

  /* USER CODE END SubghzApp_Init_2 */
}
 800abb2:	bf00      	nop
 800abb4:	3704      	adds	r7, #4
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd90      	pop	{r4, r7, pc}
 800abba:	bf00      	nop
 800abbc:	0800c6ac 	.word	0x0800c6ac
 800abc0:	0800c6bc 	.word	0x0800c6bc
 800abc4:	0800c6e0 	.word	0x0800c6e0
 800abc8:	20000530 	.word	0x20000530
 800abcc:	0800ae2d 	.word	0x0800ae2d
 800abd0:	0800ae59 	.word	0x0800ae59
 800abd4:	0800af6d 	.word	0x0800af6d
 800abd8:	0800af99 	.word	0x0800af99
 800abdc:	0800afc5 	.word	0x0800afc5
 800abe0:	0800c9f0 	.word	0x0800c9f0
 800abe4:	2000052c 	.word	0x2000052c
 800abe8:	33bca100 	.word	0x33bca100
 800abec:	0800c704 	.word	0x0800c704
 800abf0:	0800c718 	.word	0x0800c718
 800abf4:	0800c72c 	.word	0x0800c72c
 800abf8:	0800c740 	.word	0x0800c740
 800abfc:	20000428 	.word	0x20000428
 800ac00:	0800c750 	.word	0x0800c750
 800ac04:	0800ac09 	.word	0x0800ac09

0800ac08 <PingPong_Process>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void PingPong_Process(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800ac0c:	4b77      	ldr	r3, [pc, #476]	; (800adec <PingPong_Process+0x1e4>)
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	4798      	blx	r3

  switch (State)
 800ac12:	4b77      	ldr	r3, [pc, #476]	; (800adf0 <PingPong_Process+0x1e8>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	f200 80e1 	bhi.w	800ade0 <PingPong_Process+0x1d8>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <PingPong_Process+0x1c>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800ad71 	.word	0x0800ad71
 800ac2c:	0800ad71 	.word	0x0800ad71
 800ac30:	0800ad59 	.word	0x0800ad59
 800ac34:	0800adc9 	.word	0x0800adc9
  {
    case RX:

      if (isMaster == true)
 800ac38:	4b6e      	ldr	r3, [pc, #440]	; (800adf4 <PingPong_Process+0x1ec>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d051      	beq.n	800ace4 <PingPong_Process+0xdc>
      {
        if (RxBufferSize > 0)
 800ac40:	4b6d      	ldr	r3, [pc, #436]	; (800adf8 <PingPong_Process+0x1f0>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80cd 	beq.w	800ade4 <PingPong_Process+0x1dc>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	496b      	ldr	r1, [pc, #428]	; (800adfc <PingPong_Process+0x1f4>)
 800ac4e:	486c      	ldr	r0, [pc, #432]	; (800ae00 <PingPong_Process+0x1f8>)
 800ac50:	f001 fcb0 	bl	800c5b4 <strncmp>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d11e      	bne.n	800ac98 <PingPong_Process+0x90>
          {
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800ac5a:	4b64      	ldr	r3, [pc, #400]	; (800adec <PingPong_Process+0x1e4>)
 800ac5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5e:	4798      	blx	r3
 800ac60:	4603      	mov	r3, r0
 800ac62:	33c8      	adds	r3, #200	; 0xc8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7f6 f9d9 	bl	800101c <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800ac6a:	4b66      	ldr	r3, [pc, #408]	; (800ae04 <PingPong_Process+0x1fc>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	2100      	movs	r1, #0
 800ac70:	2001      	movs	r0, #1
 800ac72:	f001 f9ed 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ac76:	4b64      	ldr	r3, [pc, #400]	; (800ae08 <PingPong_Process+0x200>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	f001 f9e7 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ac82:	2206      	movs	r2, #6
 800ac84:	4961      	ldr	r1, [pc, #388]	; (800ae0c <PingPong_Process+0x204>)
 800ac86:	4862      	ldr	r0, [pc, #392]	; (800ae10 <PingPong_Process+0x208>)
 800ac88:	f001 fc7e 	bl	800c588 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ac8c:	4b57      	ldr	r3, [pc, #348]	; (800adec <PingPong_Process+0x1e4>)
 800ac8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac90:	2140      	movs	r1, #64	; 0x40
 800ac92:	485f      	ldr	r0, [pc, #380]	; (800ae10 <PingPong_Process+0x208>)
 800ac94:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800ac96:	e0a5      	b.n	800ade4 <PingPong_Process+0x1dc>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800ac98:	2206      	movs	r2, #6
 800ac9a:	495c      	ldr	r1, [pc, #368]	; (800ae0c <PingPong_Process+0x204>)
 800ac9c:	4858      	ldr	r0, [pc, #352]	; (800ae00 <PingPong_Process+0x1f8>)
 800ac9e:	f001 fc89 	bl	800c5b4 <strncmp>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10e      	bne.n	800acc6 <PingPong_Process+0xbe>
            isMaster = false;
 800aca8:	4b52      	ldr	r3, [pc, #328]	; (800adf4 <PingPong_Process+0x1ec>)
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800acae:	4b59      	ldr	r3, [pc, #356]	; (800ae14 <PingPong_Process+0x20c>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	2100      	movs	r1, #0
 800acb4:	2001      	movs	r0, #1
 800acb6:	f001 f9cb 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800acba:	4b4c      	ldr	r3, [pc, #304]	; (800adec <PingPong_Process+0x1e4>)
 800acbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800acc2:	4798      	blx	r3
      break;
 800acc4:	e08e      	b.n	800ade4 <PingPong_Process+0x1dc>
            isMaster = true;
 800acc6:	4b4b      	ldr	r3, [pc, #300]	; (800adf4 <PingPong_Process+0x1ec>)
 800acc8:	2201      	movs	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800accc:	4b52      	ldr	r3, [pc, #328]	; (800ae18 <PingPong_Process+0x210>)
 800acce:	2201      	movs	r2, #1
 800acd0:	2100      	movs	r1, #0
 800acd2:	2001      	movs	r0, #1
 800acd4:	f001 f9bc 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800acd8:	4b44      	ldr	r3, [pc, #272]	; (800adec <PingPong_Process+0x1e4>)
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ace0:	4798      	blx	r3
      break;
 800ace2:	e07f      	b.n	800ade4 <PingPong_Process+0x1dc>
        if (RxBufferSize > 0)
 800ace4:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <PingPong_Process+0x1f0>)
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d07b      	beq.n	800ade4 <PingPong_Process+0x1dc>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800acec:	2206      	movs	r2, #6
 800acee:	4947      	ldr	r1, [pc, #284]	; (800ae0c <PingPong_Process+0x204>)
 800acf0:	4843      	ldr	r0, [pc, #268]	; (800ae00 <PingPong_Process+0x1f8>)
 800acf2:	f001 fc5f 	bl	800c5b4 <strncmp>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d11e      	bne.n	800ad3a <PingPong_Process+0x132>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800acfc:	4b3b      	ldr	r3, [pc, #236]	; (800adec <PingPong_Process+0x1e4>)
 800acfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad00:	4798      	blx	r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	33c8      	adds	r3, #200	; 0xc8
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f6 f988 	bl	800101c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800ad0c:	4b43      	ldr	r3, [pc, #268]	; (800ae1c <PingPong_Process+0x214>)
 800ad0e:	2201      	movs	r2, #1
 800ad10:	2100      	movs	r1, #0
 800ad12:	2001      	movs	r0, #1
 800ad14:	f001 f99c 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800ad18:	4b41      	ldr	r3, [pc, #260]	; (800ae20 <PingPong_Process+0x218>)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	2001      	movs	r0, #1
 800ad20:	f001 f996 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800ad24:	2204      	movs	r2, #4
 800ad26:	4935      	ldr	r1, [pc, #212]	; (800adfc <PingPong_Process+0x1f4>)
 800ad28:	4839      	ldr	r0, [pc, #228]	; (800ae10 <PingPong_Process+0x208>)
 800ad2a:	f001 fc2d 	bl	800c588 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ad2e:	4b2f      	ldr	r3, [pc, #188]	; (800adec <PingPong_Process+0x1e4>)
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	2140      	movs	r1, #64	; 0x40
 800ad34:	4836      	ldr	r0, [pc, #216]	; (800ae10 <PingPong_Process+0x208>)
 800ad36:	4798      	blx	r3
      break;
 800ad38:	e054      	b.n	800ade4 <PingPong_Process+0x1dc>
            isMaster = true;
 800ad3a:	4b2e      	ldr	r3, [pc, #184]	; (800adf4 <PingPong_Process+0x1ec>)
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800ad40:	4b35      	ldr	r3, [pc, #212]	; (800ae18 <PingPong_Process+0x210>)
 800ad42:	2201      	movs	r2, #1
 800ad44:	2100      	movs	r1, #0
 800ad46:	2001      	movs	r0, #1
 800ad48:	f001 f982 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ad4c:	4b27      	ldr	r3, [pc, #156]	; (800adec <PingPong_Process+0x1e4>)
 800ad4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ad54:	4798      	blx	r3
      break;
 800ad56:	e045      	b.n	800ade4 <PingPong_Process+0x1dc>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800ad58:	4b32      	ldr	r3, [pc, #200]	; (800ae24 <PingPong_Process+0x21c>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	2001      	movs	r0, #1
 800ad60:	f001 f976 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ad64:	4b21      	ldr	r3, [pc, #132]	; (800adec <PingPong_Process+0x1e4>)
 800ad66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ad6c:	4798      	blx	r3
      break;
 800ad6e:	e03a      	b.n	800ade6 <PingPong_Process+0x1de>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800ad70:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <PingPong_Process+0x1ec>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01b      	beq.n	800adb0 <PingPong_Process+0x1a8>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800ad78:	4b1c      	ldr	r3, [pc, #112]	; (800adec <PingPong_Process+0x1e4>)
 800ad7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad7c:	4798      	blx	r3
 800ad7e:	4603      	mov	r3, r0
 800ad80:	4a29      	ldr	r2, [pc, #164]	; (800ae28 <PingPong_Process+0x220>)
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	33c8      	adds	r3, #200	; 0xc8
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f6 f947 	bl	800101c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ad8e:	4b1e      	ldr	r3, [pc, #120]	; (800ae08 <PingPong_Process+0x200>)
 800ad90:	2201      	movs	r2, #1
 800ad92:	2100      	movs	r1, #0
 800ad94:	2001      	movs	r0, #1
 800ad96:	f001 f95b 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ad9a:	2206      	movs	r2, #6
 800ad9c:	491b      	ldr	r1, [pc, #108]	; (800ae0c <PingPong_Process+0x204>)
 800ad9e:	481c      	ldr	r0, [pc, #112]	; (800ae10 <PingPong_Process+0x208>)
 800ada0:	f001 fbf2 	bl	800c588 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800ada4:	4b11      	ldr	r3, [pc, #68]	; (800adec <PingPong_Process+0x1e4>)
 800ada6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada8:	2140      	movs	r1, #64	; 0x40
 800adaa:	4819      	ldr	r0, [pc, #100]	; (800ae10 <PingPong_Process+0x208>)
 800adac:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800adae:	e01a      	b.n	800ade6 <PingPong_Process+0x1de>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800adb0:	4b18      	ldr	r3, [pc, #96]	; (800ae14 <PingPong_Process+0x20c>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	2100      	movs	r1, #0
 800adb6:	2001      	movs	r0, #1
 800adb8:	f001 f94a 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800adbc:	4b0b      	ldr	r3, [pc, #44]	; (800adec <PingPong_Process+0x1e4>)
 800adbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800adc4:	4798      	blx	r3
      break;
 800adc6:	e00e      	b.n	800ade6 <PingPong_Process+0x1de>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800adc8:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <PingPong_Process+0x20c>)
 800adca:	2201      	movs	r2, #1
 800adcc:	2100      	movs	r1, #0
 800adce:	2001      	movs	r0, #1
 800add0:	f001 f93e 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <PingPong_Process+0x1e4>)
 800add6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800addc:	4798      	blx	r3
      break;
 800adde:	e002      	b.n	800ade6 <PingPong_Process+0x1de>
    default:
      break;
 800ade0:	bf00      	nop
 800ade2:	e000      	b.n	800ade6 <PingPong_Process+0x1de>
      break;
 800ade4:	bf00      	nop
  }
}
 800ade6:	bf00      	nop
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	0800c9f0 	.word	0x0800c9f0
 800adf0:	20000009 	.word	0x20000009
 800adf4:	2000000a 	.word	0x2000000a
 800adf8:	20000528 	.word	0x20000528
 800adfc:	0800c75c 	.word	0x0800c75c
 800ae00:	20000328 	.word	0x20000328
 800ae04:	0800c764 	.word	0x0800c764
 800ae08:	0800c770 	.word	0x0800c770
 800ae0c:	0800c784 	.word	0x0800c784
 800ae10:	20000428 	.word	0x20000428
 800ae14:	0800c78c 	.word	0x0800c78c
 800ae18:	0800c7a0 	.word	0x0800c7a0
 800ae1c:	0800c7b4 	.word	0x0800c7b4
 800ae20:	0800c7c0 	.word	0x0800c7c0
 800ae24:	0800c7d4 	.word	0x0800c7d4
 800ae28:	2000052c 	.word	0x2000052c

0800ae2c <OnTxDone>:

static void OnTxDone(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	 APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <OnTxDone+0x24>)
 800ae32:	2201      	movs	r2, #1
 800ae34:	2100      	movs	r1, #0
 800ae36:	2001      	movs	r0, #1
 800ae38:	f001 f90a 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>

	  State = TX;
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <OnTxDone+0x28>)
 800ae3e:	2204      	movs	r2, #4
 800ae40:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800ae42:	2100      	movs	r1, #0
 800ae44:	2001      	movs	r0, #1
 800ae46:	f000 fde5 	bl	800ba14 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxDone */
}
 800ae4a:	bf00      	nop
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800c7e0 	.word	0x0800c7e0
 800ae54:	20000009 	.word	0x20000009

0800ae58 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b088      	sub	sp, #32
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	4608      	mov	r0, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	817b      	strh	r3, [r7, #10]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	813b      	strh	r3, [r7, #8]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800ae72:	4b34      	ldr	r3, [pc, #208]	; (800af44 <OnRxDone+0xec>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	2100      	movs	r1, #0
 800ae78:	2001      	movs	r0, #1
 800ae7a:	f001 f8e9 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800ae7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ae82:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ae86:	9201      	str	r2, [sp, #4]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <OnRxDone+0xf0>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	2100      	movs	r1, #0
 800ae90:	2001      	movs	r0, #1
 800ae92:	f001 f8dd 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800ae96:	4a2d      	ldr	r2, [pc, #180]	; (800af4c <OnRxDone+0xf4>)
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800ae9c:	4b2c      	ldr	r3, [pc, #176]	; (800af50 <OnRxDone+0xf8>)
 800ae9e:	2201      	movs	r2, #1
 800aea0:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800aea2:	22ff      	movs	r2, #255	; 0xff
 800aea4:	2100      	movs	r1, #0
 800aea6:	482b      	ldr	r0, [pc, #172]	; (800af54 <OnRxDone+0xfc>)
 800aea8:	f001 fb7c 	bl	800c5a4 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800aeac:	4a2a      	ldr	r2, [pc, #168]	; (800af58 <OnRxDone+0x100>)
 800aeae:	897b      	ldrh	r3, [r7, #10]
 800aeb0:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800aeb2:	4b29      	ldr	r3, [pc, #164]	; (800af58 <OnRxDone+0x100>)
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	2bff      	cmp	r3, #255	; 0xff
 800aeb8:	d806      	bhi.n	800aec8 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800aeba:	4b27      	ldr	r3, [pc, #156]	; (800af58 <OnRxDone+0x100>)
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	68f9      	ldr	r1, [r7, #12]
 800aec2:	4824      	ldr	r0, [pc, #144]	; (800af54 <OnRxDone+0xfc>)
 800aec4:	f001 fb60 	bl	800c588 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800aec8:	893b      	ldrh	r3, [r7, #8]
 800aeca:	b25a      	sxtb	r2, r3
 800aecc:	4b23      	ldr	r3, [pc, #140]	; (800af5c <OnRxDone+0x104>)
 800aece:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800aed0:	897b      	ldrh	r3, [r7, #10]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4b22      	ldr	r3, [pc, #136]	; (800af60 <OnRxDone+0x108>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	2100      	movs	r1, #0
 800aeda:	2003      	movs	r0, #3
 800aedc:	f001 f8b8 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e01d      	b.n	800af22 <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800aee6:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <OnRxDone+0xfc>)
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4413      	add	r3, r2
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <OnRxDone+0x10c>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	2100      	movs	r1, #0
 800aef6:	2003      	movs	r0, #3
 800aef8:	f001 f8aa 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	425a      	negs	r2, r3
 800af00:	f003 030f 	and.w	r3, r3, #15
 800af04:	f002 020f 	and.w	r2, r2, #15
 800af08:	bf58      	it	pl
 800af0a:	4253      	negpl	r3, r2
 800af0c:	2b0f      	cmp	r3, #15
 800af0e:	d105      	bne.n	800af1c <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800af10:	4b15      	ldr	r3, [pc, #84]	; (800af68 <OnRxDone+0x110>)
 800af12:	2200      	movs	r2, #0
 800af14:	2100      	movs	r1, #0
 800af16:	2003      	movs	r0, #3
 800af18:	f001 f89a 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	3301      	adds	r3, #1
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b3f      	cmp	r3, #63	; 0x3f
 800af26:	ddde      	ble.n	800aee6 <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800af28:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <OnRxDone+0x110>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	2100      	movs	r1, #0
 800af2e:	2003      	movs	r0, #3
 800af30:	f001 f88e 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800af34:	2100      	movs	r1, #0
 800af36:	2001      	movs	r0, #1
 800af38:	f000 fd6c 	bl	800ba14 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800af3c:	bf00      	nop
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	0800c7ec 	.word	0x0800c7ec
 800af48:	0800c7f8 	.word	0x0800c7f8
 800af4c:	20000325 	.word	0x20000325
 800af50:	20000009 	.word	0x20000009
 800af54:	20000328 	.word	0x20000328
 800af58:	20000528 	.word	0x20000528
 800af5c:	20000324 	.word	0x20000324
 800af60:	0800c81c 	.word	0x0800c81c
 800af64:	0800c830 	.word	0x0800c830
 800af68:	0800c838 	.word	0x0800c838

0800af6c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <OnTxTimeout+0x24>)
 800af72:	2201      	movs	r2, #1
 800af74:	2100      	movs	r1, #0
 800af76:	2001      	movs	r0, #1
 800af78:	f001 f86a 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>

	  State = TX_TIMEOUT;
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <OnTxTimeout+0x28>)
 800af7e:	2205      	movs	r2, #5
 800af80:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800af82:	2100      	movs	r1, #0
 800af84:	2001      	movs	r0, #1
 800af86:	f000 fd45 	bl	800ba14 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxTimeout */
}
 800af8a:	bf00      	nop
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	0800c83c 	.word	0x0800c83c
 800af94:	20000009 	.word	0x20000009

0800af98 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <OnRxTimeout+0x24>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	2100      	movs	r1, #0
 800afa2:	2001      	movs	r0, #1
 800afa4:	f001 f854 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_TIMEOUT;
 800afa8:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <OnRxTimeout+0x28>)
 800afaa:	2202      	movs	r2, #2
 800afac:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800afae:	2100      	movs	r1, #0
 800afb0:	2001      	movs	r0, #1
 800afb2:	f000 fd2f 	bl	800ba14 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxTimeout */
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	0800c84c 	.word	0x0800c84c
 800afc0:	20000009 	.word	0x20000009

0800afc4 <OnRxError>:

static void OnRxError(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800afc8:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <OnRxError+0x24>)
 800afca:	2201      	movs	r2, #1
 800afcc:	2100      	movs	r1, #0
 800afce:	2001      	movs	r0, #1
 800afd0:	f001 f83e 	bl	800c050 <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_ERROR;
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <OnRxError+0x28>)
 800afd6:	2203      	movs	r2, #3
 800afd8:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800afda:	2100      	movs	r1, #0
 800afdc:	2001      	movs	r0, #1
 800afde:	f000 fd19 	bl	800ba14 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxError */
}
 800afe2:	bf00      	nop
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	0800c85c 	.word	0x0800c85c
 800afec:	20000009 	.word	0x20000009

0800aff0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aff4:	f7f6 fd4f 	bl	8001a96 <BSP_RADIO_Init>
 800aff8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800affa:	4618      	mov	r0, r3
 800affc:	bd80      	pop	{r7, pc}

0800affe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	4603      	mov	r3, r0
 800b006:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f6 fd74 	bl	8001af8 <BSP_RADIO_ConfigRFSwitch>
 800b010:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b012:	4618      	mov	r0, r3
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b01e:	f7f6 fdb9 	bl	8001b94 <BSP_RADIO_GetTxConfig>
 800b022:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}

0800b028 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b02c:	f7f6 fdb9 	bl	8001ba2 <BSP_RADIO_IsTCXO>
 800b030:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b032:	4618      	mov	r0, r3
 800b034:	bd80      	pop	{r7, pc}

0800b036 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b03a:	f7f6 fdb9 	bl	8001bb0 <BSP_RADIO_IsDCDC>
 800b03e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b040:	4618      	mov	r0, r3
 800b042:	bd80      	pop	{r7, pc}

0800b044 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	4618      	mov	r0, r3
 800b052:	f7f6 fdb4 	bl	8001bbe <BSP_RADIO_GetRFOMaxPowerConfig>
 800b056:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <UTIL_LPM_Init+0x18>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b06a:	4b04      	ldr	r3, [pc, #16]	; (800b07c <UTIL_LPM_Init+0x1c>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b070:	bf00      	nop
 800b072:	46bd      	mov	sp, r7
 800b074:	bc80      	pop	{r7}
 800b076:	4770      	bx	lr
 800b078:	2000054c 	.word	0x2000054c
 800b07c:	20000550 	.word	0x20000550

0800b080 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b08c:	f3ef 8310 	mrs	r3, PRIMASK
 800b090:	613b      	str	r3, [r7, #16]
  return(result);
 800b092:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b096:	b672      	cpsid	i
}
 800b098:	bf00      	nop
  
  switch( state )
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <UTIL_LPM_SetStopMode+0x32>
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d10e      	bne.n	800b0c2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b0a4:	4b0d      	ldr	r3, [pc, #52]	; (800b0dc <UTIL_LPM_SetStopMode+0x5c>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	4a0b      	ldr	r2, [pc, #44]	; (800b0dc <UTIL_LPM_SetStopMode+0x5c>)
 800b0ae:	6013      	str	r3, [r2, #0]
      break;
 800b0b0:	e008      	b.n	800b0c4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	43da      	mvns	r2, r3
 800b0b6:	4b09      	ldr	r3, [pc, #36]	; (800b0dc <UTIL_LPM_SetStopMode+0x5c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <UTIL_LPM_SetStopMode+0x5c>)
 800b0be:	6013      	str	r3, [r2, #0]
      break;
 800b0c0:	e000      	b.n	800b0c4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b0c2:	bf00      	nop
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f383 8810 	msr	PRIMASK, r3
}
 800b0ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b0d0:	bf00      	nop
 800b0d2:	371c      	adds	r7, #28
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bc80      	pop	{r7}
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	2000054c 	.word	0x2000054c

0800b0e0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800b0f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b0f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0f6:	b672      	cpsid	i
}
 800b0f8:	bf00      	nop
  
  switch(state)
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d008      	beq.n	800b112 <UTIL_LPM_SetOffMode+0x32>
 800b100:	2b01      	cmp	r3, #1
 800b102:	d10e      	bne.n	800b122 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <UTIL_LPM_SetOffMode+0x5c>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	4a0b      	ldr	r2, [pc, #44]	; (800b13c <UTIL_LPM_SetOffMode+0x5c>)
 800b10e:	6013      	str	r3, [r2, #0]
      break;
 800b110:	e008      	b.n	800b124 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	43da      	mvns	r2, r3
 800b116:	4b09      	ldr	r3, [pc, #36]	; (800b13c <UTIL_LPM_SetOffMode+0x5c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4013      	ands	r3, r2
 800b11c:	4a07      	ldr	r2, [pc, #28]	; (800b13c <UTIL_LPM_SetOffMode+0x5c>)
 800b11e:	6013      	str	r3, [r2, #0]
      break;
 800b120:	e000      	b.n	800b124 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b122:	bf00      	nop
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f383 8810 	msr	PRIMASK, r3
}
 800b12e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b130:	bf00      	nop
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000550 	.word	0x20000550

0800b140 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b146:	f3ef 8310 	mrs	r3, PRIMASK
 800b14a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b14c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b14e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b150:	b672      	cpsid	i
}
 800b152:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b154:	4b12      	ldr	r3, [pc, #72]	; (800b1a0 <UTIL_LPM_EnterLowPower+0x60>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d006      	beq.n	800b16a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b15c:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b162:	4b10      	ldr	r3, [pc, #64]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	4798      	blx	r3
 800b168:	e010      	b.n	800b18c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b16a:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <UTIL_LPM_EnterLowPower+0x68>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	4798      	blx	r3
 800b17e:	e005      	b.n	800b18c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b186:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <UTIL_LPM_EnterLowPower+0x64>)
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	4798      	blx	r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f383 8810 	msr	PRIMASK, r3
}
 800b196:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	2000054c 	.word	0x2000054c
 800b1a4:	0800c8c0 	.word	0x0800c8c0
 800b1a8:	20000550 	.word	0x20000550

0800b1ac <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b1c2:	e007      	b.n	800b1d4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	1c53      	adds	r3, r2, #1
 800b1c8:	613b      	str	r3, [r7, #16]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	1c59      	adds	r1, r3, #1
 800b1ce:	6179      	str	r1, [r7, #20]
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b1d4:	88fb      	ldrh	r3, [r7, #6]
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	80fa      	strh	r2, [r7, #6]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1f2      	bne.n	800b1c4 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr

0800b1ea <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b1fe:	e004      	b.n	800b20a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	60fa      	str	r2, [r7, #12]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b20a:	883b      	ldrh	r3, [r7, #0]
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	803a      	strh	r2, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1f5      	bne.n	800b200 <UTIL_MEM_set_8+0x16>
  }
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bc80      	pop	{r7}
 800b21e:	4770      	bx	lr

0800b220 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b220:	b082      	sub	sp, #8
 800b222:	b480      	push	{r7}
 800b224:	b087      	sub	sp, #28
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	1d38      	adds	r0, r7, #4
 800b22c:	e880 0006 	stmia.w	r0, {r1, r2}
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	2300      	movs	r3, #0
 800b238:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	4413      	add	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b242:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b246:	b29a      	uxth	r2, r3
 800b248:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	4413      	add	r3, r2
 800b250:	b29b      	uxth	r3, r3
 800b252:	b21b      	sxth	r3, r3
 800b254:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b256:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b25a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b25e:	db0a      	blt.n	800b276 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b266:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800b270:	b29b      	uxth	r3, r3
 800b272:	b21b      	sxth	r3, r3
 800b274:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	461a      	mov	r2, r3
 800b27a:	f107 0310 	add.w	r3, r7, #16
 800b27e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b282:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bc80      	pop	{r7}
 800b28e:	b002      	add	sp, #8
 800b290:	4770      	bx	lr
	...

0800b294 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08a      	sub	sp, #40	; 0x28
 800b298:	af02      	add	r7, sp, #8
 800b29a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b29c:	2300      	movs	r3, #0
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b2ac:	4b14      	ldr	r3, [pc, #80]	; (800b300 <SysTimeGet+0x6c>)
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	f107 0218 	add.w	r2, r7, #24
 800b2b4:	3204      	adds	r2, #4
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	4798      	blx	r3
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b2be:	4b10      	ldr	r3, [pc, #64]	; (800b300 <SysTimeGet+0x6c>)
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	4798      	blx	r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	b21b      	sxth	r3, r3
 800b2c8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b2ca:	4b0d      	ldr	r3, [pc, #52]	; (800b300 <SysTimeGet+0x6c>)
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	4798      	blx	r3
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b2d4:	f107 0010 	add.w	r0, r7, #16
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	f107 0208 	add.w	r2, r7, #8
 800b2e2:	ca06      	ldmia	r2, {r1, r2}
 800b2e4:	f7ff ff9c 	bl	800b220 <SysTimeAdd>

  return sysTime;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f107 0310 	add.w	r3, r7, #16
 800b2f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	3720      	adds	r7, #32
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	0800c9a4 	.word	0x0800c9a4

0800b304 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b310:	e00e      	b.n	800b330 <ee_skip_atoi+0x2c>
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	4618      	mov	r0, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	1c59      	adds	r1, r3, #1
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	6011      	str	r1, [r2, #0]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	4403      	add	r3, r0
 800b32c:	3b30      	subs	r3, #48	; 0x30
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b2f      	cmp	r3, #47	; 0x2f
 800b338:	d904      	bls.n	800b344 <ee_skip_atoi+0x40>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b39      	cmp	r3, #57	; 0x39
 800b342:	d9e6      	bls.n	800b312 <ee_skip_atoi+0xe>
  return i;
 800b344:	68fb      	ldr	r3, [r7, #12]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr

0800b350 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b350:	b480      	push	{r7}
 800b352:	b099      	sub	sp, #100	; 0x64
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b35e:	4b71      	ldr	r3, [pc, #452]	; (800b524 <ee_number+0x1d4>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <ee_number+0x24>
 800b36e:	4b6e      	ldr	r3, [pc, #440]	; (800b528 <ee_number+0x1d8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b01      	cmp	r3, #1
 800b378:	dd02      	ble.n	800b380 <ee_number+0x30>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b24      	cmp	r3, #36	; 0x24
 800b37e:	dd01      	ble.n	800b384 <ee_number+0x34>
 800b380:	2300      	movs	r3, #0
 800b382:	e0ca      	b.n	800b51a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <ee_number+0x42>
 800b38e:	2330      	movs	r3, #48	; 0x30
 800b390:	e000      	b.n	800b394 <ee_number+0x44>
 800b392:	2320      	movs	r3, #32
 800b394:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800b39e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <ee_number+0x70>
  {
    if (num < 0)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	da08      	bge.n	800b3c0 <ee_number+0x70>
    {
      sign = '-';
 800b3ae:	232d      	movs	r3, #45	; 0x2d
 800b3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	425b      	negs	r3, r3
 800b3b8:	607b      	str	r3, [r7, #4]
      size--;
 800b3ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d11e      	bne.n	800b408 <ee_number+0xb8>
    tmp[i++] = '0';
 800b3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	657a      	str	r2, [r7, #84]	; 0x54
 800b3d0:	3360      	adds	r3, #96	; 0x60
 800b3d2:	443b      	add	r3, r7
 800b3d4:	2230      	movs	r2, #48	; 0x30
 800b3d6:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b3da:	e018      	b.n	800b40e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3e4:	fb01 f202 	mul.w	r2, r1, r2
 800b3e8:	1a9b      	subs	r3, r3, r2
 800b3ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3ec:	441a      	add	r2, r3
 800b3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3f0:	1c59      	adds	r1, r3, #1
 800b3f2:	6579      	str	r1, [r7, #84]	; 0x54
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	3360      	adds	r3, #96	; 0x60
 800b3f8:	443b      	add	r3, r7
 800b3fa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	fbb2 f3f3 	udiv	r3, r2, r3
 800b406:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e6      	bne.n	800b3dc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b40e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b412:	429a      	cmp	r2, r3
 800b414:	dd01      	ble.n	800b41a <ee_number+0xca>
 800b416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b418:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800b41a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d112      	bne.n	800b452 <ee_number+0x102>
 800b42c:	e00c      	b.n	800b448 <ee_number+0xf8>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	60fa      	str	r2, [r7, #12]
 800b434:	2220      	movs	r2, #32
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	60bb      	str	r3, [r7, #8]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <ee_number+0xf8>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	e068      	b.n	800b51a <ee_number+0x1ca>
 800b448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b44a:	1e5a      	subs	r2, r3, #1
 800b44c:	66ba      	str	r2, [r7, #104]	; 0x68
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dced      	bgt.n	800b42e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b456:	2b00      	cmp	r3, #0
 800b458:	d01b      	beq.n	800b492 <ee_number+0x142>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	60fa      	str	r2, [r7, #12]
 800b460:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	3b01      	subs	r3, #1
 800b46a:	60bb      	str	r3, [r7, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10f      	bne.n	800b492 <ee_number+0x142>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	e051      	b.n	800b51a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	60fa      	str	r2, [r7, #12]
 800b47c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	3b01      	subs	r3, #1
 800b486:	60bb      	str	r3, [r7, #8]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <ee_number+0x142>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	e043      	b.n	800b51a <ee_number+0x1ca>
 800b492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b494:	1e5a      	subs	r2, r3, #1
 800b496:	66ba      	str	r2, [r7, #104]	; 0x68
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dcec      	bgt.n	800b476 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b49c:	e00c      	b.n	800b4b8 <ee_number+0x168>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	60fa      	str	r2, [r7, #12]
 800b4a4:	2230      	movs	r2, #48	; 0x30
 800b4a6:	701a      	strb	r2, [r3, #0]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	60bb      	str	r3, [r7, #8]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <ee_number+0x168>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	e030      	b.n	800b51a <ee_number+0x1ca>
 800b4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ba:	1e5a      	subs	r2, r3, #1
 800b4bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	dbec      	blt.n	800b49e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b4c4:	e010      	b.n	800b4e8 <ee_number+0x198>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	60fa      	str	r2, [r7, #12]
 800b4cc:	f107 0110 	add.w	r1, r7, #16
 800b4d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4d2:	440a      	add	r2, r1
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	60bb      	str	r3, [r7, #8]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <ee_number+0x198>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	e018      	b.n	800b51a <ee_number+0x1ca>
 800b4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ea:	1e5a      	subs	r2, r3, #1
 800b4ec:	657a      	str	r2, [r7, #84]	; 0x54
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	dce9      	bgt.n	800b4c6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b4f2:	e00c      	b.n	800b50e <ee_number+0x1be>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	60fa      	str	r2, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	3b01      	subs	r3, #1
 800b502:	60bb      	str	r3, [r7, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <ee_number+0x1be>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	e005      	b.n	800b51a <ee_number+0x1ca>
 800b50e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b510:	1e5a      	subs	r2, r3, #1
 800b512:	66ba      	str	r2, [r7, #104]	; 0x68
 800b514:	2b00      	cmp	r3, #0
 800b516:	dced      	bgt.n	800b4f4 <ee_number+0x1a4>

  return str;
 800b518:	68fb      	ldr	r3, [r7, #12]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3764      	adds	r7, #100	; 0x64
 800b51e:	46bd      	mov	sp, r7
 800b520:	bc80      	pop	{r7}
 800b522:	4770      	bx	lr
 800b524:	2000000c 	.word	0x2000000c
 800b528:	20000010 	.word	0x20000010

0800b52c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b092      	sub	sp, #72	; 0x48
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dc01      	bgt.n	800b544 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b540:	2300      	movs	r3, #0
 800b542:	e142      	b.n	800b7ca <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b548:	e12a      	b.n	800b7a0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	3b01      	subs	r3, #1
 800b554:	429a      	cmp	r2, r3
 800b556:	f280 8131 	bge.w	800b7bc <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b25      	cmp	r3, #37	; 0x25
 800b560:	d006      	beq.n	800b570 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	1c59      	adds	r1, r3, #1
 800b568:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b56a:	7812      	ldrb	r2, [r2, #0]
 800b56c:	701a      	strb	r2, [r3, #0]
      continue;
 800b56e:	e114      	b.n	800b79a <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3301      	adds	r3, #1
 800b578:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b30      	cmp	r3, #48	; 0x30
 800b580:	d103      	bne.n	800b58a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	f043 0301 	orr.w	r3, r3, #1
 800b588:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b58e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b2f      	cmp	r3, #47	; 0x2f
 800b596:	d908      	bls.n	800b5aa <tiny_vsnprintf_like+0x7e>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b39      	cmp	r3, #57	; 0x39
 800b59e:	d804      	bhi.n	800b5aa <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b5a0:	1d3b      	adds	r3, r7, #4
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff feae 	bl	800b304 <ee_skip_atoi>
 800b5a8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5ae:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5b4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b5b6:	230a      	movs	r3, #10
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	3b58      	subs	r3, #88	; 0x58
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	f200 8094 	bhi.w	800b6ee <tiny_vsnprintf_like+0x1c2>
 800b5c6:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <tiny_vsnprintf_like+0xa0>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b6d7 	.word	0x0800b6d7
 800b5d0:	0800b6ef 	.word	0x0800b6ef
 800b5d4:	0800b6ef 	.word	0x0800b6ef
 800b5d8:	0800b6ef 	.word	0x0800b6ef
 800b5dc:	0800b6ef 	.word	0x0800b6ef
 800b5e0:	0800b6ef 	.word	0x0800b6ef
 800b5e4:	0800b6ef 	.word	0x0800b6ef
 800b5e8:	0800b6ef 	.word	0x0800b6ef
 800b5ec:	0800b6ef 	.word	0x0800b6ef
 800b5f0:	0800b6ef 	.word	0x0800b6ef
 800b5f4:	0800b6ef 	.word	0x0800b6ef
 800b5f8:	0800b65b 	.word	0x0800b65b
 800b5fc:	0800b6e5 	.word	0x0800b6e5
 800b600:	0800b6ef 	.word	0x0800b6ef
 800b604:	0800b6ef 	.word	0x0800b6ef
 800b608:	0800b6ef 	.word	0x0800b6ef
 800b60c:	0800b6ef 	.word	0x0800b6ef
 800b610:	0800b6e5 	.word	0x0800b6e5
 800b614:	0800b6ef 	.word	0x0800b6ef
 800b618:	0800b6ef 	.word	0x0800b6ef
 800b61c:	0800b6ef 	.word	0x0800b6ef
 800b620:	0800b6ef 	.word	0x0800b6ef
 800b624:	0800b6ef 	.word	0x0800b6ef
 800b628:	0800b6ef 	.word	0x0800b6ef
 800b62c:	0800b6ef 	.word	0x0800b6ef
 800b630:	0800b6ef 	.word	0x0800b6ef
 800b634:	0800b6ef 	.word	0x0800b6ef
 800b638:	0800b67b 	.word	0x0800b67b
 800b63c:	0800b6ef 	.word	0x0800b6ef
 800b640:	0800b73b 	.word	0x0800b73b
 800b644:	0800b6ef 	.word	0x0800b6ef
 800b648:	0800b6ef 	.word	0x0800b6ef
 800b64c:	0800b6df 	.word	0x0800b6df
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b656:	2220      	movs	r2, #32
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	61fb      	str	r3, [r7, #28]
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dcf4      	bgt.n	800b650 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	1d1a      	adds	r2, r3, #4
 800b66a:	603a      	str	r2, [r7, #0]
 800b66c:	6819      	ldr	r1, [r3, #0]
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b674:	b2ca      	uxtb	r2, r1
 800b676:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b678:	e08f      	b.n	800b79a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	603a      	str	r2, [r7, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <tiny_vsnprintf_like+0x162>
 800b68a:	4b52      	ldr	r3, [pc, #328]	; (800b7d4 <tiny_vsnprintf_like+0x2a8>)
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b68e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b690:	f7f4 fd72 	bl	8000178 <strlen>
 800b694:	4603      	mov	r3, r0
 800b696:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b698:	e004      	b.n	800b6a4 <tiny_vsnprintf_like+0x178>
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	1e5a      	subs	r2, r3, #1
 800b6a8:	61fa      	str	r2, [r7, #28]
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	dbf4      	blt.n	800b69a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6b4:	e00a      	b.n	800b6cc <tiny_vsnprintf_like+0x1a0>
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b8:	1c53      	adds	r3, r2, #1
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	1c59      	adds	r1, r3, #1
 800b6c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	dbf0      	blt.n	800b6b6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b6d4:	e061      	b.n	800b79a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6dc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b6de:	2310      	movs	r3, #16
 800b6e0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b6e2:	e02d      	b.n	800b740 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	f043 0302 	orr.w	r3, r3, #2
 800b6ea:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b6ec:	e025      	b.n	800b73a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b25      	cmp	r3, #37	; 0x25
 800b6f4:	d004      	beq.n	800b700 <tiny_vsnprintf_like+0x1d4>
 800b6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6fc:	2225      	movs	r2, #37	; 0x25
 800b6fe:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1ad2      	subs	r2, r2, r3
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	3b01      	subs	r3, #1
 800b70a:	429a      	cmp	r2, r3
 800b70c:	da17      	bge.n	800b73e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d006      	beq.n	800b724 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	1c59      	adds	r1, r3, #1
 800b71c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b71e:	7812      	ldrb	r2, [r2, #0]
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	e002      	b.n	800b72a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3b01      	subs	r3, #1
 800b728:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	3b01      	subs	r3, #1
 800b734:	429a      	cmp	r2, r3
 800b736:	db2f      	blt.n	800b798 <tiny_vsnprintf_like+0x26c>
 800b738:	e002      	b.n	800b740 <tiny_vsnprintf_like+0x214>
        break;
 800b73a:	bf00      	nop
 800b73c:	e000      	b.n	800b740 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800b73e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b6c      	cmp	r3, #108	; 0x6c
 800b744:	d105      	bne.n	800b752 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	1d1a      	adds	r2, r3, #4
 800b74a:	603a      	str	r2, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	637b      	str	r3, [r7, #52]	; 0x34
 800b750:	e00f      	b.n	800b772 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	1d1a      	adds	r2, r3, #4
 800b760:	603a      	str	r2, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
 800b766:	e004      	b.n	800b772 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	603a      	str	r2, [r7, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	1e5a      	subs	r2, r3, #1
 800b776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1acb      	subs	r3, r1, r3
 800b77c:	1ad1      	subs	r1, r2, r3
 800b77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b790:	f7ff fdde 	bl	800b350 <ee_number>
 800b794:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b796:	e000      	b.n	800b79a <tiny_vsnprintf_like+0x26e>
        continue;
 800b798:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3301      	adds	r3, #1
 800b79e:	607b      	str	r3, [r7, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f47f aed0 	bne.w	800b54a <tiny_vsnprintf_like+0x1e>
 800b7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	f6bf aec8 	bge.w	800b54a <tiny_vsnprintf_like+0x1e>
 800b7ba:	e000      	b.n	800b7be <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800b7bc:	bf00      	nop
  }

  *str = '\0';
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	1ad3      	subs	r3, r2, r3
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3738      	adds	r7, #56	; 0x38
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800c8b8 	.word	0x0800c8b8

0800b7d8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b090      	sub	sp, #64	; 0x40
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b7e0:	4b73      	ldr	r3, [pc, #460]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b7e6:	4b72      	ldr	r3, [pc, #456]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	4a70      	ldr	r2, [pc, #448]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b7f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b7f2:	4b70      	ldr	r3, [pc, #448]	; (800b9b4 <UTIL_SEQ_Run+0x1dc>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b7f8:	4b6f      	ldr	r3, [pc, #444]	; (800b9b8 <UTIL_SEQ_Run+0x1e0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b7fe:	4b6f      	ldr	r3, [pc, #444]	; (800b9bc <UTIL_SEQ_Run+0x1e4>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b804:	4b6e      	ldr	r3, [pc, #440]	; (800b9c0 <UTIL_SEQ_Run+0x1e8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b80a:	e08d      	b.n	800b928 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b80c:	2300      	movs	r3, #0
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b810:	e002      	b.n	800b818 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b814:	3301      	adds	r3, #1
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b818:	4a6a      	ldr	r2, [pc, #424]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b81c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	401a      	ands	r2, r3
 800b824:	4b62      	ldr	r3, [pc, #392]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4013      	ands	r3, r2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d0f1      	beq.n	800b812 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b82e:	4a65      	ldr	r2, [pc, #404]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b832:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	401a      	ands	r2, r3
 800b83a:	4b5d      	ldr	r3, [pc, #372]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4013      	ands	r3, r2
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b842:	4a60      	ldr	r2, [pc, #384]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	4013      	ands	r3, r2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b854:	4a5b      	ldr	r2, [pc, #364]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	4413      	add	r3, r2
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b860:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b862:	4a58      	ldr	r2, [pc, #352]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	4413      	add	r3, r2
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	4013      	ands	r3, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f000 f907 	bl	800ba84 <SEQ_BitPosition>
 800b876:	4603      	mov	r3, r0
 800b878:	461a      	mov	r2, r3
 800b87a:	4b53      	ldr	r3, [pc, #332]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b87c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b87e:	4a51      	ldr	r2, [pc, #324]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	4413      	add	r3, r2
 800b886:	685a      	ldr	r2, [r3, #4]
 800b888:	4b4f      	ldr	r3, [pc, #316]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2101      	movs	r1, #1
 800b88e:	fa01 f303 	lsl.w	r3, r1, r3
 800b892:	43db      	mvns	r3, r3
 800b894:	401a      	ands	r2, r3
 800b896:	494b      	ldr	r1, [pc, #300]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	440b      	add	r3, r1
 800b89e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8a6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8aa:	b672      	cpsid	i
}
 800b8ac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b8ae:	4b46      	ldr	r3, [pc, #280]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b8:	43da      	mvns	r2, r3
 800b8ba:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <UTIL_SEQ_Run+0x1dc>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	4a3c      	ldr	r2, [pc, #240]	; (800b9b4 <UTIL_SEQ_Run+0x1dc>)
 800b8c2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c8:	e013      	b.n	800b8f2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	4a3d      	ldr	r2, [pc, #244]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b8d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b8d4:	4b3c      	ldr	r3, [pc, #240]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	43da      	mvns	r2, r3
 800b8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	400a      	ands	r2, r1
 800b8e6:	4937      	ldr	r1, [pc, #220]	; (800b9c4 <UTIL_SEQ_Run+0x1ec>)
 800b8e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e8      	bne.n	800b8ca <UTIL_SEQ_Run+0xf2>
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f383 8810 	msr	PRIMASK, r3
}
 800b902:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b904:	4b30      	ldr	r3, [pc, #192]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a30      	ldr	r2, [pc, #192]	; (800b9cc <UTIL_SEQ_Run+0x1f4>)
 800b90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b90e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b910:	4b28      	ldr	r3, [pc, #160]	; (800b9b4 <UTIL_SEQ_Run+0x1dc>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b916:	4b28      	ldr	r3, [pc, #160]	; (800b9b8 <UTIL_SEQ_Run+0x1e0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b91c:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <UTIL_SEQ_Run+0x1e4>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b922:	4b27      	ldr	r3, [pc, #156]	; (800b9c0 <UTIL_SEQ_Run+0x1e8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	401a      	ands	r2, r3
 800b92e:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4013      	ands	r3, r2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <UTIL_SEQ_Run+0x16c>
 800b938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	4013      	ands	r3, r2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f43f af64 	beq.w	800b80c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b944:	4b20      	ldr	r3, [pc, #128]	; (800b9c8 <UTIL_SEQ_Run+0x1f0>)
 800b946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b94a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b94c:	f000 f88e 	bl	800ba6c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b950:	f3ef 8310 	mrs	r3, PRIMASK
 800b954:	613b      	str	r3, [r7, #16]
  return(result);
 800b956:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b95a:	b672      	cpsid	i
}
 800b95c:	bf00      	nop
  local_taskset = TaskSet;
 800b95e:	4b15      	ldr	r3, [pc, #84]	; (800b9b4 <UTIL_SEQ_Run+0x1dc>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b964:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <UTIL_SEQ_Run+0x1e0>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b96a:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <UTIL_SEQ_Run+0x1e4>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	401a      	ands	r2, r3
 800b976:	4b0e      	ldr	r3, [pc, #56]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d107      	bne.n	800b990 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b980:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <UTIL_SEQ_Run+0x1e8>)
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b98c:	f7f5 fadc 	bl	8000f48 <UTIL_SEQ_Idle>
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f383 8810 	msr	PRIMASK, r3
}
 800b99a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b99c:	f000 f86c 	bl	800ba78 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b9a0:	4a03      	ldr	r2, [pc, #12]	; (800b9b0 <UTIL_SEQ_Run+0x1d8>)
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	6013      	str	r3, [r2, #0]

  return;
 800b9a6:	bf00      	nop
}
 800b9a8:	3740      	adds	r7, #64	; 0x40
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000018 	.word	0x20000018
 800b9b4:	20000554 	.word	0x20000554
 800b9b8:	20000558 	.word	0x20000558
 800b9bc:	20000014 	.word	0x20000014
 800b9c0:	2000055c 	.word	0x2000055c
 800b9c4:	20000568 	.word	0x20000568
 800b9c8:	20000560 	.word	0x20000560
 800b9cc:	20000564 	.word	0x20000564

0800b9d0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e0:	617b      	str	r3, [r7, #20]
  return(result);
 800b9e2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9e6:	b672      	cpsid	i
}
 800b9e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 f84a 	bl	800ba84 <SEQ_BitPosition>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4a06      	ldr	r2, [pc, #24]	; (800ba10 <UTIL_SEQ_RegTask+0x40>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f383 8810 	msr	PRIMASK, r3
}
 800ba06:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ba08:	bf00      	nop
}
 800ba0a:	3720      	adds	r7, #32
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20000564 	.word	0x20000564

0800ba14 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba24:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba28:	b672      	cpsid	i
}
 800ba2a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ba2c:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <UTIL_SEQ_SetTask+0x50>)
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	4a0b      	ldr	r2, [pc, #44]	; (800ba64 <UTIL_SEQ_SetTask+0x50>)
 800ba36:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ba38:	4a0b      	ldr	r2, [pc, #44]	; (800ba68 <UTIL_SEQ_SetTask+0x54>)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	431a      	orrs	r2, r3
 800ba44:	4908      	ldr	r1, [pc, #32]	; (800ba68 <UTIL_SEQ_SetTask+0x54>)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f383 8810 	msr	PRIMASK, r3
}
 800ba56:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ba58:	bf00      	nop
}
 800ba5a:	371c      	adds	r7, #28
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000554 	.word	0x20000554
 800ba68:	20000568 	.word	0x20000568

0800ba6c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ba70:	bf00      	nop
}
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bc80      	pop	{r7}
 800ba76:	4770      	bx	lr

0800ba78 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ba7c:	bf00      	nop
}
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc80      	pop	{r7}
 800ba82:	4770      	bx	lr

0800ba84 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	0c1b      	lsrs	r3, r3, #16
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d104      	bne.n	800baa8 <SEQ_BitPosition+0x24>
 800ba9e:	2310      	movs	r3, #16
 800baa0:	73fb      	strb	r3, [r7, #15]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d105      	bne.n	800babe <SEQ_BitPosition+0x3a>
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	3308      	adds	r3, #8
 800bab6:	73fb      	strb	r3, [r7, #15]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	021b      	lsls	r3, r3, #8
 800babc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d105      	bne.n	800bad4 <SEQ_BitPosition+0x50>
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	3304      	adds	r3, #4
 800bacc:	73fb      	strb	r3, [r7, #15]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	011b      	lsls	r3, r3, #4
 800bad2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	0f1b      	lsrs	r3, r3, #28
 800bad8:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <SEQ_BitPosition+0x70>)
 800bada:	5cd2      	ldrb	r2, [r2, r3]
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4413      	add	r3, r2
 800bae0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	f1c3 031f 	rsb	r3, r3, #31
 800bae8:	b2db      	uxtb	r3, r3
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	bc80      	pop	{r7}
 800baf2:	4770      	bx	lr
 800baf4:	0800cb28 	.word	0x0800cb28

0800baf8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800bafc:	4b04      	ldr	r3, [pc, #16]	; (800bb10 <UTIL_TIMER_Init+0x18>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800bb02:	4b04      	ldr	r3, [pc, #16]	; (800bb14 <UTIL_TIMER_Init+0x1c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4798      	blx	r3
 800bb08:	4603      	mov	r3, r0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000570 	.word	0x20000570
 800bb14:	0800c978 	.word	0x0800c978

0800bb18 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d023      	beq.n	800bb76 <UTIL_TIMER_Create+0x5e>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d020      	beq.n	800bb76 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800bb3a:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <UTIL_TIMER_Create+0x68>)
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	68b8      	ldr	r0, [r7, #8]
 800bb40:	4798      	blx	r3
 800bb42:	4602      	mov	r2, r0
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	69ba      	ldr	r2, [r7, #24]
 800bb64:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	79fa      	ldrb	r2, [r7, #7]
 800bb6a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	e000      	b.n	800bb78 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800bb76:	2301      	movs	r3, #1
  }
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0800c978 	.word	0x0800c978

0800bb84 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08a      	sub	sp, #40	; 0x28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d056      	beq.n	800bc46 <UTIL_TIMER_Start+0xc2>
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f9a9 	bl	800bef0 <TimerExists>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f083 0301 	eor.w	r3, r3, #1
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d04d      	beq.n	800bc46 <UTIL_TIMER_Start+0xc2>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7a5b      	ldrb	r3, [r3, #9]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d149      	bne.n	800bc46 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbb2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbb6:	613b      	str	r3, [r7, #16]
  return(result);
 800bbb8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bbba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbbc:	b672      	cpsid	i
}
 800bbbe:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800bbc6:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <UTIL_TIMER_Start+0xd4>)
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4798      	blx	r3
 800bbcc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800bbce:	6a3a      	ldr	r2, [r7, #32]
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d201      	bcs.n	800bbda <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a3a      	ldr	r2, [r7, #32]
 800bbde:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800bbf2:	4b1a      	ldr	r3, [pc, #104]	; (800bc5c <UTIL_TIMER_Start+0xd8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800bbfa:	4b17      	ldr	r3, [pc, #92]	; (800bc58 <UTIL_TIMER_Start+0xd4>)
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f9eb 	bl	800bfdc <TimerInsertNewHeadTimer>
 800bc06:	e017      	b.n	800bc38 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800bc08:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <UTIL_TIMER_Start+0xd4>)
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	4798      	blx	r3
 800bc0e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	441a      	add	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <UTIL_TIMER_Start+0xd8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d203      	bcs.n	800bc32 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f9d6 	bl	800bfdc <TimerInsertNewHeadTimer>
 800bc30:	e002      	b.n	800bc38 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f9a2 	bl	800bf7c <TimerInsertTimer>
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f383 8810 	msr	PRIMASK, r3
}
 800bc42:	bf00      	nop
  {
 800bc44:	e002      	b.n	800bc4c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800bc46:	2301      	movs	r3, #1
 800bc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3728      	adds	r7, #40	; 0x28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	0800c978 	.word	0x0800c978
 800bc5c:	20000570 	.word	0x20000570

0800bc60 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d05b      	beq.n	800bd2a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc72:	f3ef 8310 	mrs	r3, PRIMASK
 800bc76:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc78:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bc7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc7c:	b672      	cpsid	i
}
 800bc7e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800bc80:	4b2d      	ldr	r3, [pc, #180]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800bc86:	4b2c      	ldr	r3, [pc, #176]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800bc92:	4b29      	ldr	r3, [pc, #164]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d041      	beq.n	800bd1e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800bca0:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d134      	bne.n	800bd14 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800bcaa:	4b23      	ldr	r3, [pc, #140]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800bcb2:	4b21      	ldr	r3, [pc, #132]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800bcbc:	4b1e      	ldr	r3, [pc, #120]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	4a1d      	ldr	r2, [pc, #116]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcc4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f92c 	bl	800bf28 <TimerSetTimeout>
 800bcd0:	e023      	b.n	800bd1a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800bcd2:	4b1a      	ldr	r3, [pc, #104]	; (800bd3c <UTIL_TIMER_Stop+0xdc>)
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	4798      	blx	r3
            TimerListHead = NULL;
 800bcd8:	4b17      	ldr	r3, [pc, #92]	; (800bd38 <UTIL_TIMER_Stop+0xd8>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e01c      	b.n	800bd1a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d110      	bne.n	800bd0a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d006      	beq.n	800bcfe <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800bcfc:	e00d      	b.n	800bd1a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	615a      	str	r2, [r3, #20]
            break;
 800bd08:	e007      	b.n	800bd1a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e2      	bne.n	800bce0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	77fb      	strb	r3, [r7, #31]
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f383 8810 	msr	PRIMASK, r3
}
 800bd28:	e001      	b.n	800bd2e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800bd2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3720      	adds	r7, #32
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000570 	.word	0x20000570
 800bd3c:	0800c978 	.word	0x0800c978

0800bd40 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d102      	bne.n	800bd5a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bd54:	2301      	movs	r3, #1
 800bd56:	73fb      	strb	r3, [r7, #15]
 800bd58:	e014      	b.n	800bd84 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	; (800bd90 <UTIL_TIMER_SetPeriod+0x50>)
 800bd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5e:	6838      	ldr	r0, [r7, #0]
 800bd60:	4798      	blx	r3
 800bd62:	4602      	mov	r2, r0
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f8c1 	bl	800bef0 <TimerExists>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d007      	beq.n	800bd84 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ff73 	bl	800bc60 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff ff02 	bl	800bb84 <UTIL_TIMER_Start>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0800c978 	.word	0x0800c978

0800bd94 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b089      	sub	sp, #36	; 0x24
 800bd98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd9a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bda0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bda2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bda4:	b672      	cpsid	i
}
 800bda6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bda8:	4b38      	ldr	r3, [pc, #224]	; (800be8c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	4798      	blx	r3
 800bdae:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800bdb0:	4b36      	ldr	r3, [pc, #216]	; (800be8c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	4798      	blx	r3
 800bdb6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bdc0:	4b33      	ldr	r3, [pc, #204]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d037      	beq.n	800be38 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bdc8:	4b31      	ldr	r3, [pc, #196]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d206      	bcs.n	800bde6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e002      	b.n	800bdec <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1ea      	bne.n	800bdce <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bdf8:	e01e      	b.n	800be38 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bdfa:	4b25      	ldr	r3, [pc, #148]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800be00:	4b23      	ldr	r3, [pc, #140]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	4a22      	ldr	r2, [pc, #136]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be08:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2200      	movs	r2, #0
 800be0e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	2200      	movs	r2, #0
 800be14:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	6912      	ldr	r2, [r2, #16]
 800be1e:	4610      	mov	r0, r2
 800be20:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	7adb      	ldrb	r3, [r3, #11]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d106      	bne.n	800be38 <UTIL_TIMER_IRQ_Handler+0xa4>
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	7a9b      	ldrb	r3, [r3, #10]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d102      	bne.n	800be38 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800be32:	69f8      	ldr	r0, [r7, #28]
 800be34:	f7ff fea6 	bl	800bb84 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800be38:	4b15      	ldr	r3, [pc, #84]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00d      	beq.n	800be5c <UTIL_TIMER_IRQ_Handler+0xc8>
 800be40:	4b13      	ldr	r3, [pc, #76]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0d7      	beq.n	800bdfa <UTIL_TIMER_IRQ_Handler+0x66>
 800be4a:	4b11      	ldr	r3, [pc, #68]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681c      	ldr	r4, [r3, #0]
 800be50:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	429c      	cmp	r4, r3
 800be5a:	d3ce      	bcc.n	800bdfa <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800be5c:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <UTIL_TIMER_IRQ_Handler+0xe4>
 800be64:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	7a1b      	ldrb	r3, [r3, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d104      	bne.n	800be78 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800be6e:	4b08      	ldr	r3, [pc, #32]	; (800be90 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f858 	bl	800bf28 <TimerSetTimeout>
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f383 8810 	msr	PRIMASK, r3
}
 800be82:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800be84:	bf00      	nop
 800be86:	3724      	adds	r7, #36	; 0x24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}
 800be8c:	0800c978 	.word	0x0800c978
 800be90:	20000570 	.word	0x20000570

0800be94 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800be9a:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	4798      	blx	r3
 800bea0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bea2:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	0800c978 	.word	0x0800c978

0800beb8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bec0:	4b0a      	ldr	r3, [pc, #40]	; (800beec <UTIL_TIMER_GetElapsedTime+0x34>)
 800bec2:	69db      	ldr	r3, [r3, #28]
 800bec4:	4798      	blx	r3
 800bec6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bec8:	4b08      	ldr	r3, [pc, #32]	; (800beec <UTIL_TIMER_GetElapsedTime+0x34>)
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	4798      	blx	r3
 800bed0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bed2:	4b06      	ldr	r3, [pc, #24]	; (800beec <UTIL_TIMER_GetElapsedTime+0x34>)
 800bed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	1a8a      	subs	r2, r1, r2
 800bedc:	4610      	mov	r0, r2
 800bede:	4798      	blx	r3
 800bee0:	4603      	mov	r3, r0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	0800c978 	.word	0x0800c978

0800bef0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <TimerExists+0x34>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800befe:	e008      	b.n	800bf12 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d101      	bne.n	800bf0c <TimerExists+0x1c>
    {
      return true;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e006      	b.n	800bf1a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1f3      	bne.n	800bf00 <TimerExists+0x10>
  }
  return false;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr
 800bf24:	20000570 	.word	0x20000570

0800bf28 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <TimerSetTimeout+0x50>)
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	4798      	blx	r3
 800bf36:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681c      	ldr	r4, [r3, #0]
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <TimerSetTimeout+0x50>)
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	4798      	blx	r3
 800bf48:	4602      	mov	r2, r0
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d207      	bcs.n	800bf62 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bf52:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <TimerSetTimeout+0x50>)
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	4798      	blx	r3
 800bf58:	4602      	mov	r2, r0
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	441a      	add	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <TimerSetTimeout+0x50>)
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	4798      	blx	r3
}
 800bf6e:	bf00      	nop
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd90      	pop	{r4, r7, pc}
 800bf76:	bf00      	nop
 800bf78:	0800c978 	.word	0x0800c978

0800bf7c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bf84:	4b14      	ldr	r3, [pc, #80]	; (800bfd8 <TimerInsertTimer+0x5c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bf8a:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <TimerInsertTimer+0x5c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	695b      	ldr	r3, [r3, #20]
 800bf90:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bf92:	e012      	b.n	800bfba <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d905      	bls.n	800bfac <TimerInsertTimer+0x30>
    {
        cur = next;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	60bb      	str	r3, [r7, #8]
 800bfaa:	e006      	b.n	800bfba <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	615a      	str	r2, [r3, #20]
        return;
 800bfb8:	e009      	b.n	800bfce <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e8      	bne.n	800bf94 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	615a      	str	r2, [r3, #20]
}
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bc80      	pop	{r7}
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	20000570 	.word	0x20000570

0800bfdc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bfe4:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <TimerInsertNewHeadTimer+0x38>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bffc:	4a05      	ldr	r2, [pc, #20]	; (800c014 <TimerInsertNewHeadTimer+0x38>)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c002:	4b04      	ldr	r3, [pc, #16]	; (800c014 <TimerInsertNewHeadTimer+0x38>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff ff8e 	bl	800bf28 <TimerSetTimeout>
}
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000570 	.word	0x20000570

0800c018 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c01c:	2218      	movs	r2, #24
 800c01e:	2100      	movs	r1, #0
 800c020:	4807      	ldr	r0, [pc, #28]	; (800c040 <UTIL_ADV_TRACE_Init+0x28>)
 800c022:	f7ff f8e2 	bl	800b1ea <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c02a:	2100      	movs	r1, #0
 800c02c:	4805      	ldr	r0, [pc, #20]	; (800c044 <UTIL_ADV_TRACE_Init+0x2c>)
 800c02e:	f7ff f8dc 	bl	800b1ea <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c032:	4b05      	ldr	r3, [pc, #20]	; (800c048 <UTIL_ADV_TRACE_Init+0x30>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <UTIL_ADV_TRACE_Init+0x34>)
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	20000574 	.word	0x20000574
 800c044:	2000058c 	.word	0x2000058c
 800c048:	0800c9b8 	.word	0x0800c9b8
 800c04c:	0800c295 	.word	0x0800c295

0800c050 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c050:	b408      	push	{r3}
 800c052:	b580      	push	{r7, lr}
 800c054:	b08d      	sub	sp, #52	; 0x34
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	60b9      	str	r1, [r7, #8]
 800c05c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c05e:	2300      	movs	r3, #0
 800c060:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c062:	2300      	movs	r3, #0
 800c064:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c066:	4b37      	ldr	r3, [pc, #220]	; (800c144 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c068:	7a1b      	ldrb	r3, [r3, #8]
 800c06a:	461a      	mov	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4293      	cmp	r3, r2
 800c070:	d902      	bls.n	800c078 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c072:	f06f 0304 	mvn.w	r3, #4
 800c076:	e05e      	b.n	800c136 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c078:	4b32      	ldr	r3, [pc, #200]	; (800c144 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c07a:	68da      	ldr	r2, [r3, #12]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	4013      	ands	r3, r2
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	429a      	cmp	r2, r3
 800c084:	d002      	beq.n	800c08c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c086:	f06f 0305 	mvn.w	r3, #5
 800c08a:	e054      	b.n	800c136 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c08c:	4b2d      	ldr	r3, [pc, #180]	; (800c144 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c09a:	4b2a      	ldr	r3, [pc, #168]	; (800c144 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f107 0116 	add.w	r1, r7, #22
 800c0a2:	f107 0218 	add.w	r2, r7, #24
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c0aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0ae:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0b8:	4823      	ldr	r0, [pc, #140]	; (800c148 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c0ba:	f7ff fa37 	bl	800b52c <tiny_vsnprintf_like>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800c0c2:	f000 f9f1 	bl	800c4a8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c0c6:	8afa      	ldrh	r2, [r7, #22]
 800c0c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ca:	4413      	add	r3, r2
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f107 0214 	add.w	r2, r7, #20
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 f969 	bl	800c3ac <TRACE_AllocateBufer>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0e0:	d025      	beq.n	800c12e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c0e6:	e00e      	b.n	800c106 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c0e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0ea:	8aba      	ldrh	r2, [r7, #20]
 800c0ec:	3330      	adds	r3, #48	; 0x30
 800c0ee:	443b      	add	r3, r7
 800c0f0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c0f4:	4b15      	ldr	r3, [pc, #84]	; (800c14c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c0f6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c0f8:	8abb      	ldrh	r3, [r7, #20]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c100:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c102:	3301      	adds	r3, #1
 800c104:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c106:	8afb      	ldrh	r3, [r7, #22]
 800c108:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d3ec      	bcc.n	800c0e8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c10e:	8abb      	ldrh	r3, [r7, #20]
 800c110:	461a      	mov	r2, r3
 800c112:	4b0e      	ldr	r3, [pc, #56]	; (800c14c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c114:	18d0      	adds	r0, r2, r3
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c11a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c11e:	f7ff fa05 	bl	800b52c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c122:	f000 f9df 	bl	800c4e4 <TRACE_UnLock>

    return TRACE_Send();
 800c126:	f000 f831 	bl	800c18c <TRACE_Send>
 800c12a:	4603      	mov	r3, r0
 800c12c:	e003      	b.n	800c136 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c12e:	f000 f9d9 	bl	800c4e4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c132:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c136:	4618      	mov	r0, r3
 800c138:	3734      	adds	r7, #52	; 0x34
 800c13a:	46bd      	mov	sp, r7
 800c13c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c140:	b001      	add	sp, #4
 800c142:	4770      	bx	lr
 800c144:	20000574 	.word	0x20000574
 800c148:	2000078c 	.word	0x2000078c
 800c14c:	2000058c 	.word	0x2000058c

0800c150 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c158:	4a03      	ldr	r2, [pc, #12]	; (800c168 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6053      	str	r3, [r2, #4]
}
 800c15e:	bf00      	nop
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	bc80      	pop	{r7}
 800c166:	4770      	bx	lr
 800c168:	20000574 	.word	0x20000574

0800c16c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c176:	4a04      	ldr	r2, [pc, #16]	; (800c188 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	7213      	strb	r3, [r2, #8]
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	bc80      	pop	{r7}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	20000574 	.word	0x20000574

0800c18c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c19a:	f3ef 8310 	mrs	r3, PRIMASK
 800c19e:	613b      	str	r3, [r7, #16]
  return(result);
 800c1a0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c1a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1a4:	b672      	cpsid	i
}
 800c1a6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c1a8:	f000 f9ba 	bl	800c520 <TRACE_IsLocked>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d15d      	bne.n	800c26e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c1b2:	f000 f979 	bl	800c4a8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c1b6:	4b34      	ldr	r3, [pc, #208]	; (800c288 <TRACE_Send+0xfc>)
 800c1b8:	8a1a      	ldrh	r2, [r3, #16]
 800c1ba:	4b33      	ldr	r3, [pc, #204]	; (800c288 <TRACE_Send+0xfc>)
 800c1bc:	8a5b      	ldrh	r3, [r3, #18]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d04d      	beq.n	800c25e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c1c2:	4b31      	ldr	r3, [pc, #196]	; (800c288 <TRACE_Send+0xfc>)
 800c1c4:	789b      	ldrb	r3, [r3, #2]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d117      	bne.n	800c1fa <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c1ca:	4b2f      	ldr	r3, [pc, #188]	; (800c288 <TRACE_Send+0xfc>)
 800c1cc:	881a      	ldrh	r2, [r3, #0]
 800c1ce:	4b2e      	ldr	r3, [pc, #184]	; (800c288 <TRACE_Send+0xfc>)
 800c1d0:	8a1b      	ldrh	r3, [r3, #16]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	4b2c      	ldr	r3, [pc, #176]	; (800c288 <TRACE_Send+0xfc>)
 800c1d8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c1da:	4b2b      	ldr	r3, [pc, #172]	; (800c288 <TRACE_Send+0xfc>)
 800c1dc:	2202      	movs	r2, #2
 800c1de:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c1e0:	4b29      	ldr	r3, [pc, #164]	; (800c288 <TRACE_Send+0xfc>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c1e6:	4b28      	ldr	r3, [pc, #160]	; (800c288 <TRACE_Send+0xfc>)
 800c1e8:	8a9b      	ldrh	r3, [r3, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c1ee:	4b26      	ldr	r3, [pc, #152]	; (800c288 <TRACE_Send+0xfc>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c1f4:	4b24      	ldr	r3, [pc, #144]	; (800c288 <TRACE_Send+0xfc>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c1fa:	4b23      	ldr	r3, [pc, #140]	; (800c288 <TRACE_Send+0xfc>)
 800c1fc:	789b      	ldrb	r3, [r3, #2]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d115      	bne.n	800c22e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c202:	4b21      	ldr	r3, [pc, #132]	; (800c288 <TRACE_Send+0xfc>)
 800c204:	8a5a      	ldrh	r2, [r3, #18]
 800c206:	4b20      	ldr	r3, [pc, #128]	; (800c288 <TRACE_Send+0xfc>)
 800c208:	8a1b      	ldrh	r3, [r3, #16]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d908      	bls.n	800c220 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c20e:	4b1e      	ldr	r3, [pc, #120]	; (800c288 <TRACE_Send+0xfc>)
 800c210:	8a5a      	ldrh	r2, [r3, #18]
 800c212:	4b1d      	ldr	r3, [pc, #116]	; (800c288 <TRACE_Send+0xfc>)
 800c214:	8a1b      	ldrh	r3, [r3, #16]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	b29a      	uxth	r2, r3
 800c21a:	4b1b      	ldr	r3, [pc, #108]	; (800c288 <TRACE_Send+0xfc>)
 800c21c:	829a      	strh	r2, [r3, #20]
 800c21e:	e006      	b.n	800c22e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c220:	4b19      	ldr	r3, [pc, #100]	; (800c288 <TRACE_Send+0xfc>)
 800c222:	8a1b      	ldrh	r3, [r3, #16]
 800c224:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c228:	b29a      	uxth	r2, r3
 800c22a:	4b17      	ldr	r3, [pc, #92]	; (800c288 <TRACE_Send+0xfc>)
 800c22c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c22e:	4b16      	ldr	r3, [pc, #88]	; (800c288 <TRACE_Send+0xfc>)
 800c230:	8a1b      	ldrh	r3, [r3, #16]
 800c232:	461a      	mov	r2, r3
 800c234:	4b15      	ldr	r3, [pc, #84]	; (800c28c <TRACE_Send+0x100>)
 800c236:	4413      	add	r3, r2
 800c238:	61bb      	str	r3, [r7, #24]
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f383 8810 	msr	PRIMASK, r3
}
 800c244:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c246:	f7f4 fea5 	bl	8000f94 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c24a:	4b11      	ldr	r3, [pc, #68]	; (800c290 <TRACE_Send+0x104>)
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	4a0e      	ldr	r2, [pc, #56]	; (800c288 <TRACE_Send+0xfc>)
 800c250:	8a92      	ldrh	r2, [r2, #20]
 800c252:	4611      	mov	r1, r2
 800c254:	69b8      	ldr	r0, [r7, #24]
 800c256:	4798      	blx	r3
 800c258:	4603      	mov	r3, r0
 800c25a:	77fb      	strb	r3, [r7, #31]
 800c25c:	e00d      	b.n	800c27a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c25e:	f000 f941 	bl	800c4e4 <TRACE_UnLock>
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f383 8810 	msr	PRIMASK, r3
}
 800c26c:	e005      	b.n	800c27a <TRACE_Send+0xee>
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f383 8810 	msr	PRIMASK, r3
}
 800c278:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c27a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3720      	adds	r7, #32
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000574 	.word	0x20000574
 800c28c:	2000058c 	.word	0x2000058c
 800c290:	0800c9b8 	.word	0x0800c9b8

0800c294 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a4:	617b      	str	r3, [r7, #20]
  return(result);
 800c2a6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c2a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2aa:	b672      	cpsid	i
}
 800c2ac:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c2ae:	4b3c      	ldr	r3, [pc, #240]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2b0:	789b      	ldrb	r3, [r3, #2]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d106      	bne.n	800c2c4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c2b6:	4b3a      	ldr	r3, [pc, #232]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c2bc:	4b38      	ldr	r3, [pc, #224]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	821a      	strh	r2, [r3, #16]
 800c2c2:	e00a      	b.n	800c2da <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c2c4:	4b36      	ldr	r3, [pc, #216]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2c6:	8a1a      	ldrh	r2, [r3, #16]
 800c2c8:	4b35      	ldr	r3, [pc, #212]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2ca:	8a9b      	ldrh	r3, [r3, #20]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	4b32      	ldr	r3, [pc, #200]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2d8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c2da:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2dc:	8a1a      	ldrh	r2, [r3, #16]
 800c2de:	4b30      	ldr	r3, [pc, #192]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2e0:	8a5b      	ldrh	r3, [r3, #18]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d04d      	beq.n	800c382 <TRACE_TxCpltCallback+0xee>
 800c2e6:	4b2e      	ldr	r3, [pc, #184]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2e8:	8adb      	ldrh	r3, [r3, #22]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d149      	bne.n	800c382 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c2ee:	4b2c      	ldr	r3, [pc, #176]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2f0:	789b      	ldrb	r3, [r3, #2]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d117      	bne.n	800c326 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c2f6:	4b2a      	ldr	r3, [pc, #168]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	4b29      	ldr	r3, [pc, #164]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c2fc:	8a1b      	ldrh	r3, [r3, #16]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	b29a      	uxth	r2, r3
 800c302:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c304:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c306:	4b26      	ldr	r3, [pc, #152]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c308:	2202      	movs	r2, #2
 800c30a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c30c:	4b24      	ldr	r3, [pc, #144]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c30e:	2200      	movs	r2, #0
 800c310:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c312:	4b23      	ldr	r3, [pc, #140]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c314:	8a9b      	ldrh	r3, [r3, #20]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d105      	bne.n	800c326 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c31a:	4b21      	ldr	r3, [pc, #132]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c320:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c322:	2200      	movs	r2, #0
 800c324:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c326:	4b1e      	ldr	r3, [pc, #120]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c328:	789b      	ldrb	r3, [r3, #2]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d115      	bne.n	800c35a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c32e:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c330:	8a5a      	ldrh	r2, [r3, #18]
 800c332:	4b1b      	ldr	r3, [pc, #108]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c334:	8a1b      	ldrh	r3, [r3, #16]
 800c336:	429a      	cmp	r2, r3
 800c338:	d908      	bls.n	800c34c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c33a:	4b19      	ldr	r3, [pc, #100]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c33c:	8a5a      	ldrh	r2, [r3, #18]
 800c33e:	4b18      	ldr	r3, [pc, #96]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c340:	8a1b      	ldrh	r3, [r3, #16]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	b29a      	uxth	r2, r3
 800c346:	4b16      	ldr	r3, [pc, #88]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c348:	829a      	strh	r2, [r3, #20]
 800c34a:	e006      	b.n	800c35a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c34c:	4b14      	ldr	r3, [pc, #80]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c34e:	8a1b      	ldrh	r3, [r3, #16]
 800c350:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c354:	b29a      	uxth	r2, r3
 800c356:	4b12      	ldr	r3, [pc, #72]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c358:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c35a:	4b11      	ldr	r3, [pc, #68]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c35c:	8a1b      	ldrh	r3, [r3, #16]
 800c35e:	461a      	mov	r2, r3
 800c360:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <TRACE_TxCpltCallback+0x110>)
 800c362:	4413      	add	r3, r2
 800c364:	61fb      	str	r3, [r7, #28]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f383 8810 	msr	PRIMASK, r3
}
 800c370:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c372:	4b0d      	ldr	r3, [pc, #52]	; (800c3a8 <TRACE_TxCpltCallback+0x114>)
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	4a0a      	ldr	r2, [pc, #40]	; (800c3a0 <TRACE_TxCpltCallback+0x10c>)
 800c378:	8a92      	ldrh	r2, [r2, #20]
 800c37a:	4611      	mov	r1, r2
 800c37c:	69f8      	ldr	r0, [r7, #28]
 800c37e:	4798      	blx	r3
 800c380:	e00a      	b.n	800c398 <TRACE_TxCpltCallback+0x104>
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f383 8810 	msr	PRIMASK, r3
}
 800c38c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c38e:	f7f4 fe09 	bl	8000fa4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c392:	f000 f8a7 	bl	800c4e4 <TRACE_UnLock>
  }
}
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	3720      	adds	r7, #32
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000574 	.word	0x20000574
 800c3a4:	2000058c 	.word	0x2000058c
 800c3a8:	0800c9b8 	.word	0x0800c9b8

0800c3ac <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6039      	str	r1, [r7, #0]
 800c3b6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c3b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3bc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3be:	f3ef 8310 	mrs	r3, PRIMASK
 800c3c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3c4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c3c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3c8:	b672      	cpsid	i
}
 800c3ca:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c3cc:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3ce:	8a5a      	ldrh	r2, [r3, #18]
 800c3d0:	4b34      	ldr	r3, [pc, #208]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3d2:	8a1b      	ldrh	r3, [r3, #16]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d11b      	bne.n	800c410 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c3d8:	4b32      	ldr	r3, [pc, #200]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3da:	8a5b      	ldrh	r3, [r3, #18]
 800c3dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c3e0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	8afb      	ldrh	r3, [r7, #22]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d33a      	bcc.n	800c460 <TRACE_AllocateBufer+0xb4>
 800c3ea:	4b2e      	ldr	r3, [pc, #184]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3ec:	8a1b      	ldrh	r3, [r3, #16]
 800c3ee:	88fa      	ldrh	r2, [r7, #6]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d235      	bcs.n	800c460 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c3f4:	4b2b      	ldr	r3, [pc, #172]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c3fa:	4b2a      	ldr	r3, [pc, #168]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c3fc:	8a5a      	ldrh	r2, [r3, #18]
 800c3fe:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c400:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c402:	4b28      	ldr	r3, [pc, #160]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c404:	8a1b      	ldrh	r3, [r3, #16]
 800c406:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c408:	4b26      	ldr	r3, [pc, #152]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	825a      	strh	r2, [r3, #18]
 800c40e:	e027      	b.n	800c460 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c410:	4b24      	ldr	r3, [pc, #144]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c412:	8a5a      	ldrh	r2, [r3, #18]
 800c414:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c416:	8a1b      	ldrh	r3, [r3, #16]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d91b      	bls.n	800c454 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c41c:	4b21      	ldr	r3, [pc, #132]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c41e:	8a5b      	ldrh	r3, [r3, #18]
 800c420:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c424:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c426:	88fa      	ldrh	r2, [r7, #6]
 800c428:	8afb      	ldrh	r3, [r7, #22]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d318      	bcc.n	800c460 <TRACE_AllocateBufer+0xb4>
 800c42e:	4b1d      	ldr	r3, [pc, #116]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c430:	8a1b      	ldrh	r3, [r3, #16]
 800c432:	88fa      	ldrh	r2, [r7, #6]
 800c434:	429a      	cmp	r2, r3
 800c436:	d213      	bcs.n	800c460 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c438:	4b1a      	ldr	r3, [pc, #104]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c43a:	2201      	movs	r2, #1
 800c43c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c43e:	4b19      	ldr	r3, [pc, #100]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c440:	8a5a      	ldrh	r2, [r3, #18]
 800c442:	4b18      	ldr	r3, [pc, #96]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c444:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c446:	4b17      	ldr	r3, [pc, #92]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c448:	8a1b      	ldrh	r3, [r3, #16]
 800c44a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c44c:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c44e:	2200      	movs	r2, #0
 800c450:	825a      	strh	r2, [r3, #18]
 800c452:	e005      	b.n	800c460 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c454:	4b13      	ldr	r3, [pc, #76]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c456:	8a1a      	ldrh	r2, [r3, #16]
 800c458:	4b12      	ldr	r3, [pc, #72]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c45a:	8a5b      	ldrh	r3, [r3, #18]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c460:	8afa      	ldrh	r2, [r7, #22]
 800c462:	88fb      	ldrh	r3, [r7, #6]
 800c464:	429a      	cmp	r2, r3
 800c466:	d90f      	bls.n	800c488 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c46a:	8a5a      	ldrh	r2, [r3, #18]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c470:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c472:	8a5a      	ldrh	r2, [r3, #18]
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	4413      	add	r3, r2
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47e:	b29a      	uxth	r2, r3
 800c480:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <TRACE_AllocateBufer+0xf8>)
 800c482:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	82bb      	strh	r3, [r7, #20]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f383 8810 	msr	PRIMASK, r3
}
 800c492:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c494:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bc80      	pop	{r7}
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	20000574 	.word	0x20000574

0800c4a8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c4b2:	607b      	str	r3, [r7, #4]
  return(result);
 800c4b4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c4b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4b8:	b672      	cpsid	i
}
 800c4ba:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c4bc:	4b08      	ldr	r3, [pc, #32]	; (800c4e0 <TRACE_Lock+0x38>)
 800c4be:	8adb      	ldrh	r3, [r3, #22]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <TRACE_Lock+0x38>)
 800c4c6:	82da      	strh	r2, [r3, #22]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f383 8810 	msr	PRIMASK, r3
}
 800c4d2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c4d4:	bf00      	nop
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bc80      	pop	{r7}
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20000574 	.word	0x20000574

0800c4e4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ee:	607b      	str	r3, [r7, #4]
  return(result);
 800c4f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c4f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4f4:	b672      	cpsid	i
}
 800c4f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c4f8:	4b08      	ldr	r3, [pc, #32]	; (800c51c <TRACE_UnLock+0x38>)
 800c4fa:	8adb      	ldrh	r3, [r3, #22]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	4b06      	ldr	r3, [pc, #24]	; (800c51c <TRACE_UnLock+0x38>)
 800c502:	82da      	strh	r2, [r3, #22]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f383 8810 	msr	PRIMASK, r3
}
 800c50e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c510:	bf00      	nop
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	bc80      	pop	{r7}
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20000574 	.word	0x20000574

0800c520 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c520:	b480      	push	{r7}
 800c522:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <TRACE_IsLocked+0x1c>)
 800c526:	8adb      	ldrh	r3, [r3, #22]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	bf14      	ite	ne
 800c52c:	2301      	movne	r3, #1
 800c52e:	2300      	moveq	r3, #0
 800c530:	b2db      	uxtb	r3, r3
}
 800c532:	4618      	mov	r0, r3
 800c534:	46bd      	mov	sp, r7
 800c536:	bc80      	pop	{r7}
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000574 	.word	0x20000574

0800c540 <__libc_init_array>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	4d0d      	ldr	r5, [pc, #52]	; (800c578 <__libc_init_array+0x38>)
 800c544:	4c0d      	ldr	r4, [pc, #52]	; (800c57c <__libc_init_array+0x3c>)
 800c546:	1b64      	subs	r4, r4, r5
 800c548:	10a4      	asrs	r4, r4, #2
 800c54a:	2600      	movs	r6, #0
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	d109      	bne.n	800c564 <__libc_init_array+0x24>
 800c550:	4d0b      	ldr	r5, [pc, #44]	; (800c580 <__libc_init_array+0x40>)
 800c552:	4c0c      	ldr	r4, [pc, #48]	; (800c584 <__libc_init_array+0x44>)
 800c554:	f000 f842 	bl	800c5dc <_init>
 800c558:	1b64      	subs	r4, r4, r5
 800c55a:	10a4      	asrs	r4, r4, #2
 800c55c:	2600      	movs	r6, #0
 800c55e:	42a6      	cmp	r6, r4
 800c560:	d105      	bne.n	800c56e <__libc_init_array+0x2e>
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f855 3b04 	ldr.w	r3, [r5], #4
 800c568:	4798      	blx	r3
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7ee      	b.n	800c54c <__libc_init_array+0xc>
 800c56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c572:	4798      	blx	r3
 800c574:	3601      	adds	r6, #1
 800c576:	e7f2      	b.n	800c55e <__libc_init_array+0x1e>
 800c578:	0800cb40 	.word	0x0800cb40
 800c57c:	0800cb40 	.word	0x0800cb40
 800c580:	0800cb40 	.word	0x0800cb40
 800c584:	0800cb44 	.word	0x0800cb44

0800c588 <memcpy>:
 800c588:	440a      	add	r2, r1
 800c58a:	4291      	cmp	r1, r2
 800c58c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c590:	d100      	bne.n	800c594 <memcpy+0xc>
 800c592:	4770      	bx	lr
 800c594:	b510      	push	{r4, lr}
 800c596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	d1f9      	bne.n	800c596 <memcpy+0xe>
 800c5a2:	bd10      	pop	{r4, pc}

0800c5a4 <memset>:
 800c5a4:	4402      	add	r2, r0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d100      	bne.n	800c5ae <memset+0xa>
 800c5ac:	4770      	bx	lr
 800c5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b2:	e7f9      	b.n	800c5a8 <memset+0x4>

0800c5b4 <strncmp>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	b172      	cbz	r2, 800c5d8 <strncmp+0x24>
 800c5ba:	3901      	subs	r1, #1
 800c5bc:	1884      	adds	r4, r0, r2
 800c5be:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c5c6:	4290      	cmp	r0, r2
 800c5c8:	d101      	bne.n	800c5ce <strncmp+0x1a>
 800c5ca:	42a3      	cmp	r3, r4
 800c5cc:	d101      	bne.n	800c5d2 <strncmp+0x1e>
 800c5ce:	1a80      	subs	r0, r0, r2
 800c5d0:	bd10      	pop	{r4, pc}
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d1f3      	bne.n	800c5be <strncmp+0xa>
 800c5d6:	e7fa      	b.n	800c5ce <strncmp+0x1a>
 800c5d8:	4610      	mov	r0, r2
 800c5da:	e7f9      	b.n	800c5d0 <strncmp+0x1c>

0800c5dc <_init>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_fini>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	bf00      	nop
 800c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ee:	bc08      	pop	{r3}
 800c5f0:	469e      	mov	lr, r3
 800c5f2:	4770      	bx	lr
